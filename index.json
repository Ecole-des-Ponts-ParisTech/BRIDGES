{
  "api/BRIDGES.Algebra.Fundamentals.html": {
    "href": "api/BRIDGES.Algebra.Fundamentals.html",
    "title": "Namespace BRIDGES.Algebra.Fundamentals | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Algebra.Fundamentals Interfaces IAddable<T> Interface defining a method for the addition of two operands (i.e. an internal binary operation). IDivisible<T> Interface defining a method for the division of two operands (i.e. the multiplication with an element's inverse value). IMultiplicable<T> Interface defining a method for the multiplication of two operands (i.e. an internal binary operation). IOneable<T> Interface defining a method returning the neutral element of the multiplication. ISubtractable<T> Interface defining a method for the subtraction of two operands (i.e. the addition with an element's opposite value). IZeroable<T> Interface defining a method returning the neutral element of the addition."
  },
  "api/BRIDGES.Algebra.Fundamentals.IAddable-1.html": {
    "href": "api/BRIDGES.Algebra.Fundamentals.IAddable-1.html",
    "title": "Interface IAddable<T> | BRIDGES Documentation",
    "keywords": "Interface IAddable<T> Interface defining a method for the addition of two operands (i.e. an internal binary operation). Namespace : BRIDGES.Algebra.Fundamentals Assembly : BRIDGES.dll Syntax public interface IAddable<T> where T : IAddable<T> Type Parameters Name Description T Type of the elements of the additive set. Properties | Improve this Doc View Source IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration bool IsAssociative { get; } Property Value Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration bool IsCommutative { get; } Property Value Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. Methods | Improve this Doc View Source Add(T) Computes the addition of the current element with another element on the right. Declaration T Add(T right) Parameters Type Name Description T right Element to add with on the right. Returns Type Description T The new element resulting from the addition."
  },
  "api/BRIDGES.Algebra.Fundamentals.IDivisible-1.html": {
    "href": "api/BRIDGES.Algebra.Fundamentals.IDivisible-1.html",
    "title": "Interface IDivisible<T> | BRIDGES Documentation",
    "keywords": "Interface IDivisible<T> Interface defining a method for the division of two operands (i.e. the multiplication with an element's inverse value). Inherited Members IMultiplicable<T>.IsAssociative IMultiplicable<T>.IsCommutative IMultiplicable<T>.Multiply(T) Namespace : BRIDGES.Algebra.Fundamentals Assembly : BRIDGES.dll Syntax public interface IDivisible<T> : IMultiplicable<T> where T : IDivisible<T> Type Parameters Name Description T Type of the elements in the multiplicative set. Remarks The existence of an inverse is assumed but not its unicity. The left and right inverse can differ from one another. Methods | Improve this Doc View Source Divide(T) Computes the division of the current element with another element on the right. Declaration T Divide(T right) Parameters Type Name Description T right Element to divide with on the right. Returns Type Description T The new element resulting from the division."
  },
  "api/BRIDGES.Algebra.Fundamentals.IMultiplicable-1.html": {
    "href": "api/BRIDGES.Algebra.Fundamentals.IMultiplicable-1.html",
    "title": "Interface IMultiplicable<T> | BRIDGES Documentation",
    "keywords": "Interface IMultiplicable<T> Interface defining a method for the multiplication of two operands (i.e. an internal binary operation). Namespace : BRIDGES.Algebra.Fundamentals Assembly : BRIDGES.dll Syntax public interface IMultiplicable<T> where T : IMultiplicable<T> Type Parameters Name Description T Type of the elements in the multiplicative set. Properties | Improve this Doc View Source IsAssociative Evaluates whether the multiplication is associative : a * (b * c) = (a * b) * c. Declaration bool IsAssociative { get; } Property Value Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IsCommutative Evaluates whether the multiplication is commutative : a * b = b * a. Declaration bool IsCommutative { get; } Property Value Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. Methods | Improve this Doc View Source Multiply(T) Computes the multiplication of the current element with another element on the right. Declaration T Multiply(T right) Parameters Type Name Description T right Element to multiply with on the right. Returns Type Description T The new element resulting from the multiplication."
  },
  "api/BRIDGES.Algebra.Fundamentals.IOneable-1.html": {
    "href": "api/BRIDGES.Algebra.Fundamentals.IOneable-1.html",
    "title": "Interface IOneable<T> | BRIDGES Documentation",
    "keywords": "Interface IOneable<T> Interface defining a method returning the neutral element of the multiplication. Inherited Members IMultiplicable<T>.IsAssociative IMultiplicable<T>.IsCommutative IMultiplicable<T>.Multiply(T) Namespace : BRIDGES.Algebra.Fundamentals Assembly : BRIDGES.dll Syntax public interface IOneable<T> : IMultiplicable<T> where T : IOneable<T> Type Parameters Name Description T Type of the elements in the multiplicative set. Methods | Improve this Doc View Source One() Returns the neutral element of the multiplication. Declaration T One() Returns Type Description T The neutral element of the multiplication."
  },
  "api/BRIDGES.Algebra.Fundamentals.ISubtractable-1.html": {
    "href": "api/BRIDGES.Algebra.Fundamentals.ISubtractable-1.html",
    "title": "Interface ISubtractable<T> | BRIDGES Documentation",
    "keywords": "Interface ISubtractable<T> Interface defining a method for the subtraction of two operands (i.e. the addition with an element's opposite value). Namespace : BRIDGES.Algebra.Fundamentals Assembly : BRIDGES.dll Syntax public interface ISubtractable<T> where T : ISubtractable<T> Type Parameters Name Description T Type of the elements of the additive set. Remarks The existence of an opposite is assumed but not its unicity. The left and right opposite can differ from one another. Methods | Improve this Doc View Source Subtract(T) Computes the subtraction of the current element with another element on the right. Declaration T Subtract(T right) Parameters Type Name Description T right Element to subtract with on the right. Returns Type Description T The new element resulting from the subtraction."
  },
  "api/BRIDGES.Algebra.Fundamentals.IZeroable-1.html": {
    "href": "api/BRIDGES.Algebra.Fundamentals.IZeroable-1.html",
    "title": "Interface IZeroable<T> | BRIDGES Documentation",
    "keywords": "Interface IZeroable<T> Interface defining a method returning the neutral element of the addition. Namespace : BRIDGES.Algebra.Fundamentals Assembly : BRIDGES.dll Syntax public interface IZeroable<T> where T : IZeroable<T> Type Parameters Name Description T Type of the elements of the additive set. Methods | Improve this Doc View Source Zero() Returns the neutral element of the addition. Declaration T Zero() Returns Type Description T The neutral element of the addition."
  },
  "api/BRIDGES.Algebra.Measure.html": {
    "href": "api/BRIDGES.Algebra.Measure.html",
    "title": "Namespace BRIDGES.Algebra.Measure | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Algebra.Measure Interfaces IDotProduct<TValue, T> Interface defining a method computing the dot product of two elements. IMetric<T> Interface defining a method computing the distance between two elements. INorm<T> Interface defining a method to compute the norm of an element."
  },
  "api/BRIDGES.Algebra.Measure.IDotProduct-2.html": {
    "href": "api/BRIDGES.Algebra.Measure.IDotProduct-2.html",
    "title": "Interface IDotProduct<TValue, T> | BRIDGES Documentation",
    "keywords": "Interface IDotProduct<TValue, T> Interface defining a method computing the dot product of two elements. Inherited Members INorm<T>.Norm() INorm<T>.Unitise() IMetric<T>.DistanceTo(T) Namespace : BRIDGES.Algebra.Measure Assembly : BRIDGES.dll Syntax public interface IDotProduct<TValue, T> : INorm<T>, IMetric<T> Type Parameters Name Description TValue Type of the elements in the field. T Type of the elements in the pre-hilbertian set. Methods | Improve this Doc View Source AngleWith(T) Computes the angle between the current element and another element. Declaration double AngleWith(T other) Parameters Type Name Description T other Element to compare with. Returns Type Description System.Double The value of the angle (in radians). | Improve this Doc View Source DotProduct(T) Computes the dot product of the current element with another element. Declaration TValue DotProduct(T operand) Parameters Type Name Description T operand Right element of the dot product. Returns Type Description TValue The value of the dot product of the two elements."
  },
  "api/BRIDGES.Algebra.Measure.IMetric-1.html": {
    "href": "api/BRIDGES.Algebra.Measure.IMetric-1.html",
    "title": "Interface IMetric<T> | BRIDGES Documentation",
    "keywords": "Interface IMetric<T> Interface defining a method computing the distance between two elements. Namespace : BRIDGES.Algebra.Measure Assembly : BRIDGES.dll Syntax public interface IMetric<T> Type Parameters Name Description T Type of the elements in the metric set. Methods | Improve this Doc View Source DistanceTo(T) Computes the distance of the current element to another element. Declaration double DistanceTo(T other) Parameters Type Name Description T other Element to evaluate the distance to. Returns Type Description System.Double The value of the distance between the two elements."
  },
  "api/BRIDGES.Algebra.Measure.INorm-1.html": {
    "href": "api/BRIDGES.Algebra.Measure.INorm-1.html",
    "title": "Interface INorm<T> | BRIDGES Documentation",
    "keywords": "Interface INorm<T> Interface defining a method to compute the norm of an element. Inherited Members IMetric<T>.DistanceTo(T) Namespace : BRIDGES.Algebra.Measure Assembly : BRIDGES.dll Syntax public interface INorm<T> : IMetric<T> Type Parameters Name Description T Type of the elements in the normed set. Methods | Improve this Doc View Source Norm() Computes the norm the current T . Declaration double Norm() Returns Type Description System.Double The value of the norm. | Improve this Doc View Source Unitise() Unitises the current T . Declaration void Unitise()"
  },
  "api/BRIDGES.Algebra.Sets.Additive.html": {
    "href": "api/BRIDGES.Algebra.Sets.Additive.html",
    "title": "Namespace BRIDGES.Algebra.Sets.Additive | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Algebra.Sets.Additive Interfaces IAbelianGroup<T> Interface defining methods to manipulate elements in an additive abelian group. IGroup<T> Interface defining methods to manipulate elements in an additive group. ILoop<T> Interface defining methods to manipulate elements in an additive loop. IMagma<T> Interface defining methods to manipulate elements in an additive magma. IMonoid<T> Interface defining methods to manipulate elements in an additive monoid. IQuasiGroup<T> Interface defining methods to manipulate elements in an additive quasi-group. ISemiGroup<T> Interface defining methods to manipulate elements in an additive semi-group."
  },
  "api/BRIDGES.Algebra.Sets.Additive.IAbelianGroup-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Additive.IAbelianGroup-1.html",
    "title": "Interface IAbelianGroup<T> | BRIDGES Documentation",
    "keywords": "Interface IAbelianGroup<T> Interface defining methods to manipulate elements in an additive abelian group. Inherited Members IGroup<T>.Opposite() IAddable<T>.IsAssociative IAddable<T>.IsCommutative IAddable<T>.Add(T) ISubtractable<T>.Subtract(T) IZeroable<T>.Zero() Namespace : BRIDGES.Algebra.Sets.Additive Assembly : BRIDGES.dll Syntax public interface IAbelianGroup<T> : IGroup<T>, IMonoid<T>, ISemiGroup<T>, ILoop<T>, IQuasiGroup<T>, IMagma<T>, IAddable<T>, ISubtractable<T>, IZeroable<T> where T : IAbelianGroup<T> Type Parameters Name Description T Type of the elements in the additive abelian group."
  },
  "api/BRIDGES.Algebra.Sets.Additive.IGroup-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Additive.IGroup-1.html",
    "title": "Interface IGroup<T> | BRIDGES Documentation",
    "keywords": "Interface IGroup<T> Interface defining methods to manipulate elements in an additive group. Inherited Members IAddable<T>.IsAssociative IAddable<T>.IsCommutative IAddable<T>.Add(T) ISubtractable<T>.Subtract(T) IZeroable<T>.Zero() Namespace : BRIDGES.Algebra.Sets.Additive Assembly : BRIDGES.dll Syntax public interface IGroup<T> : IMonoid<T>, ISemiGroup<T>, ILoop<T>, IQuasiGroup<T>, IMagma<T>, IAddable<T>, ISubtractable<T>, IZeroable<T> where T : IGroup<T> Type Parameters Name Description T Type of the elements in the additive group. Methods | Improve this Doc View Source Opposite() Replaces the current element with its opposite. Declaration bool Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise."
  },
  "api/BRIDGES.Algebra.Sets.Additive.ILoop-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Additive.ILoop-1.html",
    "title": "Interface ILoop<T> | BRIDGES Documentation",
    "keywords": "Interface ILoop<T> Interface defining methods to manipulate elements in an additive loop. Inherited Members IAddable<T>.IsAssociative IAddable<T>.IsCommutative IAddable<T>.Add(T) ISubtractable<T>.Subtract(T) IZeroable<T>.Zero() Namespace : BRIDGES.Algebra.Sets.Additive Assembly : BRIDGES.dll Syntax public interface ILoop<T> : IQuasiGroup<T>, IMagma<T>, IAddable<T>, ISubtractable<T>, IZeroable<T> where T : ILoop<T> Type Parameters Name Description T Type of the elements in the additive loop."
  },
  "api/BRIDGES.Algebra.Sets.Additive.IMagma-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Additive.IMagma-1.html",
    "title": "Interface IMagma<T> | BRIDGES Documentation",
    "keywords": "Interface IMagma<T> Interface defining methods to manipulate elements in an additive magma. Inherited Members IAddable<T>.IsAssociative IAddable<T>.IsCommutative IAddable<T>.Add(T) Namespace : BRIDGES.Algebra.Sets.Additive Assembly : BRIDGES.dll Syntax public interface IMagma<T> : IAddable<T> where T : IMagma<T> Type Parameters Name Description T Type of the elements in the additive magma."
  },
  "api/BRIDGES.Algebra.Sets.Additive.IMonoid-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Additive.IMonoid-1.html",
    "title": "Interface IMonoid<T> | BRIDGES Documentation",
    "keywords": "Interface IMonoid<T> Interface defining methods to manipulate elements in an additive monoid. Inherited Members IAddable<T>.IsAssociative IAddable<T>.IsCommutative IAddable<T>.Add(T) IZeroable<T>.Zero() Namespace : BRIDGES.Algebra.Sets.Additive Assembly : BRIDGES.dll Syntax public interface IMonoid<T> : ISemiGroup<T>, IMagma<T>, IAddable<T>, IZeroable<T> where T : IMonoid<T> Type Parameters Name Description T Type of the elements in the additive monoid."
  },
  "api/BRIDGES.Algebra.Sets.Additive.IQuasiGroup-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Additive.IQuasiGroup-1.html",
    "title": "Interface IQuasiGroup<T> | BRIDGES Documentation",
    "keywords": "Interface IQuasiGroup<T> Interface defining methods to manipulate elements in an additive quasi-group. Inherited Members IAddable<T>.IsAssociative IAddable<T>.IsCommutative IAddable<T>.Add(T) ISubtractable<T>.Subtract(T) Namespace : BRIDGES.Algebra.Sets.Additive Assembly : BRIDGES.dll Syntax public interface IQuasiGroup<T> : IMagma<T>, IAddable<T>, ISubtractable<T> where T : IQuasiGroup<T> Type Parameters Name Description T Type of the elements in the additive quasi-group."
  },
  "api/BRIDGES.Algebra.Sets.Additive.ISemiGroup-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Additive.ISemiGroup-1.html",
    "title": "Interface ISemiGroup<T> | BRIDGES Documentation",
    "keywords": "Interface ISemiGroup<T> Interface defining methods to manipulate elements in an additive semi-group. Inherited Members IAddable<T>.IsAssociative IAddable<T>.IsCommutative IAddable<T>.Add(T) Namespace : BRIDGES.Algebra.Sets.Additive Assembly : BRIDGES.dll Syntax public interface ISemiGroup<T> : IMagma<T>, IAddable<T> where T : ISemiGroup<T> Type Parameters Name Description T Type of the elements in the additive semi-group."
  },
  "api/BRIDGES.Algebra.Sets.html": {
    "href": "api/BRIDGES.Algebra.Sets.html",
    "title": "Namespace BRIDGES.Algebra.Sets | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Algebra.Sets Interfaces IGroupAction<TValue, T> Interface defining methods to multiply or divide an element with a scalar."
  },
  "api/BRIDGES.Algebra.Sets.IGroupAction-2.html": {
    "href": "api/BRIDGES.Algebra.Sets.IGroupAction-2.html",
    "title": "Interface IGroupAction<TValue, T> | BRIDGES Documentation",
    "keywords": "Interface IGroupAction<TValue, T> Interface defining methods to multiply or divide an element with a scalar. Namespace : BRIDGES.Algebra.Sets Assembly : BRIDGES.dll Syntax public interface IGroupAction<TValue, T> Type Parameters Name Description TValue Type of the scalar in the field. T Type of the elements in the vector space. Methods | Improve this Doc View Source Divide(TValue) Computes the right scalar division of the current element. Declaration T Divide(TValue divisor) Parameters Type Name Description TValue divisor The scalar to divide with on the right. Returns Type Description T The new element resulting from the scalar dividion. | Improve this Doc View Source Multiply(TValue) Computes the right scalar multiplication of the current element. Declaration T Multiply(TValue factor) Parameters Type Name Description TValue factor The scalar to multiply with on the right. Returns Type Description T The new element resulting from the scalar multiplication."
  },
  "api/BRIDGES.Algebra.Sets.Multiplicative.html": {
    "href": "api/BRIDGES.Algebra.Sets.Multiplicative.html",
    "title": "Namespace BRIDGES.Algebra.Sets.Multiplicative | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Algebra.Sets.Multiplicative Interfaces IAbelianGroup<T> Interface defining methods to manipulate elements in a multiplicative abelian group. IGroup<T> Interface defining methods to manipulate elements in a multiplicative group. ILoop<T> Interface defining methods to manipulate elements in a multiplicative loop. IMagma<T> Interface defining methods to manipulate elements in a multiplicative magma. IMonoid<T> Interface defining methods to manipulate elements in a multiplicative monoid. IQuasiGroup<T> Interface defining methods to manipulate elements in a multiplicative quasi-group. ISemiGroup<T> Interface defining methods to manipulate elements in a multiplicative semi-group."
  },
  "api/BRIDGES.Algebra.Sets.Multiplicative.IAbelianGroup-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Multiplicative.IAbelianGroup-1.html",
    "title": "Interface IAbelianGroup<T> | BRIDGES Documentation",
    "keywords": "Interface IAbelianGroup<T> Interface defining methods to manipulate elements in a multiplicative abelian group. Inherited Members IGroup<T>.Inverse() IDivisible<T>.Divide(T) IOneable<T>.One() IMultiplicable<T>.IsAssociative IMultiplicable<T>.IsCommutative IMultiplicable<T>.Multiply(T) Namespace : BRIDGES.Algebra.Sets.Multiplicative Assembly : BRIDGES.dll Syntax public interface IAbelianGroup<T> : IGroup<T>, IMonoid<T>, ISemiGroup<T>, ILoop<T>, IQuasiGroup<T>, IMagma<T>, IDivisible<T>, IOneable<T>, IMultiplicable<T> where T : IAbelianGroup<T> Type Parameters Name Description T Type of the elements in the multiplicative multiplicative group."
  },
  "api/BRIDGES.Algebra.Sets.Multiplicative.IGroup-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Multiplicative.IGroup-1.html",
    "title": "Interface IGroup<T> | BRIDGES Documentation",
    "keywords": "Interface IGroup<T> Interface defining methods to manipulate elements in a multiplicative group. Inherited Members IDivisible<T>.Divide(T) IOneable<T>.One() IMultiplicable<T>.IsAssociative IMultiplicable<T>.IsCommutative IMultiplicable<T>.Multiply(T) Namespace : BRIDGES.Algebra.Sets.Multiplicative Assembly : BRIDGES.dll Syntax public interface IGroup<T> : IMonoid<T>, ISemiGroup<T>, ILoop<T>, IQuasiGroup<T>, IMagma<T>, IDivisible<T>, IOneable<T>, IMultiplicable<T> where T : IGroup<T> Type Parameters Name Description T Type of the elements in the multiplicative group. Methods | Improve this Doc View Source Inverse() Replaces the current element with its inverse. Declaration bool Inverse() Returns Type Description System.Boolean true if the current element was inversed, false otherwise."
  },
  "api/BRIDGES.Algebra.Sets.Multiplicative.ILoop-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Multiplicative.ILoop-1.html",
    "title": "Interface ILoop<T> | BRIDGES Documentation",
    "keywords": "Interface ILoop<T> Interface defining methods to manipulate elements in a multiplicative loop. Inherited Members IDivisible<T>.Divide(T) IOneable<T>.One() IMultiplicable<T>.IsAssociative IMultiplicable<T>.IsCommutative IMultiplicable<T>.Multiply(T) Namespace : BRIDGES.Algebra.Sets.Multiplicative Assembly : BRIDGES.dll Syntax public interface ILoop<T> : IQuasiGroup<T>, IMagma<T>, IDivisible<T>, IOneable<T>, IMultiplicable<T> where T : ILoop<T> Type Parameters Name Description T Type of the elements in the multiplicative loop."
  },
  "api/BRIDGES.Algebra.Sets.Multiplicative.IMagma-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Multiplicative.IMagma-1.html",
    "title": "Interface IMagma<T> | BRIDGES Documentation",
    "keywords": "Interface IMagma<T> Interface defining methods to manipulate elements in a multiplicative magma. Inherited Members IMultiplicable<T>.IsAssociative IMultiplicable<T>.IsCommutative IMultiplicable<T>.Multiply(T) Namespace : BRIDGES.Algebra.Sets.Multiplicative Assembly : BRIDGES.dll Syntax public interface IMagma<T> : IMultiplicable<T> where T : IMagma<T> Type Parameters Name Description T Type of the elements in the multiplicative magma."
  },
  "api/BRIDGES.Algebra.Sets.Multiplicative.IMonoid-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Multiplicative.IMonoid-1.html",
    "title": "Interface IMonoid<T> | BRIDGES Documentation",
    "keywords": "Interface IMonoid<T> Interface defining methods to manipulate elements in a multiplicative monoid. Inherited Members IOneable<T>.One() IMultiplicable<T>.IsAssociative IMultiplicable<T>.IsCommutative IMultiplicable<T>.Multiply(T) Namespace : BRIDGES.Algebra.Sets.Multiplicative Assembly : BRIDGES.dll Syntax public interface IMonoid<T> : ISemiGroup<T>, IMagma<T>, IOneable<T>, IMultiplicable<T> where T : IMonoid<T> Type Parameters Name Description T Type of the elements in the multiplicative monoid."
  },
  "api/BRIDGES.Algebra.Sets.Multiplicative.IQuasiGroup-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Multiplicative.IQuasiGroup-1.html",
    "title": "Interface IQuasiGroup<T> | BRIDGES Documentation",
    "keywords": "Interface IQuasiGroup<T> Interface defining methods to manipulate elements in a multiplicative quasi-group. Inherited Members IDivisible<T>.Divide(T) IMultiplicable<T>.IsAssociative IMultiplicable<T>.IsCommutative IMultiplicable<T>.Multiply(T) Namespace : BRIDGES.Algebra.Sets.Multiplicative Assembly : BRIDGES.dll Syntax public interface IQuasiGroup<T> : IMagma<T>, IDivisible<T>, IMultiplicable<T> where T : IQuasiGroup<T> Type Parameters Name Description T Type of the elements in the multiplicative quasi-group."
  },
  "api/BRIDGES.Algebra.Sets.Multiplicative.ISemiGroup-1.html": {
    "href": "api/BRIDGES.Algebra.Sets.Multiplicative.ISemiGroup-1.html",
    "title": "Interface ISemiGroup<T> | BRIDGES Documentation",
    "keywords": "Interface ISemiGroup<T> Interface defining methods to manipulate elements in a multiplicative semi-group. Inherited Members IMultiplicable<T>.IsAssociative IMultiplicable<T>.IsCommutative IMultiplicable<T>.Multiply(T) Namespace : BRIDGES.Algebra.Sets.Multiplicative Assembly : BRIDGES.dll Syntax public interface ISemiGroup<T> : IMagma<T>, IMultiplicable<T> where T : ISemiGroup<T> Type Parameters Name Description T Type of the elements in the multiplicative semi-group."
  },
  "api/BRIDGES.Arithmetic.Numbers.Complex.html": {
    "href": "api/BRIDGES.Arithmetic.Numbers.Complex.html",
    "title": "Struct Complex | BRIDGES Documentation",
    "keywords": "Struct Complex Structure defining a complex number. Implements IAbelianGroup < Complex > IGroup < Complex > IMonoid < Complex > ISemiGroup < Complex > ILoop < Complex > IQuasiGroup < Complex > IMagma < Complex > IAddable < Complex > ISubtractable < Complex > IZeroable < Complex > IAbelianGroup < Complex > IGroup < Complex > IMonoid < Complex > ISemiGroup < Complex > ILoop < Complex > IQuasiGroup < Complex > IMagma < Complex > IDivisible < Complex > IOneable < Complex > IMultiplicable < Complex > IGroupAction < System.Double , Complex > IEquatable < Complex > Namespace : BRIDGES.Arithmetic.Numbers Assembly : BRIDGES.dll Syntax public struct Complex : IAbelianGroup<Complex>, IGroup<Complex>, IMonoid<Complex>, ISemiGroup<Complex>, ILoop<Complex>, IQuasiGroup<Complex>, IMagma<Complex>, IAddable<Complex>, ISubtractable<Complex>, IZeroable<Complex>, IAbelianGroup<Complex>, IGroup<Complex>, IMonoid<Complex>, ISemiGroup<Complex>, ILoop<Complex>, IQuasiGroup<Complex>, IMagma<Complex>, IDivisible<Complex>, IOneable<Complex>, IMultiplicable<Complex>, IGroupAction<double, Complex> Constructors | Improve this Doc View Source Complex(Complex) Initialises a new instance of Complex structure from another Complex numbers. Declaration public Complex(Complex complex) Parameters Type Name Description Complex complex Complex number to copy. | Improve this Doc View Source Complex(Double, Double) Initialises a new instance of Complex structure by defining it real and imaginary components. Declaration public Complex(double real, double imaginary) Parameters Type Name Description System.Double real Value of the real component. System.Double imaginary Value of the imaginary component. Properties | Improve this Doc View Source Argument Gets the argument of the current Complex . Declaration public readonly double Argument { get; } Property Value Type Description System.Double | Improve this Doc View Source ImaginaryOne Gets a new instance of the Complex structure equal to the unit imaginary element. It corresponds to the Complex with a real number equal to zero and an imaginary number equal to one : (0.0, 1.0). Declaration public static readonly Complex ImaginaryOne { get; } Property Value Type Description Complex The new Complex number equal to imaginary one. | Improve this Doc View Source ImaginaryPart Gets the imaginary component of the current Complex number. Declaration public double ImaginaryPart { get; } Property Value Type Description System.Double | Improve this Doc View Source Modulus Gets the modulus of the current Complex number. Declaration public readonly double Modulus { get; } Property Value Type Description System.Double | Improve this Doc View Source One Gets a new instance of the Complex structure equal to the multiplicative neutral element. It corresponds to the Complex with a real number equal to one and an imaginary number equal to zero : (1.0, 0.0). Declaration public static readonly Complex One { get; } Property Value Type Description Complex The new Complex number equal to one. | Improve this Doc View Source RealPart Gets the real component of the current Complex number. Declaration public double RealPart { get; } Property Value Type Description System.Double | Improve this Doc View Source Zero Gets a new instance of the Complex structure equal to the additive neutral element. It corresponds to the Complex with a real number equal to zero and an imaginary number equal to zero : (0.0, 0.0). Declaration public static readonly Complex Zero { get; } Property Value Type Description Complex The new Complex number equal to zero. Methods | Improve this Doc View Source Add(Complex, Complex) Computes the addition of two Complex numbers. Declaration public static Complex Add(Complex complexA, Complex complexB) Parameters Type Name Description Complex complexA Complex number for the addition. Complex complexB Complex number for the addition. Returns Type Description Complex The new Complex number resulting from the addition. | Improve this Doc View Source Add(Complex, Real) Computes the addition of a Complex number with a Real number. Declaration public static Complex Add(Complex complex, Real real) Parameters Type Name Description Complex complex Complex number for the addition. Real real Real number for the addition. Returns Type Description Complex The new Complex number resulting from the addition. | Improve this Doc View Source Add(Real, Complex) Computes the addition of a Real number with a Complex number. Declaration public static Complex Add(Real real, Complex complex) Parameters Type Name Description Real real Real number for the addition. Complex complex Complex number for the addition. Returns Type Description Complex The new Complex number resulting from the addition. | Improve this Doc View Source Conjugate() Computes the conjugate of the current Complex number. Declaration public bool Conjugate() Returns Type Description System.Boolean true if the current Complex number was conjugated, false otherwise. | Improve this Doc View Source Conjugate(Complex) Gets the conjugate value of a Complex number. Declaration public static Complex Conjugate(Complex complex) Parameters Type Name Description Complex complex Complex number to conjugate. Returns Type Description Complex The new Complex number, conjugate of the initial one. | Improve this Doc View Source Divide(Complex, Complex) Computes the division of two Complex numbers. Declaration public static Complex Divide(Complex complexA, Complex complexB) Parameters Type Name Description Complex complexA Complex number to divide. Complex complexB Complex number to divide with. Returns Type Description Complex The new Complex number resulting from the division. | Improve this Doc View Source Divide(Complex, Real) Computes the division of a Complex number with a Real number. Declaration public static Complex Divide(Complex complex, Real real) Parameters Type Name Description Complex complex Complex number to divide. Real real Real number to divide with. Returns Type Description Complex The new Complex number resulting from the division. | Improve this Doc View Source Divide(Complex, Double) Computes the scalar division of a Complex number with a -precision real number. Declaration public static Complex Divide(Complex complex, double divisor) Parameters Type Name Description Complex complex Complex number to divide. System.Double divisor -precision real number to divide with. Returns Type Description Complex The new Complex number resulting from the scalar division. | Improve this Doc View Source Divide(Real, Complex) Computes the division of a Real number with a Complex number. Declaration public static Complex Divide(Real real, Complex complex) Parameters Type Name Description Real real Real number to divide. Complex complex Complex number to divide with. Returns Type Description Complex The new Complex number resulting from the division. | Improve this Doc View Source Equals(Complex) Declaration public bool Equals(Complex other) Parameters Type Name Description Complex other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source FromPolarCoordinates(Double, Double) Gets a new Complex number by defining its polar coordinates. Declaration public static Complex FromPolarCoordinates(double modulus, double argument) Parameters Type Name Description System.Double modulus Value of the modulus. System.Double argument Value of the argument (in radians). Returns Type Description Complex The new Complex number with the given polar coordinates. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Inverse() Computes the inverse of the current Complex number. Declaration public bool Inverse() Returns Type Description System.Boolean true if the current Complex number was inversed, false otherwise. | Improve this Doc View Source Inverse(Complex) Computes the inverse of the given Complex number. Declaration public static Complex Inverse(Complex complex) Parameters Type Name Description Complex complex Complex to be inversed. Returns Type Description Complex The new Complex number, inverse of the initial one. | Improve this Doc View Source Multiply(Complex, Complex) Computes the multiplication of two Complex numbers. Declaration public static Complex Multiply(Complex complexA, Complex complexB) Parameters Type Name Description Complex complexA Complex number for the multiplication. Complex complexB Complex number for the multiplication. Returns Type Description Complex The new Complex number resulting from the multiplication. | Improve this Doc View Source Multiply(Complex, Real) Computes the multiplication of a Complex number with a Real number. Declaration public static Complex Multiply(Complex complex, Real real) Parameters Type Name Description Complex complex Complex number for the multiplicaion. Real real Real number for the multiplicaion. Returns Type Description Complex The new Complex number resulting from the multiplication. | Improve this Doc View Source Multiply(Real, Complex) Computes the multiplication of a Real number with a Complex number. Declaration public static Complex Multiply(Real real, Complex complex) Parameters Type Name Description Real real Real number for the multiplicaion. Complex complex Complex number for the multiplicaion. Returns Type Description Complex The new Complex number resulting from the multiplication. | Improve this Doc View Source Multiply(Double, Complex) Computes the scalar multiplication of a Complex number with a -precision real number. Declaration public static Complex Multiply(double factor, Complex complex) Parameters Type Name Description System.Double factor -precision real number. Complex complex Complex number to multiply. Returns Type Description Complex The new Complex number resulting from the scalar multiplication. | Improve this Doc View Source Norm() Computes the norm of the current Complex number. Declaration public double Norm() Returns Type Description System.Double The value of the norm. | Improve this Doc View Source Opposite() Computes the opposite of the current Complex number. Declaration public bool Opposite() Returns Type Description System.Boolean true if the current Complex number was opposed, false otherwise. | Improve this Doc View Source Opposite(Complex) Computes the opposite of the given Complex number. Declaration public static Complex Opposite(Complex complex) Parameters Type Name Description Complex complex Complex number to be opposed. Returns Type Description Complex The new Complex number, opposite of the initial one. | Improve this Doc View Source Subtract(Complex, Complex) Computes the subtraction of two Complex numbers. Declaration public static Complex Subtract(Complex complexA, Complex complexB) Parameters Type Name Description Complex complexA Complex number to subtract. Complex complexB Complex number to subtract with. Returns Type Description Complex The new Complex number resulting from the subtraction. | Improve this Doc View Source Subtract(Complex, Real) Computes the subtraction of a Complex number with a Real number. Declaration public static Complex Subtract(Complex complex, Real real) Parameters Type Name Description Complex complex Complex number to subtract. Real real Real number to subtract with. Returns Type Description Complex The new Complex number resulting from the subtraction. | Improve this Doc View Source Subtract(Real, Complex) Computes the subtraction of a Real number with a Complex number. Declaration public static Complex Subtract(Real real, Complex complex) Parameters Type Name Description Real real Real number to subtract. Complex complex Complex number to subtract with. Returns Type Description Complex The new Complex number resulting from the subtraction. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Addition(Complex, Complex) Computes the addition of two Complex numbers. Declaration public static Complex operator +(Complex complexA, Complex complexB) Parameters Type Name Description Complex complexA Complex number for the addition. Complex complexB Complex number for the addition. Returns Type Description Complex The new Complex number resulting from the addition. | Improve this Doc View Source Addition(Complex, Real) Computes the addition of a Complex number with a Real number. Declaration public static Complex operator +(Complex complex, Real real) Parameters Type Name Description Complex complex Complex number for the addition. Real real Real number for the addition. Returns Type Description Complex The new Complex number resulting from the addition. | Improve this Doc View Source Addition(Complex, Double) Computes the addition of a Complex number with a -precision real number. Declaration public static Complex operator +(Complex complex, double number) Parameters Type Name Description Complex complex Complex number for the addition. System.Double number -precision real number for the addition. Returns Type Description Complex The new Complex number resulting from the addition. | Improve this Doc View Source Addition(Real, Complex) Computes the addition of a Real number with a Complex number. Declaration public static Complex operator +(Real real, Complex complex) Parameters Type Name Description Real real Real number for the addition. Complex complex Complex number for the addition. Returns Type Description Complex The new Complex number resulting from the addition. | Improve this Doc View Source Addition(Double, Complex) Computes the addition of a -precision real number with a Complex number. Declaration public static Complex operator +(double number, Complex complex) Parameters Type Name Description System.Double number -precision real number for the addition. Complex complex Complex number for the addition. Returns Type Description Complex The new Complex number resulting from the addition. | Improve this Doc View Source Division(Complex, Complex) Computes the division of two Complex numbers. Declaration public static Complex operator /(Complex complexA, Complex complexB) Parameters Type Name Description Complex complexA Complex number to divide. Complex complexB Complex number to divide with. Returns Type Description Complex The new Complex number resulting from the division. | Improve this Doc View Source Division(Complex, Real) Computes the division of a Complex number with a Real number. Declaration public static Complex operator /(Complex complex, Real real) Parameters Type Name Description Complex complex Complex number to divide. Real real Real number to divide with. Returns Type Description Complex The new Complex number resulting from the division. | Improve this Doc View Source Division(Complex, Double) Computes the division of a Complex number with a -precision real number. Declaration public static Complex operator /(Complex complex, double number) Parameters Type Name Description Complex complex Complex number to divide. System.Double number -precision real number to divide with. Returns Type Description Complex The new Complex number resulting from the division. | Improve this Doc View Source Division(Real, Complex) Computes the division of a Real number with a Complex number. Declaration public static Complex operator /(Real real, Complex complex) Parameters Type Name Description Real real Real number to divide. Complex complex Complex number to divide with. Returns Type Description Complex The new Complex number resulting from the division. | Improve this Doc View Source Division(Double, Complex) Computes the division of a -precision real number with a Complex number. Declaration public static Complex operator /(double number, Complex complex) Parameters Type Name Description System.Double number -precision real number to divide. Complex complex Complex number to divide with. Returns Type Description Complex The new Complex number resulting from the division. | Improve this Doc View Source Explicit(Real to Complex) Casts a Real number into a Complex number. Declaration public static explicit operator Complex(Real real) Parameters Type Name Description Real real Real number to cast. Returns Type Description Complex The new Complex number resulting from the cast. | Improve this Doc View Source Explicit(Double to Complex) Casts a -precision real number into a Complex number. Declaration public static explicit operator Complex(double number) Parameters Type Name Description System.Double number -precision real number to cast. Returns Type Description Complex The new Complex number resulting from the cast. | Improve this Doc View Source Explicit(ValueTuple<Double, Double> to Complex) Casts a into a Complex number. Declaration public static explicit operator Complex(ValueTuple<double, double> pair) Parameters Type Name Description ValueTuple < System.Double , System.Double > pair to cast. Returns Type Description Complex The new Complex number resulting from the cast. | Improve this Doc View Source Multiply(Complex, Complex) Computes the multiplication of two Complex numbers. Declaration public static Complex operator *(Complex complexA, Complex complexB) Parameters Type Name Description Complex complexA Complex number for the multiplication. Complex complexB Complex number for the multiplication. Returns Type Description Complex The new Complex number resulting from the multiplication. | Improve this Doc View Source Multiply(Complex, Real) Computes the multiplication of a Complex number with a Real number. Declaration public static Complex operator *(Complex complex, Real real) Parameters Type Name Description Complex complex Complex number for the multiplicaion. Real real Real number for the multiplicaion. Returns Type Description Complex The new Complex number resulting from the multiplication. | Improve this Doc View Source Multiply(Complex, Double) Computes the multiplication of a Complex number with a -precision real number. Declaration public static Complex operator *(Complex complex, double number) Parameters Type Name Description Complex complex Complex number for the multiplicaion. System.Double number -precision real number for the multiplicaion. Returns Type Description Complex The new Complex number resulting from the multiplication. | Improve this Doc View Source Multiply(Real, Complex) Computes the multiplication of a Real number with a Complex number. Declaration public static Complex operator *(Real real, Complex complex) Parameters Type Name Description Real real Real number for the multiplicaion. Complex complex Complex number for the multiplicaion. Returns Type Description Complex The new Complex number resulting from the multiplication. | Improve this Doc View Source Multiply(Double, Complex) Computes the multiplication of a -precision real number with a Complex number. Declaration public static Complex operator *(double number, Complex complex) Parameters Type Name Description System.Double number -precision real number for the multiplicaion. Complex complex Complex number for the multiplicaion. Returns Type Description Complex The new Complex number resulting from the multiplication. | Improve this Doc View Source Subtraction(Complex, Complex) Computes the subtraction of two Complex numbers. Declaration public static Complex operator -(Complex complexA, Complex complexB) Parameters Type Name Description Complex complexA Complex number to subtract. Complex complexB Complex number to subtract with. Returns Type Description Complex The new Complex number resulting from the subtraction. | Improve this Doc View Source Subtraction(Complex, Real) Computes the subtraction of a Complex number with a Real number. Declaration public static Complex operator -(Complex complex, Real real) Parameters Type Name Description Complex complex Complex number to subtract. Real real Real number to subtract with. Returns Type Description Complex The new Complex number resulting from the subtraction. | Improve this Doc View Source Subtraction(Complex, Double) Computes the subtraction of a Complex number with a -precision real number. Declaration public static Complex operator -(Complex complex, double number) Parameters Type Name Description Complex complex Complex number to subtract. System.Double number -precision real number to subtract with. Returns Type Description Complex The new Complex number resulting from the subtraction. | Improve this Doc View Source Subtraction(Real, Complex) Computes the subtraction of a Real number with a Complex number. Declaration public static Complex operator -(Real real, Complex complex) Parameters Type Name Description Real real Real number to subtract. Complex complex Complex number to subtract with. Returns Type Description Complex The new Complex number resulting from the subtraction. | Improve this Doc View Source Subtraction(Double, Complex) Computes the subtraction of a -precision real number with a Complex number. Declaration public static Complex operator -(double number, Complex complex) Parameters Type Name Description System.Double number -precision real number to subtract. Complex complex Complex number to subtract with. Returns Type Description Complex The new Complex number resulting from the subtraction. | Improve this Doc View Source UnaryNegation(Complex) Computes the opposite of the given Complex number. Declaration public static Complex operator -(Complex complex) Parameters Type Name Description Complex complex Complex number to be opposed. Returns Type Description Complex The new Complex number, opposite of the initial one. Explicit Interface Implementations | Improve this Doc View Source IAddable<Complex>.Add(Complex) Computes the addition of the current element with another element on the right. Declaration Complex IAddable<Complex>.Add(Complex other) Parameters Type Name Description Complex other Returns Type Description Complex The new element resulting from the addition. | Improve this Doc View Source IAddable<Complex>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration readonly bool IAddable<Complex>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<Complex>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration readonly bool IAddable<Complex>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IDivisible<Complex>.Divide(Complex) Computes the division of the current element with another element on the right. Declaration Complex IDivisible<Complex>.Divide(Complex other) Parameters Type Name Description Complex other Returns Type Description Complex The new element resulting from the division. | Improve this Doc View Source IMultiplicable<Complex>.IsAssociative Evaluates whether the multiplication is associative : a * (b * c) = (a * b) * c. Declaration readonly bool IMultiplicable<Complex>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Complex>.IsCommutative Evaluates whether the multiplication is commutative : a * b = b * a. Declaration readonly bool IMultiplicable<Complex>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Complex>.Multiply(Complex) Computes the multiplication of the current element with another element on the right. Declaration Complex IMultiplicable<Complex>.Multiply(Complex other) Parameters Type Name Description Complex other Returns Type Description Complex The new element resulting from the multiplication. | Improve this Doc View Source IOneable<Complex>.One() Returns the neutral element of the multiplication. Declaration Complex IOneable<Complex>.One() Returns Type Description Complex The neutral element of the multiplication. | Improve this Doc View Source ISubtractable<Complex>.Subtract(Complex) Computes the subtraction of the current element with another element on the right. Declaration Complex ISubtractable<Complex>.Subtract(Complex other) Parameters Type Name Description Complex other Returns Type Description Complex The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<Complex>.Zero() Returns the neutral element of the addition. Declaration Complex IZeroable<Complex>.Zero() Returns Type Description Complex The neutral element of the addition. | Improve this Doc View Source IGroupAction<Double, Complex>.Divide(Double) Computes the right scalar division of the current element. Declaration Complex IGroupAction<double, Complex>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description Complex The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, Complex>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration Complex IGroupAction<double, Complex>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description Complex The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IDivisible<T> IOneable<T> IMultiplicable<T> IGroupAction<TValue, T> IEquatable<>"
  },
  "api/BRIDGES.Arithmetic.Numbers.html": {
    "href": "api/BRIDGES.Arithmetic.Numbers.html",
    "title": "Namespace BRIDGES.Arithmetic.Numbers | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Arithmetic.Numbers Structs Complex Structure defining a complex number. Quaternion Structure defining quaternion number. Real Structure defining a real number."
  },
  "api/BRIDGES.Arithmetic.Numbers.Quaternion.html": {
    "href": "api/BRIDGES.Arithmetic.Numbers.Quaternion.html",
    "title": "Struct Quaternion | BRIDGES Documentation",
    "keywords": "Struct Quaternion Structure defining quaternion number. Implements IAbelianGroup < Quaternion > IGroup < Quaternion > IMonoid < Quaternion > ISemiGroup < Quaternion > ILoop < Quaternion > IQuasiGroup < Quaternion > IMagma < Quaternion > IAddable < Quaternion > ISubtractable < Quaternion > IZeroable < Quaternion > IAbelianGroup < Quaternion > IGroup < Quaternion > IMonoid < Quaternion > ISemiGroup < Quaternion > ILoop < Quaternion > IQuasiGroup < Quaternion > IMagma < Quaternion > IDivisible < Quaternion > IOneable < Quaternion > IMultiplicable < Quaternion > IGroupAction < System.Double , Quaternion > IEquatable < Quaternion > Namespace : BRIDGES.Arithmetic.Numbers Assembly : BRIDGES.dll Syntax public struct Quaternion : IAbelianGroup<Quaternion>, IGroup<Quaternion>, IMonoid<Quaternion>, ISemiGroup<Quaternion>, ILoop<Quaternion>, IQuasiGroup<Quaternion>, IMagma<Quaternion>, IAddable<Quaternion>, ISubtractable<Quaternion>, IZeroable<Quaternion>, IAbelianGroup<Quaternion>, IGroup<Quaternion>, IMonoid<Quaternion>, ISemiGroup<Quaternion>, ILoop<Quaternion>, IQuasiGroup<Quaternion>, IMagma<Quaternion>, IDivisible<Quaternion>, IOneable<Quaternion>, IMultiplicable<Quaternion>, IGroupAction<double, Quaternion> Constructors | Improve this Doc View Source Quaternion(Quaternion) Initialises a new instance of the Quaternion structure from another Quaternion number. Declaration public Quaternion(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Quaternion number to copy. | Improve this Doc View Source Quaternion(Double, Double, Double, Double) Initialises a new instance of Quaternion structure by defining its real and imaginary components. Declaration public Quaternion(double r, double i, double j, double k) Parameters Type Name Description System.Double r Value of the first component. System.Double i Value of the second component. System.Double j Value of the third component. System.Double k Value of the fourth component. | Improve this Doc View Source Quaternion(Double[]) Initialises a new instance of Quaternion structure by defining its components. Declaration public Quaternion(double[] components) Parameters Type Name Description System.Double [] components Value of the components. Properties | Improve this Doc View Source I Gets or sets the first component \"i\" of the vector part of the current Quaternion number. Declaration public double I { get; set; } Property Value Type Description System.Double | Improve this Doc View Source J Gets or sets the second component \"j\" of the vector part of the current Quaternion number. Declaration public double J { get; set; } Property Value Type Description System.Double | Improve this Doc View Source K Gets or sets the third component \"k\" of the vector part of the current Quaternion number. Declaration public double K { get; set; } Property Value Type Description System.Double | Improve this Doc View Source One Gets a new instance of the Quaternion structure equal to the multiplicative neutral element. It corresponds to the Quaternion with a real number equal to one and an imaginary number equal to zero : (1.0, 0.0, 0.0, 0.0). Declaration public static readonly Quaternion One { get; } Property Value Type Description Quaternion The new Quaternion number equal to one. | Improve this Doc View Source ScalarPart Gets or sets the scalar part of the current Quaternion number. Declaration public double ScalarPart { get; set; } Property Value Type Description System.Double | Improve this Doc View Source VectorPart Gets the vector part of the current Quaternion number. Declaration public readonly double[] VectorPart { get; } Property Value Type Description System.Double [] | Improve this Doc View Source Zero Gets a new instance of the Quaternion structure equal to the additive neutral element. It corresponds to the Quaternion with a real number equal to zero and an imaginary part equal to zero : (0.0, 0.0, 0.0, 0.0). Declaration public static readonly Quaternion Zero { get; } Property Value Type Description Quaternion The new Quaternion number equal to zero. Methods | Improve this Doc View Source Add(Complex, Quaternion) Computes the addition of a Complex number with a Quaternion number. Declaration public static Quaternion Add(Complex complex, Quaternion quaternion) Parameters Type Name Description Complex complex Complex number for the addition. Quaternion quaternion Quaternion number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Add(Quaternion, Complex) Computes the addition of a Quaternion number with a Complex number. Declaration public static Quaternion Add(Quaternion quaternion, Complex complex) Parameters Type Name Description Quaternion quaternion Quaternion number for the addition. Complex complex Complex number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Add(Quaternion, Quaternion) Computes the addition of two Quaternion numbers. Declaration public static Quaternion Add(Quaternion quaternionA, Quaternion quaternionB) Parameters Type Name Description Quaternion quaternionA Quaternion number for the addition. Quaternion quaternionB Quaternion number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Add(Quaternion, Real) Computes the addition of a Quaternion number with a Real number. Declaration public static Quaternion Add(Quaternion quaternion, Real real) Parameters Type Name Description Quaternion quaternion Quaternion number for the addition. Real real Real number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Add(Real, Quaternion) Computes the addition of a Real number with a Quaternion number. Declaration public static Quaternion Add(Real real, Quaternion quaternion) Parameters Type Name Description Real real Real number for the addition. Quaternion quaternion Quaternion number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Conjugate() Computes the conjugate of the current Quaternion number. Declaration public bool Conjugate() Returns Type Description System.Boolean true if the current Quaternion number was conjugated, false otherwise. | Improve this Doc View Source Conjugate(Quaternion) Gets the conjugate value of a Quaternion number. Declaration public static Quaternion Conjugate(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Quaternion number to conjugate. Returns Type Description Quaternion The new Quaternion number, conjugate of the initial one. | Improve this Doc View Source Divide(Complex, Quaternion) Computes the division of a Complex number with a Quaternion number. Declaration public static Quaternion Divide(Complex complex, Quaternion quaternion) Parameters Type Name Description Complex complex Complex number to divide. Quaternion quaternion Quaternion number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Divide(Quaternion, Complex) Computes the division of a Quaternion number with a Complex number. Declaration public static Quaternion Divide(Quaternion quaternion, Complex complex) Parameters Type Name Description Quaternion quaternion Quaternion number to divide. Complex complex Complex number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Divide(Quaternion, Quaternion) Computes the division of two Quaternion numbers. Declaration public static Quaternion Divide(Quaternion quaternionA, Quaternion quaternionB) Parameters Type Name Description Quaternion quaternionA Quaternion number to divide. Quaternion quaternionB Quaternion number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Divide(Quaternion, Real) Computes the division of a Quaternion number with a Real number. Declaration public static Quaternion Divide(Quaternion quaternion, Real real) Parameters Type Name Description Quaternion quaternion Quaternion number to divide. Real real Real number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Divide(Quaternion, Double) Computes the scalar division of a Quaternion number with a -precision real number. Declaration public static Quaternion Divide(Quaternion quaternion, double divisor) Parameters Type Name Description Quaternion quaternion Quaternion number to divide. System.Double divisor -precision real number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the scalar division. | Improve this Doc View Source Divide(Real, Quaternion) Computes the division of a Real number with a Quaternion number. Declaration public static Quaternion Divide(Real real, Quaternion quaternion) Parameters Type Name Description Real real Real number to divide. Quaternion quaternion Quaternion number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Equals(Quaternion) Declaration public bool Equals(Quaternion other) Parameters Type Name Description Quaternion other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Inverse() Computes the inverse of the current Quaternion number. Declaration public bool Inverse() Returns Type Description System.Boolean true if the current Quaternion number was inversed, false otherwise. | Improve this Doc View Source Inverse(Quaternion) Computes the inverse of the current Quaternion number. Declaration public static Quaternion Inverse(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Quaternion to be inversed. Returns Type Description Quaternion The new Quaternion number, inverse of the initial one. | Improve this Doc View Source Multiply(Complex, Quaternion) Computes the multiplication of a Complex number with a Quaternion number. Declaration public static Quaternion Multiply(Complex complex, Quaternion quaternion) Parameters Type Name Description Complex complex Complex number for the multiplicaion. Quaternion quaternion Quaternion number for the multiplicaion. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Multiply(Quaternion, Complex) Computes the multiplication of a Quaternion number with a Complex number. Declaration public static Quaternion Multiply(Quaternion quaternion, Complex complex) Parameters Type Name Description Quaternion quaternion Quaternion number for the multiplicaion. Complex complex Complex number for the multiplicaion. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Multiply(Quaternion, Quaternion) Computes the multiplication of two Quaternion numbers. Declaration public static Quaternion Multiply(Quaternion quaternionA, Quaternion quaternionB) Parameters Type Name Description Quaternion quaternionA Quaternion number for the multiplication. Quaternion quaternionB Quaternion number for the multiplication. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Multiply(Quaternion, Real) Computes the multiplication of a Quaternion number with a Real number. Declaration public static Quaternion Multiply(Quaternion quaternion, Real real) Parameters Type Name Description Quaternion quaternion Quaternion number for the multiplicaion. Real real Real number for the multiplicaion. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Multiply(Real, Quaternion) Computes the multiplication of a Real number with a Quaternion number. Declaration public static Quaternion Multiply(Real real, Quaternion quaternion) Parameters Type Name Description Real real Real number for the multiplicaion. Quaternion quaternion Quaternion number for the multiplicaion. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Multiply(Double, Quaternion) Computes the scalar multiplication of a Quaternion number with a -precision real number. Declaration public static Quaternion Multiply(double factor, Quaternion quaternion) Parameters Type Name Description System.Double factor -precision real number. Quaternion quaternion Quaternion number to multiply. Returns Type Description Quaternion The new Quaternion number resulting from the scalar multiplication. | Improve this Doc View Source Norm() Computes the norm of the current Quaternion number. Declaration public double Norm() Returns Type Description System.Double The value of the norm. | Improve this Doc View Source Opposite() Computes the opposite of the current Quaternion number. Declaration public bool Opposite() Returns Type Description System.Boolean true if the current Quaternion number was opposed, false otherwise. | Improve this Doc View Source Opposite(Quaternion) Computes the opposite of the given Quaternion number. Declaration public static Quaternion Opposite(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Quaternion number to be opposed. Returns Type Description Quaternion The new Quaternion number, opposite of the initial one. | Improve this Doc View Source Subtract(Complex, Quaternion) Computes the subtraction of a Complex number with a Quaternion number. Declaration public static Quaternion Subtract(Complex complex, Quaternion quaternion) Parameters Type Name Description Complex complex Complex number to subtract. Quaternion quaternion Quaternion number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source Subtract(Quaternion, Complex) Computes the subtraction of a Quaternion number with a Complex number. Declaration public static Quaternion Subtract(Quaternion quaternion, Complex complex) Parameters Type Name Description Quaternion quaternion Quaternion number to subtract. Complex complex Complex number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source Subtract(Quaternion, Quaternion) Computes the subtraction of two Quaternion numbers. Declaration public static Quaternion Subtract(Quaternion quaternionA, Quaternion quaternionB) Parameters Type Name Description Quaternion quaternionA Quaternion number to subtract. Quaternion quaternionB Quaternion number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source Subtract(Quaternion, Real) Computes the subtraction of a Quaternion number with a Real number. Declaration public static Quaternion Subtract(Quaternion quaternion, Real real) Parameters Type Name Description Quaternion quaternion Quaternion number to subtract. Real real Real number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source Subtract(Real, Quaternion) Computes the subtraction of a Real number with a Quaternion number. Declaration public static Quaternion Subtract(Real real, Quaternion quaternion) Parameters Type Name Description Real real Real number to subtract. Quaternion quaternion Quaternion number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Addition(Complex, Quaternion) Computes the addition of a Complex number with a Quaternion number. Declaration public static Quaternion operator +(Complex complex, Quaternion quaternion) Parameters Type Name Description Complex complex Complex number for the addition. Quaternion quaternion Quaternion number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Addition(Quaternion, Complex) Computes the addition of a Quaternion number with a Complex number. Declaration public static Quaternion operator +(Quaternion quaternion, Complex complex) Parameters Type Name Description Quaternion quaternion Quaternion number for the addition. Complex complex Complex number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Addition(Quaternion, Quaternion) Computes the addition of two Quaternion numbers. Declaration public static Quaternion operator +(Quaternion quaternionA, Quaternion quaternionB) Parameters Type Name Description Quaternion quaternionA Quaternion number for the addition. Quaternion quaternionB Quaternion number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Addition(Quaternion, Real) Computes the addition of a Quaternion number with a Real number. Declaration public static Quaternion operator +(Quaternion quaternion, Real real) Parameters Type Name Description Quaternion quaternion Quaternion number for the addition. Real real Real number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Addition(Quaternion, Double) Computes the addition of a Quaternion number with a -precision real number. Declaration public static Quaternion operator +(Quaternion quaternion, double number) Parameters Type Name Description Quaternion quaternion Quaternion number for the addition. System.Double number -precision real number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Addition(Real, Quaternion) Computes the addition of a Real number with a Quaternion number. Declaration public static Quaternion operator +(Real real, Quaternion quaternion) Parameters Type Name Description Real real Real number for the addition. Quaternion quaternion Quaternion number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Addition(Double, Quaternion) Computes the addition of a -precision real number with a Quaternion number. Declaration public static Quaternion operator +(double number, Quaternion quaternion) Parameters Type Name Description System.Double number -precision real number for the addition. Quaternion quaternion Quaternion number for the addition. Returns Type Description Quaternion The new Quaternion number resulting from the addition. | Improve this Doc View Source Division(Complex, Quaternion) Computes the division of a Complex number with a Quaternion number. Declaration public static Quaternion operator /(Complex complex, Quaternion quaternion) Parameters Type Name Description Complex complex Complex number to divide. Quaternion quaternion Quaternion number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Division(Quaternion, Complex) Computes the division of a Quaternion number with a Complex number. Declaration public static Quaternion operator /(Quaternion quaternion, Complex complex) Parameters Type Name Description Quaternion quaternion Quaternion number to divide. Complex complex Complex number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Division(Quaternion, Quaternion) Computes the division of two Quaternion numbers. Declaration public static Quaternion operator /(Quaternion quaternionA, Quaternion quaternionB) Parameters Type Name Description Quaternion quaternionA Quaternion number to divide. Quaternion quaternionB Quaternion number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Division(Quaternion, Real) Computes the division of a Quaternion number with a Real number. Declaration public static Quaternion operator /(Quaternion quaternion, Real real) Parameters Type Name Description Quaternion quaternion Quaternion number to divide. Real real Real number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Division(Quaternion, Double) Computes the division of a Quaternion number with a -precision real number. Declaration public static Quaternion operator /(Quaternion quaternion, double number) Parameters Type Name Description Quaternion quaternion Quaternion number to divide. System.Double number -precision real number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Division(Real, Quaternion) Computes the division of a Real number with a Quaternion number. Declaration public static Quaternion operator /(Real real, Quaternion quaternion) Parameters Type Name Description Real real Real number to divide. Quaternion quaternion Quaternion number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Division(Double, Quaternion) Computes the division of a -precision real number with a Quaternion number. Declaration public static Quaternion operator /(double number, Quaternion quaternion) Parameters Type Name Description System.Double number -precision real number to divide. Quaternion quaternion Quaternion number to divide with. Returns Type Description Quaternion The new Quaternion number resulting from the division. | Improve this Doc View Source Explicit(Complex to Quaternion) Casts a Complex number into a Quaternion number. Declaration public static explicit operator Quaternion(Complex complex) Parameters Type Name Description Complex complex Complex number to cast. Returns Type Description Quaternion The new Quaternion number resulting from the cast. | Improve this Doc View Source Explicit(Real to Quaternion) Casts a Real number into a Quaternion number. Declaration public static explicit operator Quaternion(Real real) Parameters Type Name Description Real real Real number to cast. Returns Type Description Quaternion The new Quaternion number resulting from the cast. | Improve this Doc View Source Explicit(Double to Quaternion) Casts a -precision real number into a Quaternion number. Declaration public static explicit operator Quaternion(double number) Parameters Type Name Description System.Double number -precision real number to cast. Returns Type Description Quaternion The new Quaternion number resulting from the cast. | Improve this Doc View Source Explicit(ValueTuple<Double, Double, Double, Double> to Quaternion) Casts a into a Quaternion number. Declaration public static explicit operator Quaternion(ValueTuple<double, double, double, double> quadruple) Parameters Type Name Description ValueTuple < System.Double , System.Double , System.Double , System.Double > quadruple to cast. Returns Type Description Quaternion The new Quaternion number resulting from the cast. | Improve this Doc View Source Multiply(Complex, Quaternion) Computes the multiplication of a Complex number with a Quaternion number. Declaration public static Quaternion operator *(Complex complex, Quaternion quaternion) Parameters Type Name Description Complex complex Complex number for the multiplicaion. Quaternion quaternion Quaternion number for the multiplicaion. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Multiply(Quaternion, Complex) Computes the multiplication of a Quaternion number with a Complex number. Declaration public static Quaternion operator *(Quaternion quaternion, Complex complex) Parameters Type Name Description Quaternion quaternion Quaternion number for the multiplicaion. Complex complex Complex number for the multiplicaion. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Multiply(Quaternion, Quaternion) Computes the multiplication of two Quaternion numbers. Declaration public static Quaternion operator *(Quaternion quaternionA, Quaternion quaternionB) Parameters Type Name Description Quaternion quaternionA Quaternion number for the multiplication. Quaternion quaternionB Quaternion number for the multiplication. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Multiply(Quaternion, Real) Computes the multiplication of a Quaternion number with a Real number. Declaration public static Quaternion operator *(Quaternion quaternion, Real real) Parameters Type Name Description Quaternion quaternion Quaternion number for the multiplicaion. Real real Real number for the multiplicaion. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Multiply(Quaternion, Double) Computes the multiplication of a Quaternion number with a -precision real number. Declaration public static Quaternion operator *(Quaternion quaternion, double number) Parameters Type Name Description Quaternion quaternion Quaternion number for the multiplicaion. System.Double number -precision real number for the multiplicaion. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Multiply(Real, Quaternion) Computes the multiplication of a Real number with a Quaternion number. Declaration public static Quaternion operator *(Real real, Quaternion quaternion) Parameters Type Name Description Real real Real number for the multiplicaion. Quaternion quaternion Quaternion number for the multiplicaion. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Multiply(Double, Quaternion) Computes the multiplication of a -precision real number with a Quaternion number. Declaration public static Quaternion operator *(double number, Quaternion quaternion) Parameters Type Name Description System.Double number -precision real number for the multiplicaion. Quaternion quaternion Quaternion number for the multiplicaion. Returns Type Description Quaternion The new Quaternion number resulting from the multiplication. | Improve this Doc View Source Subtraction(Complex, Quaternion) Computes the subtraction of a Complex number with a Quaternion number. Declaration public static Quaternion operator -(Complex complex, Quaternion quaternion) Parameters Type Name Description Complex complex Complex number to subtract. Quaternion quaternion Quaternion number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source Subtraction(Quaternion, Complex) Computes the subtraction of a Quaternion number with a Complex number. Declaration public static Quaternion operator -(Quaternion quaternion, Complex complex) Parameters Type Name Description Quaternion quaternion Quaternion number to subtract. Complex complex Complex number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source Subtraction(Quaternion, Quaternion) Computes the subtraction of two Quaternion numbers. Declaration public static Quaternion operator -(Quaternion quaternionA, Quaternion quaternionB) Parameters Type Name Description Quaternion quaternionA Quaternion number to subtract. Quaternion quaternionB Quaternion number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source Subtraction(Quaternion, Real) Computes the subtraction of a Quaternion number with a Real number. Declaration public static Quaternion operator -(Quaternion quaternion, Real real) Parameters Type Name Description Quaternion quaternion Quaternion number to subtract. Real real Real number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source Subtraction(Quaternion, Double) Computes the subtraction of a Quaternion number with a -precision real number. Declaration public static Quaternion operator -(Quaternion quaternion, double number) Parameters Type Name Description Quaternion quaternion Quaternion number to subtract. System.Double number -precision real number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source Subtraction(Real, Quaternion) Computes the subtraction of a Real number with a Quaternion number. Declaration public static Quaternion operator -(Real real, Quaternion quaternion) Parameters Type Name Description Real real Real number to subtract. Quaternion quaternion Quaternion number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source Subtraction(Double, Quaternion) Computes the subtraction of a Real number with a -precision real number. Declaration public static Quaternion operator -(double number, Quaternion quaternion) Parameters Type Name Description System.Double number -precision real number to subtract. Quaternion quaternion Quaternion number to subtract with. Returns Type Description Quaternion The new Quaternion number resulting from the subtraction. | Improve this Doc View Source UnaryNegation(Quaternion) Computes the opposite of the given Quaternion number. Declaration public static Quaternion operator -(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Quaternion number to be opposed. Returns Type Description Quaternion The new Quaternion number, opposite of the initial one. Explicit Interface Implementations | Improve this Doc View Source IAddable<Quaternion>.Add(Quaternion) Computes the addition of the current element with another element on the right. Declaration Quaternion IAddable<Quaternion>.Add(Quaternion other) Parameters Type Name Description Quaternion other Returns Type Description Quaternion The new element resulting from the addition. | Improve this Doc View Source IAddable<Quaternion>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration readonly bool IAddable<Quaternion>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<Quaternion>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration readonly bool IAddable<Quaternion>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IDivisible<Quaternion>.Divide(Quaternion) Computes the division of the current element with another element on the right. Declaration Quaternion IDivisible<Quaternion>.Divide(Quaternion other) Parameters Type Name Description Quaternion other Returns Type Description Quaternion The new element resulting from the division. | Improve this Doc View Source IMultiplicable<Quaternion>.IsAssociative Evaluates whether the multiplication is associative : a * (b * c) = (a * b) * c. Declaration readonly bool IMultiplicable<Quaternion>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Quaternion>.IsCommutative Evaluates whether the multiplication is commutative : a * b = b * a. Declaration readonly bool IMultiplicable<Quaternion>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Quaternion>.Multiply(Quaternion) Computes the multiplication of the current element with another element on the right. Declaration Quaternion IMultiplicable<Quaternion>.Multiply(Quaternion other) Parameters Type Name Description Quaternion other Returns Type Description Quaternion The new element resulting from the multiplication. | Improve this Doc View Source IOneable<Quaternion>.One() Returns the neutral element of the multiplication. Declaration Quaternion IOneable<Quaternion>.One() Returns Type Description Quaternion The neutral element of the multiplication. | Improve this Doc View Source ISubtractable<Quaternion>.Subtract(Quaternion) Computes the subtraction of the current element with another element on the right. Declaration Quaternion ISubtractable<Quaternion>.Subtract(Quaternion other) Parameters Type Name Description Quaternion other Returns Type Description Quaternion The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<Quaternion>.Zero() Returns the neutral element of the addition. Declaration Quaternion IZeroable<Quaternion>.Zero() Returns Type Description Quaternion The neutral element of the addition. | Improve this Doc View Source IGroupAction<Double, Quaternion>.Divide(Double) Computes the right scalar division of the current element. Declaration Quaternion IGroupAction<double, Quaternion>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description Quaternion The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, Quaternion>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration Quaternion IGroupAction<double, Quaternion>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description Quaternion The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IDivisible<T> IOneable<T> IMultiplicable<T> IGroupAction<TValue, T> IEquatable<>"
  },
  "api/BRIDGES.Arithmetic.Numbers.Real.html": {
    "href": "api/BRIDGES.Arithmetic.Numbers.Real.html",
    "title": "Struct Real | BRIDGES Documentation",
    "keywords": "Struct Real Structure defining a real number. Implements IAbelianGroup < Real > IGroup < Real > IMonoid < Real > ISemiGroup < Real > ILoop < Real > IQuasiGroup < Real > IMagma < Real > IAddable < Real > ISubtractable < Real > IZeroable < Real > IAbelianGroup < Real > IGroup < Real > IMonoid < Real > ISemiGroup < Real > ILoop < Real > IQuasiGroup < Real > IMagma < Real > IDivisible < Real > IOneable < Real > IMultiplicable < Real > IEquatable < Real > Namespace : BRIDGES.Arithmetic.Numbers Assembly : BRIDGES.dll Syntax public struct Real : IAbelianGroup<Real>, IGroup<Real>, IMonoid<Real>, ISemiGroup<Real>, ILoop<Real>, IQuasiGroup<Real>, IMagma<Real>, IAddable<Real>, ISubtractable<Real>, IZeroable<Real>, IAbelianGroup<Real>, IGroup<Real>, IMonoid<Real>, ISemiGroup<Real>, ILoop<Real>, IQuasiGroup<Real>, IMagma<Real>, IDivisible<Real>, IOneable<Real>, IMultiplicable<Real> Constructors | Improve this Doc View Source Real(Real) Initialises a new instance of the Real structure from another Real number. Declaration public Real(Real real) Parameters Type Name Description Real real Real number to copy. | Improve this Doc View Source Real(Double) Initialises a new instance of the Real structure by defining its value. Declaration public Real(double number = 0) Parameters Type Name Description System.Double number Value of the real number. Properties | Improve this Doc View Source One Gets a new instance of the Real structure equal to one. Declaration public static readonly Real One { get; } Property Value Type Description Real The new Real number equal to one. | Improve this Doc View Source Value Value of the real numbers. Declaration public double Value { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Zero Gets a new instance of the Real structure equal to zero. Declaration public static readonly Real Zero { get; } Property Value Type Description Real Methods | Improve this Doc View Source Add(Real, Real) Computes the addition of two Real numbers. Declaration public static Real Add(Real realA, Real realB) Parameters Type Name Description Real realA Real number for the addition. Real realB Real number for the addition. Returns Type Description Real The new Real number resulting from the addition. | Improve this Doc View Source Divide(Real, Real) Computes the division of two Real numbers. Declaration public static Real Divide(Real realA, Real realB) Parameters Type Name Description Real realA Real number to divide. Real realB Real number to divide with. Returns Type Description Real The new Real number resulting from the division. | Improve this Doc View Source Equals(Real) Declaration public bool Equals(Real other) Parameters Type Name Description Real other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Inverse() Computes the inverse of the current Real number. Declaration public bool Inverse() Returns Type Description System.Boolean true if the current Real number was inversed, false otherwise. | Improve this Doc View Source Inverse(Real) Computes the inverse of the given Real number. Declaration public static Real Inverse(Real real) Parameters Type Name Description Real real Real to be inversed. Returns Type Description Real The new Real number, inverse of the initial one. | Improve this Doc View Source Multiply(Real, Real) Computes the multiplication of two Real numbers. Declaration public static Real Multiply(Real realA, Real realB) Parameters Type Name Description Real realA Real number for the multiplication. Real realB Real number for the multiplication. Returns Type Description Real The new Real number resulting from the multiplication. | Improve this Doc View Source Opposite() Computes the opposite of the current Real number. Declaration public bool Opposite() Returns Type Description System.Boolean true if the current Real number was opposed, false otherwise. | Improve this Doc View Source Opposite(Real) Computes the opposite of the given Real number. Declaration public static Real Opposite(Real real) Parameters Type Name Description Real real Real number to be opposed. Returns Type Description Real The new Real number, opposite of the initial one. | Improve this Doc View Source Subtract(Real, Real) Computes the subtraction of two Real numbers. Declaration public static Real Subtract(Real realA, Real realB) Parameters Type Name Description Real realA Real number to subtract. Real realB Real number to subtract with. Returns Type Description Real The new Real number resulting from the subtraction. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Addition(Real, Real) Computes the addition of two Real numbers. Declaration public static Real operator +(Real realA, Real realB) Parameters Type Name Description Real realA Real number for the addition. Real realB Real number for the addition. Returns Type Description Real The new Real number resulting from the addition. | Improve this Doc View Source Addition(Real, Double) Computes the addition of a Real number with a -precision real number. Declaration public static Real operator +(Real real, double number) Parameters Type Name Description Real real Real number for the addition. System.Double number -precision real number for the addition. Returns Type Description Real The new Real number resulting from the addition. | Improve this Doc View Source Addition(Double, Real) Computes the addition of a -precision real number with a Real number. Declaration public static Real operator +(double number, Real real) Parameters Type Name Description System.Double number -precision real number for the addition. Real real Real number for the addition. Returns Type Description Real The new Real number resulting from the addition. | Improve this Doc View Source Division(Real, Real) Computes the division of two Real numbers. Declaration public static Real operator /(Real realA, Real realB) Parameters Type Name Description Real realA Real number to divide. Real realB Real number to divide with. Returns Type Description Real The new Real number resulting from the division. | Improve this Doc View Source Division(Real, Double) Computes the division of a Real number with a -precision real number. Declaration public static Real operator /(Real real, double number) Parameters Type Name Description Real real Real number to divide. System.Double number -precision real number to divide with. Returns Type Description Real The new Real number resulting from the division. | Improve this Doc View Source Division(Double, Real) Computes the division of a -precision real number with a Real number. Declaration public static Real operator /(double number, Real real) Parameters Type Name Description System.Double number -precision real number to divide. Real real Real number to divide with. Returns Type Description Real The new Real number resulting from the division. | Improve this Doc View Source Explicit(Real to Double) Casts a Real number into a -precision real number. Declaration public static explicit operator double (Real real) Parameters Type Name Description Real real Real number to cast. Returns Type Description System.Double The new -precision real number resulting from the cast. | Improve this Doc View Source Explicit(Double to Real) Casts a -precision real number into a Real number. Declaration public static explicit operator Real(double number) Parameters Type Name Description System.Double number -precision real number to cast. Returns Type Description Real The new Real number resulting from the cast. | Improve this Doc View Source Multiply(Real, Real) Computes the multiplication of two Real numbers. Declaration public static Real operator *(Real realA, Real realB) Parameters Type Name Description Real realA Real number for the multiplication. Real realB Real number for the multiplication. Returns Type Description Real The new Real number resulting from the multiplication. | Improve this Doc View Source Multiply(Real, Double) Computes the multiplication of a Real number with a -precision real number. Declaration public static Real operator *(Real real, double number) Parameters Type Name Description Real real Real number for the multiplicaion. System.Double number -precision real number for the multiplicaion. Returns Type Description Real The new Real number resulting from the multiplication. | Improve this Doc View Source Multiply(Double, Real) Computes the multiplication of a -precision real number with a Real number. Declaration public static Real operator *(double number, Real real) Parameters Type Name Description System.Double number -precision real number for the multiplicaion. Real real Real number for the multiplicaion. Returns Type Description Real The new Real number resulting from the multiplication. | Improve this Doc View Source Subtraction(Real, Real) Computes the subtraction of two Real numbers. Declaration public static Real operator -(Real realA, Real realB) Parameters Type Name Description Real realA Real number to subtract. Real realB Real number to subtract with. Returns Type Description Real The new Real number resulting from the subtraction. | Improve this Doc View Source Subtraction(Real, Double) Computes the subtraction of a Real number with a -precision real number. Declaration public static Real operator -(Real real, double number) Parameters Type Name Description Real real Real number to subtract. System.Double number -precision real number to subtract with. Returns Type Description Real The new Real number resulting from the subtraction. | Improve this Doc View Source Subtraction(Double, Real) Computes the subtraction of a -precision real number with a Real number. Declaration public static Real operator -(double number, Real real) Parameters Type Name Description System.Double number -precision real number to subtract. Real real Real number to subtract with. Returns Type Description Real The new Real number resulting from the subtraction. | Improve this Doc View Source UnaryNegation(Real) Computes the opposite of the given Real number. Declaration public static Real operator -(Real real) Parameters Type Name Description Real real Real number to be opposed. Returns Type Description Real The new Real number, opposite of the initial one. Explicit Interface Implementations | Improve this Doc View Source IAddable<Real>.Add(Real) Computes the addition of the current element with another element on the right. Declaration Real IAddable<Real>.Add(Real other) Parameters Type Name Description Real other Returns Type Description Real The new element resulting from the addition. | Improve this Doc View Source IAddable<Real>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration readonly bool IAddable<Real>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<Real>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration readonly bool IAddable<Real>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IDivisible<Real>.Divide(Real) Computes the division of the current element with another element on the right. Declaration Real IDivisible<Real>.Divide(Real other) Parameters Type Name Description Real other Returns Type Description Real The new element resulting from the division. | Improve this Doc View Source IMultiplicable<Real>.IsAssociative Evaluates whether the multiplication is associative : a * (b * c) = (a * b) * c. Declaration readonly bool IMultiplicable<Real>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Real>.IsCommutative Evaluates whether the multiplication is commutative : a * b = b * a. Declaration readonly bool IMultiplicable<Real>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Real>.Multiply(Real) Computes the multiplication of the current element with another element on the right. Declaration Real IMultiplicable<Real>.Multiply(Real other) Parameters Type Name Description Real other Returns Type Description Real The new element resulting from the multiplication. | Improve this Doc View Source IOneable<Real>.One() Returns the neutral element of the multiplication. Declaration Real IOneable<Real>.One() Returns Type Description Real The neutral element of the multiplication. | Improve this Doc View Source ISubtractable<Real>.Subtract(Real) Computes the subtraction of the current element with another element on the right. Declaration Real ISubtractable<Real>.Subtract(Real other) Parameters Type Name Description Real other Returns Type Description Real The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<Real>.Zero() Returns the neutral element of the addition. Declaration Real IZeroable<Real>.Zero() Returns Type Description Real The neutral element of the addition. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IDivisible<T> IOneable<T> IMultiplicable<T> IEquatable<>"
  },
  "api/BRIDGES.Arithmetic.Polynomials.html": {
    "href": "api/BRIDGES.Arithmetic.Polynomials.html",
    "title": "Namespace BRIDGES.Arithmetic.Polynomials | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Arithmetic.Polynomials Classes Monomial Class defining a multivariate monomial. MultivariatePolynomial Class defining a multivariate polynomial. Polynomial Class defining a univarite polynomial."
  },
  "api/BRIDGES.Arithmetic.Polynomials.Monomial.html": {
    "href": "api/BRIDGES.Arithmetic.Polynomials.Monomial.html",
    "title": "Class Monomial | BRIDGES Documentation",
    "keywords": "Class Monomial Class defining a multivariate monomial. Inheritance System.Object Monomial Implements IMonoid < Monomial > ISemiGroup < Monomial > IMagma < Monomial > IOneable < Monomial > IMultiplicable < Monomial > Namespace : BRIDGES.Arithmetic.Polynomials Assembly : BRIDGES.dll Syntax public class Monomial : object, IMonoid<Monomial>, ISemiGroup<Monomial>, IMagma<Monomial>, IOneable<Monomial>, IMultiplicable<Monomial> Constructors | Improve this Doc View Source Monomial(Int32[]) Initialises a new instance of Polynomial class by defining the variable's degree. Declaration public Monomial(params int[] exponents) Parameters Type Name Description System.Int32 [] exponents Variables' exponent. Properties | Improve this Doc View Source Item[Int32] Gets the exponent of the variable at a given index in the current Monomial . Declaration public int this[int index] { get; } Parameters Type Name Description System.Int32 index Index of the variable whose exponent to get. Property Value Type Description System.Int32 The exponent of the variable at the given index. | Improve this Doc View Source One Gets a new Monomial , constant equal to one. Declaration public static Monomial One { get; } Property Value Type Description Monomial | Improve this Doc View Source TotalDegree Gets the total degree of the current Monomial . Declaration public int TotalDegree { get; } Property Value Type Description System.Int32 | Improve this Doc View Source VariableCount Gets the number of variable of the current Monomial Declaration public int VariableCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source EvaluateAt(Double[]) Computes the current Monomial at a given value. Declaration public virtual double EvaluateAt(double[] val) Parameters Type Name Description System.Double [] val Value to evaluate at. Returns Type Description System.Double The computed value of the current Monomial . | Improve this Doc View Source Multiply(Monomial, Monomial) Computes the multiplication of two Monomial . Declaration public static Monomial Multiply(Monomial left, Monomial right) Parameters Type Name Description Monomial left Monomial for the multiplication. Monomial right Monomial for the multiplication. Returns Type Description Monomial The new Monomial resulting from the multiplication. Operators | Improve this Doc View Source Multiply(Monomial, Monomial) Computes the multiplication of two Monomial . Declaration public static Monomial operator *(Monomial left, Monomial right) Parameters Type Name Description Monomial left Monomial for the multiplication. Monomial right Monomial for the multiplication. Returns Type Description Monomial The new Monomial resulting from the multiplication. Explicit Interface Implementations | Improve this Doc View Source IMultiplicable<Monomial>.IsAssociative Evaluates whether the multiplication is associative : a * (b * c) = (a * b) * c. Declaration bool IMultiplicable<Monomial>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Monomial>.IsCommutative Evaluates whether the multiplication is commutative : a * b = b * a. Declaration bool IMultiplicable<Monomial>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Monomial>.Multiply(Monomial) Computes the multiplication of the current element with another element on the right. Declaration Monomial IMultiplicable<Monomial>.Multiply(Monomial other) Parameters Type Name Description Monomial other Returns Type Description Monomial The new element resulting from the multiplication. | Improve this Doc View Source IOneable<Monomial>.One() Returns the neutral element of the multiplication. Declaration Monomial IOneable<Monomial>.One() Returns Type Description Monomial The neutral element of the multiplication. Implements IMonoid<T> ISemiGroup<T> IMagma<T> IOneable<T> IMultiplicable<T>"
  },
  "api/BRIDGES.Arithmetic.Polynomials.MultivariatePolynomial.html": {
    "href": "api/BRIDGES.Arithmetic.Polynomials.MultivariatePolynomial.html",
    "title": "Class MultivariatePolynomial | BRIDGES Documentation",
    "keywords": "Class MultivariatePolynomial Class defining a multivariate polynomial. Inheritance System.Object MultivariatePolynomial Namespace : BRIDGES.Arithmetic.Polynomials Assembly : BRIDGES.dll Syntax public class MultivariatePolynomial : object Remarks For a univarite polynomial, refer to Polynomial . Constructors | Improve this Doc View Source MultivariatePolynomial(Double[], Monomial[]) Initialises a new instance of MultivariatePolynomial class by defining its coefficients and associated monomials. Declaration public MultivariatePolynomial(double[] coefficients, Monomial[] monomials) Parameters Type Name Description System.Double [] coefficients Coefficients of the multivariate polynomial. Monomial [] monomials Monomials of the multivariate polynomial. Methods | Improve this Doc View Source EvaluateAt(Double[]) Computes the current MultivariatePolynomial at a given value. Declaration public double EvaluateAt(double[] val) Parameters Type Name Description System.Double [] val Value to evaluate at. Returns Type Description System.Double The computed value of the current MultivariatePolynomial . Operators | Improve this Doc View Source Implicit(Monomial to MultivariatePolynomial) Casts a Monomial into a MultivariatePolynomial . Declaration public static implicit operator MultivariatePolynomial(Monomial monomial) Parameters Type Name Description Monomial monomial Monomial to cast. Returns Type Description MultivariatePolynomial The new MultivariatePolynomial resulting from the cast."
  },
  "api/BRIDGES.Arithmetic.Polynomials.Polynomial.html": {
    "href": "api/BRIDGES.Arithmetic.Polynomials.Polynomial.html",
    "title": "Class Polynomial | BRIDGES Documentation",
    "keywords": "Class Polynomial Class defining a univarite polynomial. Inheritance System.Object Polynomial Bernstein BSpline Implements IAbelianGroup < Polynomial > IGroup < Polynomial > IMonoid < Polynomial > ISemiGroup < Polynomial > ILoop < Polynomial > IQuasiGroup < Polynomial > IMagma < Polynomial > IAddable < Polynomial > ISubtractable < Polynomial > IZeroable < Polynomial > IMonoid < Polynomial > ISemiGroup < Polynomial > IMagma < Polynomial > IOneable < Polynomial > IMultiplicable < Polynomial > IGroupAction < System.Double , Polynomial > Namespace : BRIDGES.Arithmetic.Polynomials Assembly : BRIDGES.dll Syntax public class Polynomial : object, IAbelianGroup<Polynomial>, IGroup<Polynomial>, IMonoid<Polynomial>, ISemiGroup<Polynomial>, ILoop<Polynomial>, IQuasiGroup<Polynomial>, IMagma<Polynomial>, IAddable<Polynomial>, ISubtractable<Polynomial>, IZeroable<Polynomial>, IMonoid<Polynomial>, ISemiGroup<Polynomial>, IMagma<Polynomial>, IOneable<Polynomial>, IMultiplicable<Polynomial>, IGroupAction<double, Polynomial> Remarks For a multivariate polynomial, refer to MultivariatePolynomial . Constructors | Improve this Doc View Source Polynomial(Double[]) Initialises a new instance of Polynomial class by defining its coefficients. Declaration public Polynomial(params double[] coefficients) Parameters Type Name Description System.Double [] coefficients Coefficients of the polynomial, starting from the constant value. Properties | Improve this Doc View Source Degree Gets the degree of the current Polynomial . Declaration public int Degree { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Gets the value of the coefficient at a given index. Declaration public double this[int index] { get; } Parameters Type Name Description System.Int32 index Index of the coefficient to get. Property Value Type Description System.Double The value of the coefficient at the given index. | Improve this Doc View Source One Gets a new Polynomial , constant equal to one. Declaration public static Polynomial One { get; } Property Value Type Description Polynomial | Improve this Doc View Source Zero Gets a new Polynomial , constant equal to zero. Declaration public static Polynomial Zero { get; } Property Value Type Description Polynomial Methods | Improve this Doc View Source Add(Polynomial, Polynomial) Computes the addition of two Polynomial . Declaration public static Polynomial Add(Polynomial left, Polynomial right) Parameters Type Name Description Polynomial left Polynomial for the addition. Polynomial right Polynomial for the addition. Returns Type Description Polynomial The new Polynomial resulting from the addition. | Improve this Doc View Source Derive(Polynomial, Int32) Computes the Polynomial which is the derivative of the given Polynomial at the given order. Declaration public static Polynomial Derive(Polynomial polynomial, int order = 1) Parameters Type Name Description Polynomial polynomial Polynomial to derive. System.Int32 order Order of the derivative to compute. Returns Type Description Polynomial The new Polynomial resulting from the derivation. | Improve this Doc View Source Divide(Polynomial, Double) Computes the scalar division of a Polynomial with a -precision real number. Declaration public static Polynomial Divide(Polynomial polynomial, double divisor) Parameters Type Name Description Polynomial polynomial Polynomial to divide. System.Double divisor -precision real number to divide with. Returns Type Description Polynomial The new Polynomial resulting from the scalar division. | Improve this Doc View Source EvaluateAt(Double) Computes the current Polynomial at a given value using Horner's method. Declaration public virtual double EvaluateAt(double val) Parameters Type Name Description System.Double val Value to evaluate at. Returns Type Description System.Double The computed value of the current Polynomial . | Improve this Doc View Source GetCoefficients() Returns the coefficents of the current Polynomial , starting from the constant value. Declaration public double[] GetCoefficients() Returns Type Description System.Double [] The coefficents of the current Polynomial . | Improve this Doc View Source Multiply(Polynomial, Polynomial) Computes the multiplication of two Polynomial . Declaration public static Polynomial Multiply(Polynomial left, Polynomial right) Parameters Type Name Description Polynomial left Polynomial for the multiplication. Polynomial right Polynomial for the multiplication. Returns Type Description Polynomial The new Polynomial resulting from the multiplication. | Improve this Doc View Source Multiply(Double, Polynomial) Computes the scalar multiplication of a Polynomial with a -precision real number. Declaration public static Polynomial Multiply(double factor, Polynomial polynomial) Parameters Type Name Description System.Double factor -precision real number. Polynomial polynomial Polynomial to multiply. Returns Type Description Polynomial The new Polynomial resulting from the scalar multiplication. | Improve this Doc View Source Subtract(Polynomial, Polynomial) Computes the subtraction of two Polynomial . Declaration public static Polynomial Subtract(Polynomial left, Polynomial right) Parameters Type Name Description Polynomial left Polynomial to subtract. Polynomial right Polynomial to subtract with. Returns Type Description Polynomial The new Polynomial resulting from the subtraction. Operators | Improve this Doc View Source Addition(Polynomial, Polynomial) Computes the addition of two Polynomial . Declaration public static Polynomial operator +(Polynomial left, Polynomial right) Parameters Type Name Description Polynomial left Polynomial for the addition. Polynomial right Polynomial for the addition. Returns Type Description Polynomial The new Polynomial resulting from the addition. | Improve this Doc View Source Division(Polynomial, Double) Computes the scalar division of a Polynomial with a -precision real number. Declaration public static Polynomial operator /(Polynomial polynomial, double divisor) Parameters Type Name Description Polynomial polynomial Polynomial to divide. System.Double divisor -precision real number to divide with. Returns Type Description Polynomial The new Polynomial resulting from the scalar division. | Improve this Doc View Source Multiply(Polynomial, Polynomial) Computes the multiplication of two Polynomial . Declaration public static Polynomial operator *(Polynomial left, Polynomial right) Parameters Type Name Description Polynomial left Polynomial for the multiplication. Polynomial right Polynomial for the multiplication. Returns Type Description Polynomial The new Polynomial resulting from the multiplication. | Improve this Doc View Source Multiply(Polynomial, Double) Declaration public static Polynomial operator *(Polynomial polynomial, double factor) Parameters Type Name Description Polynomial polynomial System.Double factor Returns Type Description Polynomial | Improve this Doc View Source Multiply(Double, Polynomial) Computes the scalar multiplication of a Polynomial with a -precision real number. Declaration public static Polynomial operator *(double factor, Polynomial polynomial) Parameters Type Name Description System.Double factor -precision real number. Polynomial polynomial Polynomial to multiply. Returns Type Description Polynomial The new Polynomial resulting from the scalar multiplication. | Improve this Doc View Source Subtraction(Polynomial, Polynomial) Computes the subtraction of two Polynomial . Declaration public static Polynomial operator -(Polynomial left, Polynomial right) Parameters Type Name Description Polynomial left Polynomial to subtract. Polynomial right Polynomial to subtract with. Returns Type Description Polynomial The new Polynomial resulting from the subtraction. | Improve this Doc View Source UnaryNegation(Polynomial) Computes the opposite of the given Polynomial . Declaration public static Polynomial operator -(Polynomial polynomial) Parameters Type Name Description Polynomial polynomial Polynomial to be opposed. Returns Type Description Polynomial The new Polynomial , opposite of the initial one. Explicit Interface Implementations | Improve this Doc View Source IAddable<Polynomial>.Add(Polynomial) Computes the addition of the current element with another element on the right. Declaration Polynomial IAddable<Polynomial>.Add(Polynomial right) Parameters Type Name Description Polynomial right Returns Type Description Polynomial The new element resulting from the addition. | Improve this Doc View Source IAddable<Polynomial>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration bool IAddable<Polynomial>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<Polynomial>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration bool IAddable<Polynomial>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IMultiplicable<Polynomial>.IsAssociative Evaluates whether the multiplication is associative : a * (b * c) = (a * b) * c. Declaration bool IMultiplicable<Polynomial>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Polynomial>.IsCommutative Evaluates whether the multiplication is commutative : a * b = b * a. Declaration bool IMultiplicable<Polynomial>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Polynomial>.Multiply(Polynomial) Computes the multiplication of the current element with another element on the right. Declaration Polynomial IMultiplicable<Polynomial>.Multiply(Polynomial right) Parameters Type Name Description Polynomial right Returns Type Description Polynomial The new element resulting from the multiplication. | Improve this Doc View Source IOneable<Polynomial>.One() Returns the neutral element of the multiplication. Declaration Polynomial IOneable<Polynomial>.One() Returns Type Description Polynomial The neutral element of the multiplication. | Improve this Doc View Source ISubtractable<Polynomial>.Subtract(Polynomial) Computes the subtraction of the current element with another element on the right. Declaration Polynomial ISubtractable<Polynomial>.Subtract(Polynomial right) Parameters Type Name Description Polynomial right Returns Type Description Polynomial The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<Polynomial>.Zero() Returns the neutral element of the addition. Declaration Polynomial IZeroable<Polynomial>.Zero() Returns Type Description Polynomial The neutral element of the addition. | Improve this Doc View Source IGroup<Polynomial>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<Polynomial>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, Polynomial>.Divide(Double) Computes the right scalar division of the current element. Declaration Polynomial IGroupAction<double, Polynomial>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description Polynomial The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, Polynomial>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration Polynomial IGroupAction<double, Polynomial>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description Polynomial The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IMonoid<T> ISemiGroup<T> IMagma<T> IOneable<T> IMultiplicable<T> IGroupAction<TValue, T>"
  },
  "api/BRIDGES.Arithmetic.Polynomials.Specials.Bernstein.html": {
    "href": "api/BRIDGES.Arithmetic.Polynomials.Specials.Bernstein.html",
    "title": "Class Bernstein | BRIDGES Documentation",
    "keywords": "Class Bernstein Class defining a Bernstein polynomial. Inheritance System.Object Polynomial Bernstein Implements IAbelianGroup < Polynomial > IGroup < Polynomial > IMonoid < Polynomial > ISemiGroup < Polynomial > ILoop < Polynomial > IQuasiGroup < Polynomial > IMagma < Polynomial > IAddable < Polynomial > ISubtractable < Polynomial > IZeroable < Polynomial > IMonoid < Polynomial > ISemiGroup < Polynomial > IMagma < Polynomial > IOneable < Polynomial > IMultiplicable < Polynomial > IGroupAction < System.Double , Polynomial > Inherited Members Polynomial.Degree Polynomial.Item[Int32] Polynomial.Zero Polynomial.One Polynomial.Derive(Polynomial, Int32) Polynomial.Add(Polynomial, Polynomial) Polynomial.Subtract(Polynomial, Polynomial) Polynomial.Multiply(Polynomial, Polynomial) Polynomial.Multiply(Double, Polynomial) Polynomial.Divide(Polynomial, Double) Polynomial.GetCoefficients() Polynomial.EvaluateAt(Double) Polynomial.IAddable<Polynomial>.IsAssociative Polynomial.IAddable<Polynomial>.IsCommutative Polynomial.IAddable<Polynomial>.Add(Polynomial) Polynomial.ISubtractable<Polynomial>.Subtract(Polynomial) Polynomial.IGroup<Polynomial>.Opposite() Polynomial.IZeroable<Polynomial>.Zero() Polynomial.IMultiplicable<Polynomial>.IsAssociative Polynomial.IMultiplicable<Polynomial>.IsCommutative Polynomial.IMultiplicable<Polynomial>.Multiply(Polynomial) Polynomial.IOneable<Polynomial>.One() Polynomial.IGroupAction<Double, Polynomial>.Multiply(Double) Polynomial.IGroupAction<Double, Polynomial>.Divide(Double) Namespace : BRIDGES.Arithmetic.Polynomials.Specials Assembly : BRIDGES.dll Syntax public class Bernstein : Polynomial, IAbelianGroup<Polynomial>, IGroup<Polynomial>, IMonoid<Polynomial>, ISemiGroup<Polynomial>, ILoop<Polynomial>, IQuasiGroup<Polynomial>, IMagma<Polynomial>, IAddable<Polynomial>, ISubtractable<Polynomial>, IZeroable<Polynomial>, IMonoid<Polynomial>, ISemiGroup<Polynomial>, IMagma<Polynomial>, IOneable<Polynomial>, IMultiplicable<Polynomial>, IGroupAction<double, Polynomial> Constructors | Improve this Doc View Source Bernstein(Int32, Int32) Initialises a new instance of Bernstein class by defining its index and degree. Declaration public Bernstein(int index, int degree) Parameters Type Name Description System.Int32 index Index of the Bernstein polynomial. System.Int32 degree Degree of the Bernstein polynomial. Properties | Improve this Doc View Source Index Gets the index of the current Bernstein . Declaration public int Index { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source EvaluateAt(Double, Int32, Int32) Evaluates a Bernstein of a given index and degree, at a given value. Declaration public static double EvaluateAt(double val, int index, int degree) Parameters Type Name Description System.Double val Value to evaluate at. System.Int32 index Index of the Bernstein to evaluate. System.Int32 degree Degree of the Bernstein to evaluate. Returns Type Description System.Double The value of the Bernstein polynomial at the given value. Remarks The code is adapted from algorithm 1.2 described in the NURBS Book , by L. Piegl and W. Tiller. | Improve this Doc View Source EvaluateBasisAt(Double, Int32) Evaluates a Bernstein polynomial basis of a given degree, at a given value. Declaration public static double[] EvaluateBasisAt(double val, int degree) Parameters Type Name Description System.Double val Value to evaluate at. System.Int32 degree Degree of the Bernstein polynomial basis. Returns Type Description System.Double [] The values of the Bernstein polynomials at the given value. Remarks The code is adapted from algorithm 1.3 described in the NURBS Book , by L. Piegl and W. Tiller. | Improve this Doc View Source ToBSpline() Creates a BSpline polynomial from the current Bernstein polynomial. Declaration public BSpline ToBSpline() Returns Type Description BSpline The new BSpline polynomial. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IMonoid<T> ISemiGroup<T> IMagma<T> IOneable<T> IMultiplicable<T> IGroupAction<TValue, T>"
  },
  "api/BRIDGES.Arithmetic.Polynomials.Specials.BSpline.html": {
    "href": "api/BRIDGES.Arithmetic.Polynomials.Specials.BSpline.html",
    "title": "Class BSpline | BRIDGES Documentation",
    "keywords": "Class BSpline Class defining a B-Spline polynomial. Inheritance System.Object Polynomial BSpline Implements IAbelianGroup < Polynomial > IGroup < Polynomial > IMonoid < Polynomial > ISemiGroup < Polynomial > ILoop < Polynomial > IQuasiGroup < Polynomial > IMagma < Polynomial > IAddable < Polynomial > ISubtractable < Polynomial > IZeroable < Polynomial > IMonoid < Polynomial > ISemiGroup < Polynomial > IMagma < Polynomial > IOneable < Polynomial > IMultiplicable < Polynomial > IGroupAction < System.Double , Polynomial > Inherited Members Polynomial.Degree Polynomial.Item[Int32] Polynomial.Zero Polynomial.One Polynomial.Derive(Polynomial, Int32) Polynomial.Add(Polynomial, Polynomial) Polynomial.Subtract(Polynomial, Polynomial) Polynomial.Multiply(Polynomial, Polynomial) Polynomial.Multiply(Double, Polynomial) Polynomial.Divide(Polynomial, Double) Polynomial.GetCoefficients() Polynomial.IAddable<Polynomial>.IsAssociative Polynomial.IAddable<Polynomial>.IsCommutative Polynomial.IAddable<Polynomial>.Add(Polynomial) Polynomial.ISubtractable<Polynomial>.Subtract(Polynomial) Polynomial.IGroup<Polynomial>.Opposite() Polynomial.IZeroable<Polynomial>.Zero() Polynomial.IMultiplicable<Polynomial>.IsAssociative Polynomial.IMultiplicable<Polynomial>.IsCommutative Polynomial.IMultiplicable<Polynomial>.Multiply(Polynomial) Polynomial.IOneable<Polynomial>.One() Polynomial.IGroupAction<Double, Polynomial>.Multiply(Double) Polynomial.IGroupAction<Double, Polynomial>.Divide(Double) Namespace : BRIDGES.Arithmetic.Polynomials.Specials Assembly : BRIDGES.dll Syntax public class BSpline : Polynomial, IAbelianGroup<Polynomial>, IGroup<Polynomial>, IMonoid<Polynomial>, ISemiGroup<Polynomial>, ILoop<Polynomial>, IQuasiGroup<Polynomial>, IMagma<Polynomial>, IAddable<Polynomial>, ISubtractable<Polynomial>, IZeroable<Polynomial>, IMonoid<Polynomial>, ISemiGroup<Polynomial>, IMagma<Polynomial>, IOneable<Polynomial>, IMultiplicable<Polynomial>, IGroupAction<double, Polynomial> Constructors | Improve this Doc View Source BSpline(Int32, Int32, Int32, IEnumerable<Double>) Initialises a new instance of BSpline class by defining its index, degree and knot vector. Declaration public BSpline(int spanIndex, int index, int degree, IEnumerable<double> knotVector) Parameters Type Name Description System.Int32 spanIndex Index of knot span on which the current BSpline is defined. System.Int32 index Index of the B-Spline polynomial. System.Int32 degree Degree of the B-Spline polynomial. IEnumerable < System.Double > knotVector Knot vector of the B-Spline polynomial. Fields | Improve this Doc View Source _knotVector Knot vector associated with the current BSpline . Declaration protected List<double> _knotVector Field Value Type Description List < System.Double > Properties | Improve this Doc View Source Index Gets the index of the current BSpline . Declaration public int Index { get; } Property Value Type Description System.Int32 | Improve this Doc View Source KnotVector Gets the knot vector associated with the current BSpline . Declaration public double[] KnotVector { get; } Property Value Type Description System.Double [] | Improve this Doc View Source SpanIndex Gets the index of knot span on which the current BSpline is defined. Declaration public int SpanIndex { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source EvaluateAt(Double) Computes the current BSpline at a given value. Declaration public override double EvaluateAt(double val) Parameters Type Name Description System.Double val Value to evaluate at. Returns Type Description System.Double The computed value of the current BSpline . Overrides Polynomial.EvaluateAt(Double) | Improve this Doc View Source EvaluateAt(Double, Int32, Int32, IList<Double>) Evaluates the BSpline at a given value. Declaration public static double EvaluateAt(double val, int index, int degree, IList<double> knotVector) Parameters Type Name Description System.Double val Value to evaluate at. System.Int32 index Index of the BSpline to evaluate. System.Int32 degree Degree of the BSpline to evaluate. IList < System.Double > knotVector Knot Vector associated with the BSpline to evaluate. Returns Type Description System.Double The value of the BSpline the given value. Remarks The code is adapted from algorithm 2.4 described in the NURBS Book , by L. Piegl and W. Tiller. | Improve this Doc View Source EvaluateBasisAt(Double, Int32, Int32, IList<Double>) Evaluates a BSpline basis at a given value. Declaration public static double[] EvaluateBasisAt(double val, int knotSpanIndex, int degree, IList<double> knotVector) Parameters Type Name Description System.Double val Value to evaluate at. System.Int32 knotSpanIndex Index of knot span containing the value. System.Int32 degree Degree of the BSpline basis. IList < System.Double > knotVector Knot vector of the BSpline basis. Returns Type Description System.Double [] The values of the non-zero BSpline polynomials of the basis, i.e. those ranging from N_{ knotSpanIndex - degree , degree } to N_{ knotSpanIndex , degree }. Remarks The code is adapted from algorithm 2.2 described in the NURBS Book , by L. Piegl and W. Tiller. | Improve this Doc View Source EvaluateBasisDerivativesAt(Double, Int32, Int32, IList<Double>, Int32) Evaluates the BSpline basis' derivatives of a given order, at a given value. Declaration public static double[][] EvaluateBasisDerivativesAt(double val, int knotSpanIndex, int degree, IList<double> knotVector, int order) Parameters Type Name Description System.Double val Value to evaluate at. System.Int32 knotSpanIndex Index of knot span containing the value. System.Int32 degree Initial degree of the BSpline basis. IList < System.Double > knotVector Initial knot vector of the BSpline basis. System.Int32 order Order of the derivatives. Returns Type Description System.Double [][] The values of successive derivatives of the non-zero BSpline polynomial of the basis, i.e. those ranging from N_{ knotSpanIndex - degree , degree } to N_{ knotSpanIndex , degree }. The first index corresponds to the order of derivation, the second to the index of the BSpline polynomial shifted to start from zero. Remarks The code is adapted from algorithm 2.3 described in the NURBS Book , by L. Piegl and W. Tiller. | Improve this Doc View Source EvaluateDerivativesAt(Double, Int32, Int32, IList<Double>, Int32) Evaluates the BSpline derivative of a given order; at a given value. Declaration public static double[] EvaluateDerivativesAt(double val, int index, int degree, IList<double> knotVector, int order) Parameters Type Name Description System.Double val Value to evaluate at. System.Int32 index Index of the BSpline to evaluate. System.Int32 degree Initial degree of the BSpline to evaluate. IList < System.Double > knotVector Initial knot Vector associated with the BSpline to evaluate. System.Int32 order Order of the derivative. Returns Type Description System.Double [] The value of the successive BSpline derivatives at the given value. The index corresponds to the order of derivation. Remarks The code is adapted from algorithm 2.5 described in the NURBS Book , by L. Piegl and W. Tiller. | Improve this Doc View Source FindKnotSpanIndex(Double, Int32, IList<Double>) Identifies the index of the knot span containing a given value, using a binary search. Declaration public static int FindKnotSpanIndex(double val, int degree, IList<double> knotVector) Parameters Type Name Description System.Double val Value to locate in the knot vector. System.Int32 degree Degree of the BSpline basis. IList < System.Double > knotVector Knot vector of the BSpline basis. Returns Type Description System.Int32 The (zero-based) index of the knot span containing the value. Remarks The code is adapted from algorithm 2.1 described in the NURBS Book , by L. Piegl and W. Tiller. | Improve this Doc View Source SetCoefficients(Int32, Int32, Int32, IList<Double>) Sets the coefficients of the current BSpline polynomial. Declaration protected void SetCoefficients(int spanIndex, int index, int degree, IList<double> knotVector) Parameters Type Name Description System.Int32 spanIndex Index of knot span on which the current BSpline is defined. System.Int32 index Index of the BSpline polynomial. System.Int32 degree Degree of the BSpline polynomial. IList < System.Double > knotVector Knot vector of the BSpline polynomial. | Improve this Doc View Source SetKnotVector(IEnumerable<Double>, Int32) Sets the knot vector of the current BSpline polynomial while ensuring its validity. Declaration protected void SetKnotVector(IEnumerable<double> knotVector, int degree) Parameters Type Name Description IEnumerable < System.Double > knotVector Knot vector to set. System.Int32 degree Degree of the B-Spline polynomial. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IMonoid<T> ISemiGroup<T> IMagma<T> IOneable<T> IMultiplicable<T> IGroupAction<TValue, T>"
  },
  "api/BRIDGES.Arithmetic.Polynomials.Specials.html": {
    "href": "api/BRIDGES.Arithmetic.Polynomials.Specials.html",
    "title": "Namespace BRIDGES.Arithmetic.Polynomials.Specials | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Arithmetic.Polynomials.Specials Classes Bernstein Class defining a Bernstein polynomial. BSpline Class defining a B-Spline polynomial."
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge-4.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge-4.html",
    "title": "Class Edge<TPosition, TVertex, TEdge, TFace> | BRIDGES Documentation",
    "keywords": "Class Edge<TPosition, TVertex, TEdge, TFace> Abstract class for an edge in a polyhedral mesh data structure. Inheritance System.Object Edge<TPosition, TVertex, TEdge, TFace> FvEdge<TPosition> HeEdge<TPosition> Implements IEdge <TPosition> IEquatable <TEdge> Namespace : BRIDGES.DataStructures.PolyhedralMeshes.Abstract Assembly : BRIDGES.dll Syntax public abstract class Edge<TPosition, TVertex, TEdge, TFace> : object, IEdge<TPosition> where TPosition : IEquatable<TPosition> where TVertex : Vertex<TPosition, TVertex, TEdge, TFace> where TEdge : Edge<TPosition, TVertex, TEdge, TFace> where TFace : Face<TPosition, TVertex, TEdge, TFace> Type Parameters Name Description TPosition Type for the position of the vertex. TVertex Type of vertex for the mesh. TEdge Type of vertex for the mesh. TFace Type of vertex for the mesh. Properties | Improve this Doc View Source EndVertex Gets the end vertex of the current edge. Declaration public TVertex EndVertex { get; } Property Value Type Description TVertex | Improve this Doc View Source Index Gets the index of the current edge in the mesh. Declaration public int Index { get; } Property Value Type Description System.Int32 | Improve this Doc View Source StartVertex Gets the start vertex of the current edge. Declaration public TVertex StartVertex { get; } Property Value Type Description TVertex Methods | Improve this Doc View Source AdjacentFaces() Identifies the faces around the current edge. Declaration public abstract IReadOnlyList<TFace> AdjacentFaces() Returns Type Description IReadOnlyList <TFace> The list of adjacent faces. An empty list can be returned. | Improve this Doc View Source Equals(TEdge) Declaration public virtual bool Equals(TEdge edge) Parameters Type Name Description TEdge edge Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source IsBoundary() Evaluates whether the edge is on a boundary. Declaration public abstract bool IsBoundary() Returns Type Description System.Boolean true if the edge is on a boundary, false otherwise. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Explicit Interface Implementations | Improve this Doc View Source IEdge<TPosition>.AdjacentFaces() Declaration IReadOnlyList<IFace<TPosition>> IEdge<TPosition>.AdjacentFaces() Returns Type Description IReadOnlyList < IFace <TPosition>> | Improve this Doc View Source IEdge<TPosition>.EndVertex Declaration IVertex<TPosition> IEdge<TPosition>.EndVertex { get; } Returns Type Description IVertex <TPosition> | Improve this Doc View Source IEdge<TPosition>.StartVertex Declaration IVertex<TPosition> IEdge<TPosition>.StartVertex { get; } Returns Type Description IVertex <TPosition> Implements IEdge<TPosition> IEquatable<>"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face-4.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face-4.html",
    "title": "Class Face<TPosition, TVertex, TEdge, TFace> | BRIDGES Documentation",
    "keywords": "Class Face<TPosition, TVertex, TEdge, TFace> Abstract class for a face in a polyhedral mesh data structure. Inheritance System.Object Face<TPosition, TVertex, TEdge, TFace> FvFace<TPosition> HeFace<TPosition> Implements IFace <TPosition> IEquatable <TFace> Namespace : BRIDGES.DataStructures.PolyhedralMeshes.Abstract Assembly : BRIDGES.dll Syntax public abstract class Face<TPosition, TVertex, TEdge, TFace> : object, IFace<TPosition> where TPosition : IEquatable<TPosition> where TVertex : Vertex<TPosition, TVertex, TEdge, TFace> where TEdge : Edge<TPosition, TVertex, TEdge, TFace> where TFace : Face<TPosition, TVertex, TEdge, TFace> Type Parameters Name Description TPosition Type for the position of the vertex. TVertex Type of vertex for the mesh. TEdge Type of vertex for the mesh. TFace Type of vertex for the mesh. Properties | Improve this Doc View Source Index Gets the index of the current face in the mesh. Declaration public int Index { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AdjacentFaces() Identifies the list of faces around the current face. Declaration public abstract IReadOnlyList<TFace> AdjacentFaces() Returns Type Description IReadOnlyList <TFace> The ordered list of faces. An empty list can be returned. | Improve this Doc View Source Equals(TFace) Declaration public virtual bool Equals(TFace face) Parameters Type Name Description TFace face Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source FaceEdges() Identifies the edges around the current face. Declaration public abstract IReadOnlyList<TEdge> FaceEdges() Returns Type Description IReadOnlyList <TEdge> The ordered list of face edges. | Improve this Doc View Source FaceVertices() Identifies the vertices around the current face. Declaration public abstract IReadOnlyList<TVertex> FaceVertices() Returns Type Description IReadOnlyList <TVertex> The ordered list of face vertices. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Explicit Interface Implementations | Improve this Doc View Source IFace<TPosition>.AdjacentFaces() Declaration IReadOnlyList<IFace<TPosition>> IFace<TPosition>.AdjacentFaces() Returns Type Description IReadOnlyList < IFace <TPosition>> | Improve this Doc View Source IFace<TPosition>.FaceEdges() Declaration IReadOnlyList<IEdge<TPosition>> IFace<TPosition>.FaceEdges() Returns Type Description IReadOnlyList < IEdge <TPosition>> | Improve this Doc View Source IFace<TPosition>.FaceVertices() Declaration IReadOnlyList<IVertex<TPosition>> IFace<TPosition>.FaceVertices() Returns Type Description IReadOnlyList < IVertex <TPosition>> Implements IFace<TPosition> IEquatable<>"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.Abstract.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.Abstract.html",
    "title": "Namespace BRIDGES.DataStructures.PolyhedralMeshes.Abstract | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.DataStructures.PolyhedralMeshes.Abstract Classes Edge<TPosition, TVertex, TEdge, TFace> Abstract class for an edge in a polyhedral mesh data structure. Face<TPosition, TVertex, TEdge, TFace> Abstract class for a face in a polyhedral mesh data structure. Mesh<TPosition, TVertex, TEdge, TFace> Abstract class for a polyhedral mesh data structure. Vertex<TPosition, TVertex, TEdge, TFace> Abstract class for a vertex in a polyhedral mesh data structure."
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh-4.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh-4.html",
    "title": "Class Mesh<TPosition, TVertex, TEdge, TFace> | BRIDGES Documentation",
    "keywords": "Class Mesh<TPosition, TVertex, TEdge, TFace> Abstract class for a polyhedral mesh data structure. Inheritance System.Object Mesh<TPosition, TVertex, TEdge, TFace> FvMesh<TPosition> HeMesh<TPosition> Implements IMesh <TPosition> ICloneable Namespace : BRIDGES.DataStructures.PolyhedralMeshes.Abstract Assembly : BRIDGES.dll Syntax public abstract class Mesh<TPosition, TVertex, TEdge, TFace> : object, IMesh<TPosition> where TPosition : IEquatable<TPosition> where TVertex : Vertex<TPosition, TVertex, TEdge, TFace> where TEdge : Edge<TPosition, TVertex, TEdge, TFace> where TFace : Face<TPosition, TVertex, TEdge, TFace> Type Parameters Name Description TPosition Type for the position of the vertex. TVertex Type of vertex for the mesh. TEdge Type of vertex for the mesh. TFace Type of vertex for the mesh. Constructors | Improve this Doc View Source Mesh() Initialises a new instance of the Mesh<TPosition, TVertex, TEdge, TFace> class. Declaration protected Mesh() Properties | Improve this Doc View Source EdgeCount Gets the number of edges in the current mesh. Declaration public abstract int EdgeCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source FaceCount Gets the number of faces in the current mesh. Declaration public abstract int FaceCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source VertexCount Gets the number of vertices in the current mesh. Declaration public abstract int VertexCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AddEdge(Int32, Int32) Adds a new edge to the current mesh. Declaration protected TEdge AddEdge(int startIndex, int endIndex) Parameters Type Name Description System.Int32 startIndex Index of the start vertex for the new edge. System.Int32 endIndex Index of the end vertex for the new edge. Returns Type Description TEdge The new edge if it was added, null otherwise. | Improve this Doc View Source AddFace(TVertex, TVertex, TVertex) Adds a new triangular face to the current mesh. Declaration public TFace AddFace(TVertex vertexA, TVertex vertexB, TVertex vertexC) Parameters Type Name Description TVertex vertexA First vertex for the new face. TVertex vertexB Second vertex for the new face. TVertex vertexC Third vertex for the new face. Returns Type Description TFace The newly created triangular face. | Improve this Doc View Source AddFace(TVertex, TVertex, TVertex, TVertex) Adds a new quadrangular face to the current mesh. Declaration public TFace AddFace(TVertex vertexA, TVertex vertexB, TVertex vertexC, TVertex vertexD) Parameters Type Name Description TVertex vertexA First vertex for the new face. TVertex vertexB Second vertex for the new face. TVertex vertexC Third vertex for the new face. TVertex vertexD Fourth vertex for the new face. Returns Type Description TFace The newly created quadrangular face. | Improve this Doc View Source AddFace(List<TVertex>) Adds a new face to the current mesh from its vertices. Declaration public abstract TFace AddFace(List<TVertex> vertices) Parameters Type Name Description List <TVertex> vertices Ordered list of the face's vertex. Returns Type Description TFace The new face if it was added, null otherwise. | Improve this Doc View Source AddFace(List<Int32>) Adds a new face to the current mesh. Declaration public TFace AddFace(List<int> indices) Parameters Type Name Description List < System.Int32 > indices Ordered list of the face's vertex indices. Returns Type Description TFace The newly created face. | Improve this Doc View Source AddFace(Int32, Int32, Int32) Adds a new triangular face to the current mesh. Declaration public TFace AddFace(int indexA, int indexB, int indexC) Parameters Type Name Description System.Int32 indexA Index of the first vertex for the new face. System.Int32 indexB Index of the second vertex for the new face. System.Int32 indexC Index of the third vertex for the new face. Returns Type Description TFace The newly created triangular face. | Improve this Doc View Source AddFace(Int32, Int32, Int32, Int32) Adds a new quadrangular face to the current mesh. Declaration public TFace AddFace(int indexA, int indexB, int indexC, int indexD) Parameters Type Name Description System.Int32 indexA Index of the first vertex for the new face. System.Int32 indexB Index of the second vertex for the new face. System.Int32 indexC Index of the third vertex for the new face. System.Int32 indexD Index of the fourth vertex for the new face. Returns Type Description TFace The newly created quadrangular face. | Improve this Doc View Source AddVertex(TPosition) Adds a vertex in the mesh from its position. Declaration public abstract TVertex AddVertex(TPosition position) Parameters Type Name Description TPosition position Position of the vertex. Returns Type Description TVertex The new vertex if it was added, null otherwise. | Improve this Doc View Source CleanMesh(Boolean) Cleans the current mesh by reindexing the faces, edges and vertices. Declaration public abstract void CleanMesh(bool cullIsolated = true) Parameters Type Name Description System.Boolean cullIsolated Evaluates whether isolated members should be removed in the process. | Improve this Doc View Source Clone() Creates a new object that is a deep copy of the current instance. Declaration public abstract object Clone() Returns Type Description System.Object The new object that is a deep copy of the current instance. | Improve this Doc View Source EdgeBetween(TVertex, TVertex) Looks for the edge between vertexA and vertexB . Declaration public virtual TEdge EdgeBetween(TVertex vertexA, TVertex vertexB) Parameters Type Name Description TVertex vertexA First end vertex of the edge. TVertex vertexB Second end vertex of the edge. Returns Type Description TEdge The edge if it exists, null otherwise. | Improve this Doc View Source EdgeBetween(Int32, Int32) Looks for the edge between two vertices. Declaration public TEdge EdgeBetween(int indexA, int indexB) Parameters Type Name Description System.Int32 indexA Index of the first end vertex of the edge. System.Int32 indexB Index of the second end vertex of the edge. Returns Type Description TEdge The edge if it exists, null otherwise. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source EraseEdge(TEdge) Erases the edge from the mesh. The mesh may not be manifold after this operation. Declaration public abstract void EraseEdge(TEdge edge) Parameters Type Name Description TEdge edge Edge to erase. | Improve this Doc View Source EraseEdge(Int32) Erases the edge at the given index in the mesh. The mesh may be non-manifold after this operation. Declaration public void EraseEdge(int index) Parameters Type Name Description System.Int32 index Index of the edge to erase. | Improve this Doc View Source EraseFace(TFace) Erases the face from the mesh. The mesh may not be manifold after this operation. Declaration public abstract void EraseFace(TFace face) Parameters Type Name Description TFace face Face to erase. | Improve this Doc View Source EraseFace(Int32) Erases the face at the given index in the mesh. The mesh may be non-manifold after this operation. Declaration public void EraseFace(int index) Parameters Type Name Description System.Int32 index Index of the face to erase. | Improve this Doc View Source EraseVertex(TVertex) Erases the vertex from the mesh. Every reference to this vertex should be deleted before it is erased. Declaration protected abstract void EraseVertex(TVertex vertex) Parameters Type Name Description TVertex vertex The vertex to erase. | Improve this Doc View Source EraseVertex(Int32) Erases the vertex at the given index in the mesh. Every reference to this vertex should be deleted before it is erased. Declaration public void EraseVertex(int index) Parameters Type Name Description System.Int32 index Index of the vertex to erase. | Improve this Doc View Source GetEdge(Int32) Returns the edge at the given index in the mesh. Declaration public abstract TEdge GetEdge(int index) Parameters Type Name Description System.Int32 index Returns Type Description TEdge The edge at the given index in the mesh. | Improve this Doc View Source GetEdges() Returns the list of edges of the current mesh. Declaration public abstract IReadOnlyList<TEdge> GetEdges() Returns Type Description IReadOnlyList <TEdge> List of edges of the mesh. Remarks If some edges were removed from the mesh, the index of the edge in the returned list might not match the edge index in the mesh. The index of the edges in the mesh is accessible through the Index property. | Improve this Doc View Source GetFace(Int32) Returns the face at the given index in the mesh. Declaration public abstract TFace GetFace(int index) Parameters Type Name Description System.Int32 index Returns Type Description TFace The face at the given index in the mesh. | Improve this Doc View Source GetFaces() Returns the list of faces of the current mesh. Declaration public abstract IReadOnlyList<TFace> GetFaces() Returns Type Description IReadOnlyList <TFace> List of faces of the mesh. Remarks If some faces were removed from the mesh, the index of the face in the returned list might not match the face index in the mesh. The index of the faces in the mesh is accessible through the Index property. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source GetVertex(Int32) Returns the vertex at the given index in the mesh. Declaration public abstract TVertex GetVertex(int index) Parameters Type Name Description System.Int32 index Returns Type Description TVertex The vertex at the given index in the mesh. | Improve this Doc View Source GetVertices() Returns the list of vertices of the current mesh. Declaration public abstract IReadOnlyList<TVertex> GetVertices() Returns Type Description IReadOnlyList <TVertex> List of vertices of the mesh. Remarks If some vertices were removed from the mesh, the index of the vertex in the returned list might not match the vertex index in the mesh. The index of the vertices in the mesh is accessible through the Index property. | Improve this Doc View Source RemoveEdge(TEdge) Removes the edge from the mesh by keeping the mesh manifold. Declaration public abstract void RemoveEdge(TEdge edge) Parameters Type Name Description TEdge edge Edge to remove. | Improve this Doc View Source RemoveEdge(Int32) Removes the edge at the given index in the mesh by keeping the mesh manifold. Declaration public void RemoveEdge(int index) Parameters Type Name Description System.Int32 index Index of the edge to remove. | Improve this Doc View Source RemoveFace(TFace) Removes the face from the mesh by keeping the mesh manifold. Declaration public abstract void RemoveFace(TFace face) Parameters Type Name Description TFace face Face to remove. | Improve this Doc View Source RemoveFace(Int32) Removes the face at the given index in the mesh by keeping the mesh manifold. Declaration public void RemoveFace(int index) Parameters Type Name Description System.Int32 index Index of the face to remove. | Improve this Doc View Source RemoveVertex(TVertex) Removes the vertex from the mesh by keeping the mesh manifold. Declaration public abstract void RemoveVertex(TVertex vertex) Parameters Type Name Description TVertex vertex Vertex to remove. | Improve this Doc View Source RemoveVertex(Int32) Removes the vertex at the given index in the mesh by keeping the mesh manifold. Declaration public void RemoveVertex(int index) Parameters Type Name Description System.Int32 index Index of the vertex to remove. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source TryGetEdge(Int32) Returns the edge at the given index in the mesh if it exists, null otherwise. Declaration public abstract TEdge TryGetEdge(int index) Parameters Type Name Description System.Int32 index The index of the edge to look for. Returns Type Description TEdge The edge if it exists, null otherwise. | Improve this Doc View Source TryGetFace(Int32) Returns the face at the given index in the mesh if it exists, null otherwise. Declaration public abstract TFace TryGetFace(int index) Parameters Type Name Description System.Int32 index The index of the face to look for. Returns Type Description TFace The face if it exists, null otherwise. | Improve this Doc View Source TryGetVertex(Int32) Returns the vertex at the given index in the mesh if it exists, null otherwise. Declaration public abstract TVertex TryGetVertex(int index) Parameters Type Name Description System.Int32 index The index of the vertex to look for. Returns Type Description TVertex The vertex if it exists, null otherwise. Explicit Interface Implementations | Improve this Doc View Source IMesh<TPosition>.AddEdge(Int32, Int32) Declaration IEdge<TPosition> IMesh<TPosition>.AddEdge(int startIndex, int endIndex) Parameters Type Name Description System.Int32 startIndex System.Int32 endIndex Returns Type Description IEdge <TPosition> | Improve this Doc View Source IMesh<TPosition>.AddFace(List<Int32>) Declaration IFace<TPosition> IMesh<TPosition>.AddFace(List<int> indices) Parameters Type Name Description List < System.Int32 > indices Returns Type Description IFace <TPosition> | Improve this Doc View Source IMesh<TPosition>.AddFace(Int32, Int32, Int32) Declaration IFace<TPosition> IMesh<TPosition>.AddFace(int indexA, int indexB, int indexC) Parameters Type Name Description System.Int32 indexA System.Int32 indexB System.Int32 indexC Returns Type Description IFace <TPosition> | Improve this Doc View Source IMesh<TPosition>.AddFace(Int32, Int32, Int32, Int32) Declaration IFace<TPosition> IMesh<TPosition>.AddFace(int indexA, int indexB, int indexC, int indexD) Parameters Type Name Description System.Int32 indexA System.Int32 indexB System.Int32 indexC System.Int32 indexD Returns Type Description IFace <TPosition> | Improve this Doc View Source IMesh<TPosition>.AddVertex(TPosition) Declaration IVertex<TPosition> IMesh<TPosition>.AddVertex(TPosition position) Parameters Type Name Description TPosition position Returns Type Description IVertex <TPosition> | Improve this Doc View Source IMesh<TPosition>.EdgeBetween(Int32, Int32) Declaration IEdge<TPosition> IMesh<TPosition>.EdgeBetween(int indexA, int indexB) Parameters Type Name Description System.Int32 indexA System.Int32 indexB Returns Type Description IEdge <TPosition> | Improve this Doc View Source IMesh<TPosition>.GetEdge(Int32) Declaration IEdge<TPosition> IMesh<TPosition>.GetEdge(int index) Parameters Type Name Description System.Int32 index Returns Type Description IEdge <TPosition> | Improve this Doc View Source IMesh<TPosition>.GetEdges() Declaration IReadOnlyList<IEdge<TPosition>> IMesh<TPosition>.GetEdges() Returns Type Description IReadOnlyList < IEdge <TPosition>> | Improve this Doc View Source IMesh<TPosition>.GetFace(Int32) Declaration IFace<TPosition> IMesh<TPosition>.GetFace(int index) Parameters Type Name Description System.Int32 index Returns Type Description IFace <TPosition> | Improve this Doc View Source IMesh<TPosition>.GetFaces() Declaration IReadOnlyList<IFace<TPosition>> IMesh<TPosition>.GetFaces() Returns Type Description IReadOnlyList < IFace <TPosition>> | Improve this Doc View Source IMesh<TPosition>.GetVertex(Int32) Declaration IVertex<TPosition> IMesh<TPosition>.GetVertex(int index) Parameters Type Name Description System.Int32 index Returns Type Description IVertex <TPosition> | Improve this Doc View Source IMesh<TPosition>.GetVertices() Declaration IReadOnlyList<IVertex<TPosition>> IMesh<TPosition>.GetVertices() Returns Type Description IReadOnlyList < IVertex <TPosition>> | Improve this Doc View Source IMesh<TPosition>.TryGetEdge(Int32) Declaration IEdge<TPosition> IMesh<TPosition>.TryGetEdge(int index) Parameters Type Name Description System.Int32 index Returns Type Description IEdge <TPosition> | Improve this Doc View Source IMesh<TPosition>.TryGetFace(Int32) Declaration IFace<TPosition> IMesh<TPosition>.TryGetFace(int index) Parameters Type Name Description System.Int32 index Returns Type Description IFace <TPosition> | Improve this Doc View Source IMesh<TPosition>.TryGetVertex(Int32) Declaration IVertex<TPosition> IMesh<TPosition>.TryGetVertex(int index) Parameters Type Name Description System.Int32 index Returns Type Description IVertex <TPosition> Implements IMesh<TPosition> ICloneable"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex-4.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex-4.html",
    "title": "Class Vertex<TPosition, TVertex, TEdge, TFace> | BRIDGES Documentation",
    "keywords": "Class Vertex<TPosition, TVertex, TEdge, TFace> Abstract class for a vertex in a polyhedral mesh data structure. Inheritance System.Object Vertex<TPosition, TVertex, TEdge, TFace> FvVertex<TPosition> HeVertex<TPosition> Implements IVertex <TPosition> IEquatable <TVertex> Namespace : BRIDGES.DataStructures.PolyhedralMeshes.Abstract Assembly : BRIDGES.dll Syntax public abstract class Vertex<TPosition, TVertex, TEdge, TFace> : object, IVertex<TPosition> where TPosition : IEquatable<TPosition> where TVertex : Vertex<TPosition, TVertex, TEdge, TFace> where TEdge : Edge<TPosition, TVertex, TEdge, TFace> where TFace : Face<TPosition, TVertex, TEdge, TFace> Type Parameters Name Description TPosition Type for the position of the vertex. TVertex Type of vertex for the mesh. TEdge Type of vertex for the mesh. TFace Type of vertex for the mesh. Properties | Improve this Doc View Source Index Gets the index of the current vertex in the mesh. Declaration public int Index { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Position Gets or sets the position of the current vertex. Declaration public TPosition Position { get; set; } Property Value Type Description TPosition Methods | Improve this Doc View Source AdjacentFaces() Identifies the faces around the current vertex. Declaration public abstract IReadOnlyList<TFace> AdjacentFaces() Returns Type Description IReadOnlyList <TFace> The list of adjacent faces. An empty list can be returned. | Improve this Doc View Source ConnectedEdges() Identifies the edges connected to the current vertex. Declaration public abstract IReadOnlyList<TEdge> ConnectedEdges() Returns Type Description IReadOnlyList <TEdge> The list of connected edges. An empty list can be returned. | Improve this Doc View Source Equals(TVertex) Declaration public virtual bool Equals(TVertex vertex) Parameters Type Name Description TVertex vertex Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source IsBoundary() Evaluates whether the vertex is on a boundary. Declaration public abstract bool IsBoundary() Returns Type Description System.Boolean true if the vertex is not connected or if at least one edge is a boundary edge, false otherwise. | Improve this Doc View Source IsConnected() Evaluates whether the vertex is connected to any edge. Declaration public abstract bool IsConnected() Returns Type Description System.Boolean true if the vertex has at least one connected edge, false otherwise. | Improve this Doc View Source NeighbourVertices() Identifies the vertices directly connected to the current vertex with an edge. Declaration public abstract IReadOnlyList<TVertex> NeighbourVertices() Returns Type Description IReadOnlyList <TVertex> The list of connected vertices. An empty list can be returned. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Valence() Determines the number of edges connected to the current vertex. Declaration public abstract int Valence() Returns Type Description System.Int32 The number of edges connected to the current vertex Explicit Interface Implementations | Improve this Doc View Source IVertex<TPosition>.AdjacentFaces() Declaration IReadOnlyList<IFace<TPosition>> IVertex<TPosition>.AdjacentFaces() Returns Type Description IReadOnlyList < IFace <TPosition>> | Improve this Doc View Source IVertex<TPosition>.ConnectedEdges() Declaration IReadOnlyList<IEdge<TPosition>> IVertex<TPosition>.ConnectedEdges() Returns Type Description IReadOnlyList < IEdge <TPosition>> | Improve this Doc View Source IVertex<TPosition>.NeighbourVertices() Declaration IReadOnlyList<IVertex<TPosition>> IVertex<TPosition>.NeighbourVertices() Returns Type Description IReadOnlyList < IVertex <TPosition>> Implements IVertex<TPosition> IEquatable<>"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge-1.html",
    "title": "Class FvEdge<TPosition> | BRIDGES Documentation",
    "keywords": "Class FvEdge<TPosition> Class for an edge in a polyhedral face-vertex mesh data structure. Inheritance System.Object Edge <TPosition, FvVertex <TPosition>, FvEdge <TPosition>, FvFace <TPosition>> FvEdge<TPosition> Implements IEdge <TPosition> IEquatable < FvEdge <TPosition>> Inherited Members Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Index Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.StartVertex Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.EndVertex Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Equals(FvEdge<TPosition>) Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IsBoundary() Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.AdjacentFaces() Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Equals(Object) Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.GetHashCode() Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.ToString() Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IEdge<TPosition>.StartVertex Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IEdge<TPosition>.EndVertex Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IEdge<TPosition>.AdjacentFaces() Namespace : BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh Assembly : BRIDGES.dll Syntax public class FvEdge<TPosition> : Edge<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>, IEdge<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type for the position of the vertex. Methods | Improve this Doc View Source AdjacentFaces() Identifies the faces around the current edge. Declaration public override IReadOnlyList<FvFace<TPosition>> AdjacentFaces() Returns Type Description IReadOnlyList < FvFace <TPosition>> The list of adjacent faces. An empty list can be returned. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.AdjacentFaces() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.GetHashCode() | Improve this Doc View Source IsBoundary() Evaluates whether the edge is on a boundary. Declaration public override bool IsBoundary() Returns Type Description System.Boolean true if the edge is on a boundary, false otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.IsBoundary() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.ToString() Implements IEdge<TPosition> IEquatable<>"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace-1.html",
    "title": "Class FvFace<TPosition> | BRIDGES Documentation",
    "keywords": "Class FvFace<TPosition> Class for a face in a polyhedral face-vertex mesh data structure. Inheritance System.Object Face <TPosition, FvVertex <TPosition>, FvEdge <TPosition>, FvFace <TPosition>> FvFace<TPosition> Implements IFace <TPosition> IEquatable < FvFace <TPosition>> Inherited Members Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Index Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Equals(FvFace<TPosition>) Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.FaceVertices() Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.FaceEdges() Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.AdjacentFaces() Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Equals(Object) Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.GetHashCode() Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.ToString() Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IFace<TPosition>.FaceVertices() Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IFace<TPosition>.FaceEdges() Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IFace<TPosition>.AdjacentFaces() Namespace : BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh Assembly : BRIDGES.dll Syntax public class FvFace<TPosition> : Face<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>, IFace<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type for the position of the vertex. Methods | Improve this Doc View Source AdjacentFaces() Identifies the list of faces around the current face. Declaration public override IReadOnlyList<FvFace<TPosition>> AdjacentFaces() Returns Type Description IReadOnlyList < FvFace <TPosition>> The ordered list of faces. An empty list can be returned. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.AdjacentFaces() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.Equals(System.Object) | Improve this Doc View Source FaceEdges() Identifies the edges around the current face. Declaration public override IReadOnlyList<FvEdge<TPosition>> FaceEdges() Returns Type Description IReadOnlyList < FvEdge <TPosition>> The ordered list of face edges. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.FaceEdges() | Improve this Doc View Source FaceVertices() Identifies the vertices around the current face. Declaration public override IReadOnlyList<FvVertex<TPosition>> FaceVertices() Returns Type Description IReadOnlyList < FvVertex <TPosition>> The ordered list of face vertices. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.FaceVertices() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.ToString() Implements IFace<TPosition> IEquatable<>"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvMesh-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvMesh-1.html",
    "title": "Class FvMesh<TPosition> | BRIDGES Documentation",
    "keywords": "Class FvMesh<TPosition> Class for a polyhedral face-vertex mesh data structure. Inheritance System.Object Mesh <TPosition, FvVertex <TPosition>, FvEdge <TPosition>, FvFace <TPosition>> FvMesh<TPosition> Implements IMesh <TPosition> ICloneable Inherited Members Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.VertexCount Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.EdgeCount Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.FaceCount Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.RemoveVertex(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.EraseVertex(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.AddEdge(Int32, Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.EdgeBetween(Int32, Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.RemoveEdge(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.EraseEdge(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.AddFace(Int32, Int32, Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.AddFace(Int32, Int32, Int32, Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.AddFace(List<Int32>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.AddFace(FvVertex<TPosition>, FvVertex<TPosition>, FvVertex<TPosition>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.AddFace(FvVertex<TPosition>, FvVertex<TPosition>, FvVertex<TPosition>, FvVertex<TPosition>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.RemoveFace(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.EraseFace(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.EdgeBetween(FvVertex<TPosition>, FvVertex<TPosition>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.CleanMesh(Boolean) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Clone() Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.AddVertex(TPosition) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.GetVertex(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.TryGetVertex(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.GetVertices() Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.RemoveVertex(FvVertex<TPosition>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.EraseVertex(FvVertex<TPosition>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.GetEdge(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.TryGetEdge(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.GetEdges() Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.RemoveEdge(FvEdge<TPosition>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.EraseEdge(FvEdge<TPosition>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.AddFace(List<FvVertex<TPosition>>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.GetFace(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.TryGetFace(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.GetFaces() Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.RemoveFace(FvFace<TPosition>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.EraseFace(FvFace<TPosition>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Equals(Object) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.GetHashCode() Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.ToString() Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.AddVertex(TPosition) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.GetVertex(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.TryGetVertex(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.GetVertices() Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.AddEdge(Int32, Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.GetEdge(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.TryGetEdge(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.GetEdges() Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.EdgeBetween(Int32, Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.AddFace(Int32, Int32, Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.AddFace(Int32, Int32, Int32, Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.AddFace(List<Int32>) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.GetFace(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.TryGetFace(Int32) Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IMesh<TPosition>.GetFaces() Namespace : BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh Assembly : BRIDGES.dll Syntax public class FvMesh<TPosition> : Mesh<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>, IMesh<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type for the position of the vertex. Constructors | Improve this Doc View Source FvMesh() Initialises a new instance of the FvMesh<TPosition> class. Declaration public FvMesh() Fields | Improve this Doc View Source _newEdgeIndex Index for a newly created edge. Declaration protected int _newEdgeIndex Field Value Type Description System.Int32 Remarks This may not match with EdgeCount if edges are removed from the mesh. | Improve this Doc View Source _newFaceIndex Index for a newly created face. Declaration protected int _newFaceIndex Field Value Type Description System.Int32 Remarks This may not match with FaceCount if faces are removed from the mesh. | Improve this Doc View Source _newVertexIndex Index for a newly created vertex. Declaration protected int _newVertexIndex Field Value Type Description System.Int32 Remarks This may not match with VertexCount if vertices are removed from the mesh. Properties | Improve this Doc View Source EdgeCount Gets the number of edges in the current mesh. Declaration public override int EdgeCount { get; } Property Value Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.EdgeCount | Improve this Doc View Source FaceCount Gets the number of faces in the current mesh. Declaration public override int FaceCount { get; } Property Value Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.FaceCount | Improve this Doc View Source VertexCount Gets the number of vertices in the current mesh. Declaration public override int VertexCount { get; } Property Value Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.VertexCount Methods | Improve this Doc View Source AddFace(List<FvVertex<TPosition>>) Adds a new face to the current mesh from its vertices. Declaration public override FvFace<TPosition> AddFace(List<FvVertex<TPosition>> vertices) Parameters Type Name Description List < FvVertex <TPosition>> vertices Returns Type Description FvFace <TPosition> The new face if it was added, null otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.AddFace(List<BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>>) | Improve this Doc View Source AddVertex(TPosition) Adds a vertex in the mesh from its position. Declaration public override FvVertex<TPosition> AddVertex(TPosition position) Parameters Type Name Description TPosition position Position of the vertex. Returns Type Description FvVertex <TPosition> The new vertex if it was added, null otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.AddVertex(TPosition) | Improve this Doc View Source CleanMesh(Boolean) Cleans the current mesh by reindexing the faces, edges and vertices. Declaration public override void CleanMesh(bool cullIsolated = true) Parameters Type Name Description System.Boolean cullIsolated Evaluates whether isolated members should be removed in the process. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.CleanMesh(System.Boolean) | Improve this Doc View Source Clone() Creates a new object that is a deep copy of the current instance. Declaration public override object Clone() Returns Type Description System.Object The new object that is a deep copy of the current instance. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.Clone() | Improve this Doc View Source EraseEdge(FvEdge<TPosition>) Erases the edge from the mesh. The mesh may not be manifold after this operation. Declaration public override void EraseEdge(FvEdge<TPosition> edge) Parameters Type Name Description FvEdge <TPosition> edge Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.EraseEdge(BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>) | Improve this Doc View Source EraseFace(FvFace<TPosition>) Erases the face from the mesh. The mesh may not be manifold after this operation. Declaration public override void EraseFace(FvFace<TPosition> face) Parameters Type Name Description FvFace <TPosition> face Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.EraseFace(BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>) | Improve this Doc View Source EraseVertex(FvVertex<TPosition>) Erases the vertex from the mesh. Every reference to this vertex should be deleted before it is erased. Declaration protected override void EraseVertex(FvVertex<TPosition> vertex) Parameters Type Name Description FvVertex <TPosition> vertex Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.EraseVertex(BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>) | Improve this Doc View Source GetEdge(Int32) Returns the edge at the given index in the mesh. Declaration public override FvEdge<TPosition> GetEdge(int index) Parameters Type Name Description System.Int32 index Returns Type Description FvEdge <TPosition> The edge at the given index in the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.GetEdge(System.Int32) | Improve this Doc View Source GetEdges() Returns the list of edges of the current mesh. Declaration public override IReadOnlyList<FvEdge<TPosition>> GetEdges() Returns Type Description IReadOnlyList < FvEdge <TPosition>> List of edges of the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.GetEdges() Remarks If some edges were removed from the mesh, the index of the edge in the returned list might not match the edge index in the mesh. The index of the edges in the mesh is accessible through the Index property. | Improve this Doc View Source GetFace(Int32) Returns the face at the given index in the mesh. Declaration public override FvFace<TPosition> GetFace(int index) Parameters Type Name Description System.Int32 index Returns Type Description FvFace <TPosition> The face at the given index in the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.GetFace(System.Int32) | Improve this Doc View Source GetFaces() Returns the list of faces of the current mesh. Declaration public override IReadOnlyList<FvFace<TPosition>> GetFaces() Returns Type Description IReadOnlyList < FvFace <TPosition>> List of faces of the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.GetFaces() Remarks If some faces were removed from the mesh, the index of the face in the returned list might not match the face index in the mesh. The index of the faces in the mesh is accessible through the Index property. | Improve this Doc View Source GetVertex(Int32) Returns the vertex at the given index in the mesh. Declaration public override FvVertex<TPosition> GetVertex(int index) Parameters Type Name Description System.Int32 index Returns Type Description FvVertex <TPosition> The vertex at the given index in the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.GetVertex(System.Int32) | Improve this Doc View Source GetVertices() Returns the list of vertices of the current mesh. Declaration public override IReadOnlyList<FvVertex<TPosition>> GetVertices() Returns Type Description IReadOnlyList < FvVertex <TPosition>> List of vertices of the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.GetVertices() Remarks If some vertices were removed from the mesh, the index of the vertex in the returned list might not match the vertex index in the mesh. The index of the vertices in the mesh is accessible through the Index property. | Improve this Doc View Source RemoveEdge(FvEdge<TPosition>) Removes the edge from the mesh by keeping the mesh manifold. Declaration public override void RemoveEdge(FvEdge<TPosition> edge) Parameters Type Name Description FvEdge <TPosition> edge Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.RemoveEdge(BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>) | Improve this Doc View Source RemoveFace(FvFace<TPosition>) Removes the face from the mesh by keeping the mesh manifold. Declaration public override void RemoveFace(FvFace<TPosition> face) Parameters Type Name Description FvFace <TPosition> face Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.RemoveFace(BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>) | Improve this Doc View Source RemoveVertex(FvVertex<TPosition>) Removes the vertex from the mesh by keeping the mesh manifold. Declaration public override void RemoveVertex(FvVertex<TPosition> vertex) Parameters Type Name Description FvVertex <TPosition> vertex Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.RemoveVertex(BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>) | Improve this Doc View Source ToHalfedgeMesh() Creates a halfedge mesh from the current face-vertex mesh. Declaration public HeMesh<TPosition> ToHalfedgeMesh() Returns Type Description HeMesh <TPosition> Halfedge mesh which represents the topology and geometry of the current face-vertex mesh. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.ToString() | Improve this Doc View Source TryGetEdge(Int32) Returns the edge at the given index in the mesh if it exists, null otherwise. Declaration public override FvEdge<TPosition> TryGetEdge(int index) Parameters Type Name Description System.Int32 index The index of the edge to look for. Returns Type Description FvEdge <TPosition> The edge if it exists, null otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.TryGetEdge(System.Int32) | Improve this Doc View Source TryGetFace(Int32) Returns the face at the given index in the mesh if it exists, null otherwise. Declaration public override FvFace<TPosition> TryGetFace(int index) Parameters Type Name Description System.Int32 index The index of the face to look for. Returns Type Description FvFace <TPosition> The face if it exists, null otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.TryGetFace(System.Int32) | Improve this Doc View Source TryGetVertex(Int32) Returns the vertex at the given index in the mesh if it exists, null otherwise. Declaration public override FvVertex<TPosition> TryGetVertex(int index) Parameters Type Name Description System.Int32 index The index of the vertex to look for. Returns Type Description FvVertex <TPosition> The vertex if it exists, null otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.TryGetVertex(System.Int32) Implements IMesh<TPosition> ICloneable"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex-1.html",
    "title": "Class FvVertex<TPosition> | BRIDGES Documentation",
    "keywords": "Class FvVertex<TPosition> Class for a vertex in a polyhedral face-vertex mesh data structure. Inheritance System.Object Vertex <TPosition, FvVertex <TPosition>, FvEdge <TPosition>, FvFace <TPosition>> FvVertex<TPosition> Implements IVertex <TPosition> IEquatable < FvVertex <TPosition>> Inherited Members Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Index Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Position Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Equals(FvVertex<TPosition>) Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IsBoundary() Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IsConnected() Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Valence() Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.NeighbourVertices() Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.ConnectedEdges() Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.AdjacentFaces() Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.Equals(Object) Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.GetHashCode() Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.ToString() Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IVertex<TPosition>.NeighbourVertices() Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IVertex<TPosition>.ConnectedEdges() Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>.IVertex<TPosition>.AdjacentFaces() Namespace : BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh Assembly : BRIDGES.dll Syntax public class FvVertex<TPosition> : Vertex<TPosition, FvVertex<TPosition>, FvEdge<TPosition>, FvFace<TPosition>>, IVertex<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type for the position of the vertex. Methods | Improve this Doc View Source AdjacentFaces() Identifies the faces around the current vertex. Declaration public override IReadOnlyList<FvFace<TPosition>> AdjacentFaces() Returns Type Description IReadOnlyList < FvFace <TPosition>> The list of adjacent faces. An empty list can be returned. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.AdjacentFaces() | Improve this Doc View Source ConnectedEdges() Identifies the edges connected to the current vertex. Declaration public override IReadOnlyList<FvEdge<TPosition>> ConnectedEdges() Returns Type Description IReadOnlyList < FvEdge <TPosition>> The list of connected edges. An empty list can be returned. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.ConnectedEdges() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.GetHashCode() | Improve this Doc View Source IsBoundary() Evaluates whether the vertex is on a boundary. Declaration public override bool IsBoundary() Returns Type Description System.Boolean true if the vertex is not connected or if at least one edge is a boundary edge, false otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.IsBoundary() | Improve this Doc View Source IsConnected() Evaluates whether the vertex is connected to any edge. Declaration public override bool IsConnected() Returns Type Description System.Boolean true if the vertex has at least one connected edge, false otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.IsConnected() | Improve this Doc View Source NeighbourVertices() Identifies the vertices directly connected to the current vertex with an edge. Declaration public override IReadOnlyList<FvVertex<TPosition>> NeighbourVertices() Returns Type Description IReadOnlyList < FvVertex <TPosition>> The list of connected vertices. An empty list can be returned. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.NeighbourVertices() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.ToString() | Improve this Doc View Source Valence() Determines the number of edges connected to the current vertex. Declaration public override int Valence() Returns Type Description System.Int32 The number of edges connected to the current vertex Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.FvFace<TPosition>>.Valence() Implements IVertex<TPosition> IEquatable<>"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh.html",
    "title": "Namespace BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.DataStructures.PolyhedralMeshes.FaceVertexMesh Classes FvEdge<TPosition> Class for an edge in a polyhedral face-vertex mesh data structure. FvFace<TPosition> Class for a face in a polyhedral face-vertex mesh data structure. FvMesh<TPosition> Class for a polyhedral face-vertex mesh data structure. FvVertex<TPosition> Class for a vertex in a polyhedral face-vertex mesh data structure."
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge-1.html",
    "title": "Class HeEdge<TPosition> | BRIDGES Documentation",
    "keywords": "Class HeEdge<TPosition> Class for an edge in a polyhedral halfedge mesh data structure. Inheritance System.Object Edge <TPosition, HeVertex <TPosition>, HeEdge <TPosition>, HeFace <TPosition>> HeEdge<TPosition> Implements IEdge <TPosition> IEquatable < HeEdge <TPosition>> Inherited Members Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Index Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.StartVertex Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.EndVertex Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Equals(HeEdge<TPosition>) Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IsBoundary() Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.AdjacentFaces() Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Equals(Object) Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.GetHashCode() Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.ToString() Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IEdge<TPosition>.StartVertex Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IEdge<TPosition>.EndVertex Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IEdge<TPosition>.AdjacentFaces() Namespace : BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh Assembly : BRIDGES.dll Syntax public class HeEdge<TPosition> : Edge<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>, IEdge<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type for the position of the vertex. Remarks In a polyhedral halfedge mesh data structure, edges are represented by the halfedge whose indices are pair. Edges have the same behaviour as in other polyhedral mesh data structures but each edge (with index i) can be mapped to a pair of halfedge (with indices 2i and 2i+1). Methods | Improve this Doc View Source AdjacentFaces() Identifies the faces around the current edge. Declaration public override IReadOnlyList<HeFace<TPosition>> AdjacentFaces() Returns Type Description IReadOnlyList < HeFace <TPosition>> The list of adjacent faces. An empty list can be returned. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.AdjacentFaces() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.GetHashCode() | Improve this Doc View Source IsBoundary() Evaluates whether the edge is on a boundary. Declaration public override bool IsBoundary() Returns Type Description System.Boolean true if the edge is on a boundary, false otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.IsBoundary() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Edge<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.ToString() Implements IEdge<TPosition> IEquatable<>"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace-1.html",
    "title": "Class HeFace<TPosition> | BRIDGES Documentation",
    "keywords": "Class HeFace<TPosition> Class for a face in a polyhedral halfedge mesh data structure. Inheritance System.Object Face <TPosition, HeVertex <TPosition>, HeEdge <TPosition>, HeFace <TPosition>> HeFace<TPosition> Implements IFace <TPosition> IEquatable < HeFace <TPosition>> Inherited Members Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Index Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Equals(HeFace<TPosition>) Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.FaceVertices() Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.FaceEdges() Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.AdjacentFaces() Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Equals(Object) Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.GetHashCode() Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.ToString() Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IFace<TPosition>.FaceVertices() Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IFace<TPosition>.FaceEdges() Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IFace<TPosition>.AdjacentFaces() Namespace : BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh Assembly : BRIDGES.dll Syntax public class HeFace<TPosition> : Face<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>, IFace<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type for the position of the vertex. Properties | Improve this Doc View Source FirstHalfedge Gets a halfedge around the current face. Declaration public HeHalfedge<TPosition> FirstHalfedge { get; } Property Value Type Description HeHalfedge <TPosition> Remarks This shall never be null . Methods | Improve this Doc View Source AdjacentFaces() Identifies the list of faces around the current face. Declaration public override IReadOnlyList<HeFace<TPosition>> AdjacentFaces() Returns Type Description IReadOnlyList < HeFace <TPosition>> The ordered list of faces. An empty list can be returned. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.AdjacentFaces() | Improve this Doc View Source Equals(HeFace<TPosition>) Declaration public override bool Equals(HeFace<TPosition> face) Parameters Type Name Description HeFace <TPosition> face Returns Type Description System.Boolean Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.Equals(BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.Equals(System.Object) | Improve this Doc View Source FaceEdges() Identifies the edges around the current face. Declaration public override IReadOnlyList<HeEdge<TPosition>> FaceEdges() Returns Type Description IReadOnlyList < HeEdge <TPosition>> The ordered list of face edges. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.FaceEdges() | Improve this Doc View Source FaceHalfedges() Identifies the halfedges around the current face. Declaration public IReadOnlyList<HeHalfedge<TPosition>> FaceHalfedges() Returns Type Description IReadOnlyList < HeHalfedge <TPosition>> The ordered list of face halfedges. | Improve this Doc View Source FaceVertices() Identifies the vertices around the current face. Declaration public override IReadOnlyList<HeVertex<TPosition>> FaceVertices() Returns Type Description IReadOnlyList < HeVertex <TPosition>> The ordered list of face vertices. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.FaceVertices() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Face<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.ToString() Implements IFace<TPosition> IEquatable<>"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeHalfedge-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeHalfedge-1.html",
    "title": "Class HeHalfedge<TPosition> | BRIDGES Documentation",
    "keywords": "Class HeHalfedge<TPosition> Class for a halfedge in a polyhedral halfedge mesh data structure. Inheritance System.Object HeHalfedge<TPosition> Namespace : BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh Assembly : BRIDGES.dll Syntax public class HeHalfedge<TPosition> : IEquatable<HeHalfedge<TPosition>> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type for the position of the vertex. Properties | Improve this Doc View Source AdjacentFace Gets the adjacent face of the current halfedge. Declaration public HeFace<TPosition> AdjacentFace { get; } Property Value Type Description HeFace <TPosition> | Improve this Doc View Source EndVertex Gets the end vertex of the current edge. Declaration public HeVertex<TPosition> EndVertex { get; } Property Value Type Description HeVertex <TPosition> | Improve this Doc View Source Index Gets the index of the current edge in the mesh. Declaration public int Index { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NextHalfedge Gets the next halfedge of the current halfedge. Declaration public HeHalfedge<TPosition> NextHalfedge { get; } Property Value Type Description HeHalfedge <TPosition> | Improve this Doc View Source PairHalfedge Gets the pair halfedge of the current halfedge. Declaration public HeHalfedge<TPosition> PairHalfedge { get; } Property Value Type Description HeHalfedge <TPosition> | Improve this Doc View Source PrevHalfedge Gets the previous halfedge of the current halfedge. Declaration public HeHalfedge<TPosition> PrevHalfedge { get; } Property Value Type Description HeHalfedge <TPosition> | Improve this Doc View Source StartVertex Gets the start vertex of the current edge. Declaration public HeVertex<TPosition> StartVertex { get; } Property Value Type Description HeVertex <TPosition> Methods | Improve this Doc View Source Equals(HeHalfedge<TPosition>) Declaration public bool Equals(HeHalfedge<TPosition> halfedge) Parameters Type Name Description HeHalfedge <TPosition> halfedge Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetEdge() Identifies the edge representing the current halfedge and its pair. It is the edge whose index is half the current halfedge's index (rounded towards zero). Declaration public HeEdge<TPosition> GetEdge() Returns Type Description HeEdge <TPosition> The edge representing the current halfedge. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source IsBoundary() Evaluates whether the halfedge is on a boundary. Declaration public bool IsBoundary() Returns Type Description System.Boolean true if the halfedge is on a boundary, false otherwise. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeMesh-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeMesh-1.html",
    "title": "Class HeMesh<TPosition> | BRIDGES Documentation",
    "keywords": "Class HeMesh<TPosition> Class for a polyhedral halfedge mesh data structure. Inheritance System.Object Mesh <TPosition, HeVertex <TPosition>, HeEdge <TPosition>, HeFace <TPosition>> HeMesh<TPosition> Implements IMesh <TPosition> ICloneable Inherited Members Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.VertexCount Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.EdgeCount Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.FaceCount Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.RemoveVertex(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.EraseVertex(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.AddEdge(Int32, Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.EdgeBetween(Int32, Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.RemoveEdge(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.EraseEdge(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.AddFace(Int32, Int32, Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.AddFace(Int32, Int32, Int32, Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.AddFace(List<Int32>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.AddFace(HeVertex<TPosition>, HeVertex<TPosition>, HeVertex<TPosition>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.AddFace(HeVertex<TPosition>, HeVertex<TPosition>, HeVertex<TPosition>, HeVertex<TPosition>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.RemoveFace(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.EraseFace(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.EdgeBetween(HeVertex<TPosition>, HeVertex<TPosition>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.CleanMesh(Boolean) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Clone() Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.AddVertex(TPosition) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.GetVertex(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.TryGetVertex(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.GetVertices() Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.RemoveVertex(HeVertex<TPosition>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.EraseVertex(HeVertex<TPosition>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.GetEdge(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.TryGetEdge(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.GetEdges() Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.RemoveEdge(HeEdge<TPosition>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.EraseEdge(HeEdge<TPosition>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.AddFace(List<HeVertex<TPosition>>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.GetFace(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.TryGetFace(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.GetFaces() Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.RemoveFace(HeFace<TPosition>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.EraseFace(HeFace<TPosition>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Equals(Object) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.GetHashCode() Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.ToString() Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.AddVertex(TPosition) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.GetVertex(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.TryGetVertex(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.GetVertices() Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.AddEdge(Int32, Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.GetEdge(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.TryGetEdge(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.GetEdges() Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.EdgeBetween(Int32, Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.AddFace(Int32, Int32, Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.AddFace(Int32, Int32, Int32, Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.AddFace(List<Int32>) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.GetFace(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.TryGetFace(Int32) Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IMesh<TPosition>.GetFaces() Namespace : BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh Assembly : BRIDGES.dll Syntax public class HeMesh<TPosition> : Mesh<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>, IMesh<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type for the position of the vertex. Constructors | Improve this Doc View Source HeMesh() Initialises a new instance of the HeMesh<TPosition> class. Declaration public HeMesh() Fields | Improve this Doc View Source _faces Dictionary containing the HeFace<TPosition> of the current HeMesh<TPosition> . Declaration protected Dictionary<int, HeFace<TPosition>> _faces Field Value Type Description Dictionary < System.Int32 , HeFace <TPosition>> Remarks Key : Index of the HeFace<TPosition> ; Value : Corresponding HeFace<TPosition> . | Improve this Doc View Source _halfedges Dictionary containing the HeEdge<TPosition> of the current HeMesh<TPosition> . Declaration protected Dictionary<int, HeHalfedge<TPosition>> _halfedges Field Value Type Description Dictionary < System.Int32 , HeHalfedge <TPosition>> Remarks Key : Index of the HeEdge<TPosition> ; Value : Corresponding HeEdge<TPosition> . | Improve this Doc View Source _newFaceIndex Index for a newly created face. Declaration protected int _newFaceIndex Field Value Type Description System.Int32 Remarks This may not match with FaceCount if faces are removed from the mesh. | Improve this Doc View Source _newHalfedgeIndex Index for a newly created edge. Declaration protected int _newHalfedgeIndex Field Value Type Description System.Int32 Remarks This may not match with EdgeCount if edges are removed from the mesh. | Improve this Doc View Source _newVertexIndex Index for a newly created vertex. Declaration protected int _newVertexIndex Field Value Type Description System.Int32 Remarks This may not match with VertexCount if vertices are removed from the mesh. | Improve this Doc View Source _vertices Dictionary containing the HeVertex<TPosition> of the current HeMesh<TPosition> . Declaration protected Dictionary<int, HeVertex<TPosition>> _vertices Field Value Type Description Dictionary < System.Int32 , HeVertex <TPosition>> Remarks Key : Index of the HeVertex<TPosition> ; Value : Corresponding HeVertex<TPosition> . Properties | Improve this Doc View Source EdgeCount Gets the number of edges in the current mesh. Declaration public override int EdgeCount { get; } Property Value Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.EdgeCount | Improve this Doc View Source FaceCount Gets the number of faces in the current mesh. Declaration public override int FaceCount { get; } Property Value Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.FaceCount | Improve this Doc View Source HalfedgeCount Declaration public int HalfedgeCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source VertexCount Gets the number of vertices in the current mesh. Declaration public override int VertexCount { get; } Property Value Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.VertexCount Methods | Improve this Doc View Source AddFace(List<HeVertex<TPosition>>) Adds a new face to the current mesh from its vertices. Declaration public override HeFace<TPosition> AddFace(List<HeVertex<TPosition>> vertices) Parameters Type Name Description List < HeVertex <TPosition>> vertices Returns Type Description HeFace <TPosition> The new face if it was added, null otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.AddFace(List<BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>>) | Improve this Doc View Source AddVertex(TPosition) Adds a vertex in the mesh from its position. Declaration public override HeVertex<TPosition> AddVertex(TPosition position) Parameters Type Name Description TPosition position Position of the vertex. Returns Type Description HeVertex <TPosition> The new vertex if it was added, null otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.AddVertex(TPosition) | Improve this Doc View Source CleanMesh(Boolean) Cleans the current mesh by reindexing the faces, edges and vertices. Declaration public override void CleanMesh(bool cullIsolated = true) Parameters Type Name Description System.Boolean cullIsolated Evaluates whether isolated members should be removed in the process. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.CleanMesh(System.Boolean) | Improve this Doc View Source Clone() Creates a new object that is a deep copy of the current instance. Declaration public override object Clone() Returns Type Description System.Object The new object that is a deep copy of the current instance. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.Clone() | Improve this Doc View Source EdgeBetween(HeVertex<TPosition>, HeVertex<TPosition>) Looks for the edge between vertexA and vertexB . Declaration public override HeEdge<TPosition> EdgeBetween(HeVertex<TPosition> vertexA, HeVertex<TPosition> vertexB) Parameters Type Name Description HeVertex <TPosition> vertexA HeVertex <TPosition> vertexB Returns Type Description HeEdge <TPosition> The edge if it exists, null otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.EdgeBetween(BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>) | Improve this Doc View Source EraseEdge(HeEdge<TPosition>) Erases the edge from the mesh. The mesh may not be manifold after this operation. Declaration public override void EraseEdge(HeEdge<TPosition> edge) Parameters Type Name Description HeEdge <TPosition> edge Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.EraseEdge(BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>) | Improve this Doc View Source EraseFace(HeFace<TPosition>) Erases the face from the mesh. The mesh may not be manifold after this operation. Declaration public override void EraseFace(HeFace<TPosition> face) Parameters Type Name Description HeFace <TPosition> face Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.EraseFace(BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>) | Improve this Doc View Source EraseHalfedge(HeHalfedge<TPosition>) Erases any reference to the halfedge and its pair halfedge, then delete them from the mesh. Declaration public void EraseHalfedge(HeHalfedge<TPosition> halfedge) Parameters Type Name Description HeHalfedge <TPosition> halfedge The halfedge to erase. | Improve this Doc View Source EraseVertex(HeVertex<TPosition>) Erases the vertex from the mesh. Every reference to this vertex should be deleted before it is erased. Declaration protected override void EraseVertex(HeVertex<TPosition> vertex) Parameters Type Name Description HeVertex <TPosition> vertex Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.EraseVertex(BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>) | Improve this Doc View Source GetEdge(Int32) Returns the edge at the given index in the mesh. Declaration public override HeEdge<TPosition> GetEdge(int index) Parameters Type Name Description System.Int32 index Returns Type Description HeEdge <TPosition> The edge at the given index in the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.GetEdge(System.Int32) | Improve this Doc View Source GetEdges() Returns the list of edges of the current mesh. Declaration public override IReadOnlyList<HeEdge<TPosition>> GetEdges() Returns Type Description IReadOnlyList < HeEdge <TPosition>> List of edges of the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.GetEdges() Remarks If some edges were removed from the mesh, the index of the edge in the returned list might not match the edge index in the mesh. The index of the edges in the mesh is accessible through the Index property. | Improve this Doc View Source GetFace(Int32) Returns the face at the given index in the mesh. Declaration public override HeFace<TPosition> GetFace(int index) Parameters Type Name Description System.Int32 index Returns Type Description HeFace <TPosition> The face at the given index in the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.GetFace(System.Int32) | Improve this Doc View Source GetFaces() Returns the list of faces of the current mesh. Declaration public override IReadOnlyList<HeFace<TPosition>> GetFaces() Returns Type Description IReadOnlyList < HeFace <TPosition>> List of faces of the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.GetFaces() Remarks If some faces were removed from the mesh, the index of the face in the returned list might not match the face index in the mesh. The index of the faces in the mesh is accessible through the Index property. | Improve this Doc View Source GetHalfedge(Int32) Returns the halfedge at the given index in the mesh. Declaration public HeHalfedge<TPosition> GetHalfedge(int index) Parameters Type Name Description System.Int32 index Returns Type Description HeHalfedge <TPosition> The hlafedge at the given index in the mesh. | Improve this Doc View Source GetHalfedges() Returns the list of halfedges of the current mesh. Declaration public IReadOnlyList<HeHalfedge<TPosition>> GetHalfedges() Returns Type Description IReadOnlyList < HeHalfedge <TPosition>> List of edges of the mesh. Remarks If some halfedges were removed from the mesh, the index of the halfedge in the returned list might not match the halfedge index in the mesh. The index of the halfedges in the mesh is accessible through the Index property. | Improve this Doc View Source GetVertex(Int32) Returns the vertex at the given index in the mesh. Declaration public override HeVertex<TPosition> GetVertex(int index) Parameters Type Name Description System.Int32 index Returns Type Description HeVertex <TPosition> The vertex at the given index in the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.GetVertex(System.Int32) | Improve this Doc View Source GetVertices() Returns the list of vertices of the current mesh. Declaration public override IReadOnlyList<HeVertex<TPosition>> GetVertices() Returns Type Description IReadOnlyList < HeVertex <TPosition>> List of vertices of the mesh. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.GetVertices() Remarks If some vertices were removed from the mesh, the index of the vertex in the returned list might not match the vertex index in the mesh. The index of the vertices in the mesh is accessible through the Index property. | Improve this Doc View Source HalfedgeBetween(HeVertex<TPosition>, HeVertex<TPosition>) Looks for the halfedge starting at startVertex and ending at endVertex . Declaration public HeHalfedge<TPosition> HalfedgeBetween(HeVertex<TPosition> startVertex, HeVertex<TPosition> endVertex) Parameters Type Name Description HeVertex <TPosition> startVertex Start vertex of the halfedge. HeVertex <TPosition> endVertex End vertex of the halfedge. Returns Type Description HeHalfedge <TPosition> The halfedge if it exists, null otherwise. | Improve this Doc View Source RemoveEdge(HeEdge<TPosition>) Removes the edge from the mesh by keeping the mesh manifold. Declaration public override void RemoveEdge(HeEdge<TPosition> edge) Parameters Type Name Description HeEdge <TPosition> edge Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.RemoveEdge(BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>) | Improve this Doc View Source RemoveFace(HeFace<TPosition>) Removes the face from the mesh by keeping the mesh manifold. Declaration public override void RemoveFace(HeFace<TPosition> face) Parameters Type Name Description HeFace <TPosition> face Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.RemoveFace(BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>) | Improve this Doc View Source RemoveHalfedge(HeHalfedge<TPosition>) Removes the halfedge and its pair halfedge by keeping the mesh manifold. Declaration public void RemoveHalfedge(HeHalfedge<TPosition> halfedge) Parameters Type Name Description HeHalfedge <TPosition> halfedge The halfedge to remove. | Improve this Doc View Source RemoveVertex(HeVertex<TPosition>) Removes the vertex from the mesh by keeping the mesh manifold. Declaration public override void RemoveVertex(HeVertex<TPosition> vertex) Parameters Type Name Description HeVertex <TPosition> vertex Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.RemoveVertex(BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>) | Improve this Doc View Source ToFaceVertexMesh() Creates a face-vertex mesh from the current halfedge mesh. Declaration public FvMesh<TPosition> ToFaceVertexMesh() Returns Type Description FvMesh <TPosition> Face-vertex mesh which represents the topology and geometry of the current halfedge mesh. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.ToString() | Improve this Doc View Source TryGetEdge(Int32) Returns the edge at the given index in the mesh if it exists, null otherwise. Declaration public override HeEdge<TPosition> TryGetEdge(int index) Parameters Type Name Description System.Int32 index The index of the edge to look for. Returns Type Description HeEdge <TPosition> The edge if it exists, null otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.TryGetEdge(System.Int32) | Improve this Doc View Source TryGetFace(Int32) Returns the face at the given index in the mesh if it exists, null otherwise. Declaration public override HeFace<TPosition> TryGetFace(int index) Parameters Type Name Description System.Int32 index The index of the face to look for. Returns Type Description HeFace <TPosition> The face if it exists, null otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.TryGetFace(System.Int32) | Improve this Doc View Source TryGetHalfedge(Int32) Returns the halfedge at the given index in the mesh if it exists, null otherwise. Declaration public HeHalfedge<TPosition> TryGetHalfedge(int index) Parameters Type Name Description System.Int32 index The index of the halfedge to look for. Returns Type Description HeHalfedge <TPosition> The halfedge if it exists, null otherwise. | Improve this Doc View Source TryGetVertex(Int32) Returns the vertex at the given index in the mesh if it exists, null otherwise. Declaration public override HeVertex<TPosition> TryGetVertex(int index) Parameters Type Name Description System.Int32 index The index of the vertex to look for. Returns Type Description HeVertex <TPosition> The vertex if it exists, null otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Mesh<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.TryGetVertex(System.Int32) Implements IMesh<TPosition> ICloneable"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex-1.html",
    "title": "Class HeVertex<TPosition> | BRIDGES Documentation",
    "keywords": "Class HeVertex<TPosition> Class for a vertex in a polyhedral halfedge mesh data structure. Inheritance System.Object Vertex <TPosition, HeVertex <TPosition>, HeEdge <TPosition>, HeFace <TPosition>> HeVertex<TPosition> Implements IVertex <TPosition> IEquatable < HeVertex <TPosition>> Inherited Members Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Index Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Position Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Equals(HeVertex<TPosition>) Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IsBoundary() Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IsConnected() Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Valence() Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.NeighbourVertices() Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.ConnectedEdges() Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.AdjacentFaces() Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.Equals(Object) Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.GetHashCode() Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.ToString() Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IVertex<TPosition>.NeighbourVertices() Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IVertex<TPosition>.ConnectedEdges() Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>.IVertex<TPosition>.AdjacentFaces() Namespace : BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh Assembly : BRIDGES.dll Syntax public class HeVertex<TPosition> : Vertex<TPosition, HeVertex<TPosition>, HeEdge<TPosition>, HeFace<TPosition>>, IVertex<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type for the position of the vertex. Properties | Improve this Doc View Source OutgoingHalfedge An outgoing halfedge of the current vertex. Declaration public HeHalfedge<TPosition> OutgoingHalfedge { get; } Property Value Type Description HeHalfedge <TPosition> Remarks If the current vertex is on the boundary, the outgoing halfedge must be the boundary one. Methods | Improve this Doc View Source AdjacentFaces() Identifies the faces around the current vertex. Declaration public override IReadOnlyList<HeFace<TPosition>> AdjacentFaces() Returns Type Description IReadOnlyList < HeFace <TPosition>> The list of adjacent faces. An empty list can be returned. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.AdjacentFaces() | Improve this Doc View Source ConnectedEdges() Identifies the edges connected to the current vertex. Declaration public override IReadOnlyList<HeEdge<TPosition>> ConnectedEdges() Returns Type Description IReadOnlyList < HeEdge <TPosition>> The list of connected edges. An empty list can be returned. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.ConnectedEdges() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.GetHashCode() | Improve this Doc View Source IncomingHalfedges() Identifies the halfedges whose end is the current vertex. Declaration public IReadOnlyList<HeHalfedge<TPosition>> IncomingHalfedges() Returns Type Description IReadOnlyList < HeHalfedge <TPosition>> The list of incomming halfedges. An empty list can be returned. | Improve this Doc View Source IsBoundary() Evaluates whether the vertex is on a boundary. Declaration public override bool IsBoundary() Returns Type Description System.Boolean true if the vertex is not connected or if at least one edge is a boundary edge, false otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.IsBoundary() | Improve this Doc View Source IsConnected() Evaluates whether the vertex is connected to any edge. Declaration public override bool IsConnected() Returns Type Description System.Boolean true if the vertex has at least one connected edge, false otherwise. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.IsConnected() | Improve this Doc View Source NeighbourVertices() Identifies the vertices directly connected to the current vertex with an edge. Declaration public override IReadOnlyList<HeVertex<TPosition>> NeighbourVertices() Returns Type Description IReadOnlyList < HeVertex <TPosition>> The list of connected vertices. An empty list can be returned. Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.NeighbourVertices() | Improve this Doc View Source OutgoingHalfedges() Identifies the halfedges whose start is the current vertex. Declaration public IReadOnlyList<HeHalfedge<TPosition>> OutgoingHalfedges() Returns Type Description IReadOnlyList < HeHalfedge <TPosition>> The list of outgoing halfedges. An empty list can be returned. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.ToString() | Improve this Doc View Source Valence() Determines the number of edges connected to the current vertex. Declaration public override int Valence() Returns Type Description System.Int32 The number of edges connected to the current vertex Overrides BRIDGES.DataStructures.PolyhedralMeshes.Abstract.Vertex<TPosition, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeVertex<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeEdge<TPosition>, BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.HeFace<TPosition>>.Valence() Implements IVertex<TPosition> IEquatable<>"
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh.html",
    "title": "Namespace BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.DataStructures.PolyhedralMeshes.HalfedgeMesh Classes HeEdge<TPosition> Class for an edge in a polyhedral halfedge mesh data structure. HeFace<TPosition> Class for a face in a polyhedral halfedge mesh data structure. HeHalfedge<TPosition> Class for a halfedge in a polyhedral halfedge mesh data structure. HeMesh<TPosition> Class for a polyhedral halfedge mesh data structure. HeVertex<TPosition> Class for a vertex in a polyhedral halfedge mesh data structure."
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.html",
    "title": "Namespace BRIDGES.DataStructures.PolyhedralMeshes | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.DataStructures.PolyhedralMeshes Interfaces IEdge<TPosition> Abstract class for an edge in a polyhedral mesh data structure. IFace<TPosition> Abstract class for an face in a polyhedral mesh data structure. IMesh<TPosition> Abstract class for a polyhedral mesh data structure. IVertex<TPosition> Abstract class for an vertex in a polyhedral mesh data structure."
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.IEdge-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.IEdge-1.html",
    "title": "Interface IEdge<TPosition> | BRIDGES Documentation",
    "keywords": "Interface IEdge<TPosition> Abstract class for an edge in a polyhedral mesh data structure. Namespace : BRIDGES.DataStructures.PolyhedralMeshes Assembly : BRIDGES.dll Syntax public interface IEdge<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type of the vertex position. Properties | Improve this Doc View Source EndVertex Gets the end vertex of the current edge. Declaration IVertex<TPosition> EndVertex { get; } Property Value Type Description IVertex <TPosition> | Improve this Doc View Source Index Gets the index of the current edge in the mesh. Declaration int Index { get; } Property Value Type Description System.Int32 | Improve this Doc View Source StartVertex Gets the start vertex of the current edge. Declaration IVertex<TPosition> StartVertex { get; } Property Value Type Description IVertex <TPosition> Methods | Improve this Doc View Source AdjacentFaces() Identifies the faces around the current edge. Declaration IReadOnlyList<IFace<TPosition>> AdjacentFaces() Returns Type Description IReadOnlyList < IFace <TPosition>> The list of adjacent faces. An empty list can be returned. | Improve this Doc View Source IsBoundary() Evaluates whether the vertex is on a boundary. Declaration bool IsBoundary() Returns Type Description System.Boolean true if the edge is on a boundary, false otherwise."
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.IFace-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.IFace-1.html",
    "title": "Interface IFace<TPosition> | BRIDGES Documentation",
    "keywords": "Interface IFace<TPosition> Abstract class for an face in a polyhedral mesh data structure. Namespace : BRIDGES.DataStructures.PolyhedralMeshes Assembly : BRIDGES.dll Syntax public interface IFace<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type of the vertex position. Properties | Improve this Doc View Source Index Gets the index of the current face in the mesh. Declaration int Index { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AdjacentFaces() Identifies the list of faces around the current face. Declaration IReadOnlyList<IFace<TPosition>> AdjacentFaces() Returns Type Description IReadOnlyList < IFace <TPosition>> The ordered list of faces. An empty list can be returned. | Improve this Doc View Source FaceEdges() Identifies the edges around the current face. Declaration IReadOnlyList<IEdge<TPosition>> FaceEdges() Returns Type Description IReadOnlyList < IEdge <TPosition>> The ordered list of face edges. | Improve this Doc View Source FaceVertices() Identifies the vertices around the current face. Declaration IReadOnlyList<IVertex<TPosition>> FaceVertices() Returns Type Description IReadOnlyList < IVertex <TPosition>> The ordered list of face vertices."
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.IMesh-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.IMesh-1.html",
    "title": "Interface IMesh<TPosition> | BRIDGES Documentation",
    "keywords": "Interface IMesh<TPosition> Abstract class for a polyhedral mesh data structure. Namespace : BRIDGES.DataStructures.PolyhedralMeshes Assembly : BRIDGES.dll Syntax public interface IMesh<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type of the vertex position. Properties | Improve this Doc View Source EdgeCount Gets the number of edges in the current mesh. Declaration int EdgeCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source FaceCount Gets the number of faces in the current mesh. Declaration int FaceCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source VertexCount Gets the number of vertices in the current mesh. Declaration int VertexCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AddEdge(Int32, Int32) Adds a new edge to the current mesh. Declaration IEdge<TPosition> AddEdge(int startIndex, int endIndex) Parameters Type Name Description System.Int32 startIndex Index of the start vertex for the new edge. System.Int32 endIndex Index of the end vertex for the new edge. Returns Type Description IEdge <TPosition> The new edge if it was added, null otherwise. | Improve this Doc View Source AddFace(List<Int32>) Adds a new face to the current mesh. Declaration IFace<TPosition> AddFace(List<int> indices) Parameters Type Name Description List < System.Int32 > indices Ordered list of the face's vertex indices. Returns Type Description IFace <TPosition> The newly created face. | Improve this Doc View Source AddFace(Int32, Int32, Int32) Adds a new triangular face to the current mesh. Declaration IFace<TPosition> AddFace(int indexA, int indexB, int indexC) Parameters Type Name Description System.Int32 indexA Index of the first vertex for the new face. System.Int32 indexB Index of the second vertex for the new face. System.Int32 indexC Index of the third vertex for the new face. Returns Type Description IFace <TPosition> The newly created triangular face. | Improve this Doc View Source AddFace(Int32, Int32, Int32, Int32) Adds a new quadrangular face to the current mesh. Declaration IFace<TPosition> AddFace(int indexA, int indexB, int indexC, int indexD) Parameters Type Name Description System.Int32 indexA Index of the first vertex for the new face. System.Int32 indexB Index of the second vertex for the new face. System.Int32 indexC Index of the third vertex for the new face. System.Int32 indexD Index of the fourth vertex for the new face. Returns Type Description IFace <TPosition> The newly created quadrangular face. | Improve this Doc View Source AddVertex(TPosition) Adds a vertex in the mesh. Declaration IVertex<TPosition> AddVertex(TPosition position) Parameters Type Name Description TPosition position Position of the vertex. Returns Type Description IVertex <TPosition> The new vertex if it was added, null otherwise. | Improve this Doc View Source CleanMesh(Boolean) Cleans the current mesh by reindexing the faces, edges and vertices. Declaration void CleanMesh(bool cullIsolated = true) Parameters Type Name Description System.Boolean cullIsolated Evaluates whether isolated members should be removed in the process. | Improve this Doc View Source EdgeBetween(Int32, Int32) Looks for the edge between two vertices. Declaration IEdge<TPosition> EdgeBetween(int indexA, int indexB) Parameters Type Name Description System.Int32 indexA Index of the first end vertex of the edge. System.Int32 indexB Index of the second end vertex of the edge. Returns Type Description IEdge <TPosition> The edge if it exists, null otherwise. | Improve this Doc View Source EraseEdge(Int32) Erases the edge at the given index in the mesh. The mesh may be non-manifold after this operation. Declaration void EraseEdge(int index) Parameters Type Name Description System.Int32 index Index of the edge to erase. | Improve this Doc View Source EraseFace(Int32) Erases the face at the given index in the mesh. The mesh may be non-manifold after this operation. Declaration void EraseFace(int index) Parameters Type Name Description System.Int32 index Index of the face to erase. | Improve this Doc View Source EraseVertex(Int32) Erases the vertex at the given index in the mesh. Every reference to this vertex should be deleted before it is erased. Declaration void EraseVertex(int index) Parameters Type Name Description System.Int32 index Index of the vertex to erase. | Improve this Doc View Source GetEdge(Int32) Returns the edge at the given index in the mesh. Declaration IEdge<TPosition> GetEdge(int index) Parameters Type Name Description System.Int32 index Returns Type Description IEdge <TPosition> The edge at the given index in the mesh. | Improve this Doc View Source GetEdges() Returns the list of edges of the current mesh. Declaration IReadOnlyList<IEdge<TPosition>> GetEdges() Returns Type Description IReadOnlyList < IEdge <TPosition>> List of edges of the mesh. Remarks If some edges were removed from the mesh, the index of the edge in the returned list might not match the edge index in the mesh. The index of the edges in the mesh is accessible through Index . | Improve this Doc View Source GetFace(Int32) Returns the face at the given index in the mesh. Declaration IFace<TPosition> GetFace(int index) Parameters Type Name Description System.Int32 index Returns Type Description IFace <TPosition> The face at the given index in the mesh. | Improve this Doc View Source GetFaces() Returns the list of faces of the current mesh. Declaration IReadOnlyList<IFace<TPosition>> GetFaces() Returns Type Description IReadOnlyList < IFace <TPosition>> List of faces of the mesh. Remarks If some faces were removed from the mesh, the index of the face in the returned list might not match the face index in the mesh. The index of the faces in the mesh is accessible through Index . | Improve this Doc View Source GetVertex(Int32) Returns the vertex at the given index in the mesh. Declaration IVertex<TPosition> GetVertex(int index) Parameters Type Name Description System.Int32 index Returns Type Description IVertex <TPosition> The vertex at the given index in the mesh. | Improve this Doc View Source GetVertices() Returns the list of vertices of the current mesh. Declaration IReadOnlyList<IVertex<TPosition>> GetVertices() Returns Type Description IReadOnlyList < IVertex <TPosition>> List of vertices of the mesh. Remarks If some vertices were removed from the mesh, the index of the vertex in the returned list might not match the vertex index in the mesh. The index of the vertices in the mesh is accessible through Index . | Improve this Doc View Source RemoveEdge(Int32) Removes the edge at the given index in the mesh by keeping the mesh manifold. Declaration void RemoveEdge(int index) Parameters Type Name Description System.Int32 index Index of the edge to remove. | Improve this Doc View Source RemoveFace(Int32) Removes the face at the given index in the mesh by keeping the mesh manifold. Declaration void RemoveFace(int index) Parameters Type Name Description System.Int32 index Index of the face to remove. | Improve this Doc View Source RemoveVertex(Int32) Removes the vertex at the given index in the mesh by keeping the mesh manifold. Declaration void RemoveVertex(int index) Parameters Type Name Description System.Int32 index Index of the vertex to remove. | Improve this Doc View Source TryGetEdge(Int32) Returns the edge at the given index in the mesh if it exists, null otherwise. Declaration IEdge<TPosition> TryGetEdge(int index) Parameters Type Name Description System.Int32 index The index of the edge to look for. Returns Type Description IEdge <TPosition> The edge if it exists, null otherwise. | Improve this Doc View Source TryGetFace(Int32) Returns the face at the given index in the mesh if it exists, null otherwise. Declaration IFace<TPosition> TryGetFace(int index) Parameters Type Name Description System.Int32 index The index of the face to look for. Returns Type Description IFace <TPosition> The face if it exists, null otherwise. | Improve this Doc View Source TryGetVertex(Int32) Returns the vertex at the given index in the mesh if it exists, null otherwise. Declaration IVertex<TPosition> TryGetVertex(int index) Parameters Type Name Description System.Int32 index The index of the vertex to look for. Returns Type Description IVertex <TPosition> The vertex if it exists, null otherwise."
  },
  "api/BRIDGES.DataStructures.PolyhedralMeshes.IVertex-1.html": {
    "href": "api/BRIDGES.DataStructures.PolyhedralMeshes.IVertex-1.html",
    "title": "Interface IVertex<TPosition> | BRIDGES Documentation",
    "keywords": "Interface IVertex<TPosition> Abstract class for an vertex in a polyhedral mesh data structure. Namespace : BRIDGES.DataStructures.PolyhedralMeshes Assembly : BRIDGES.dll Syntax public interface IVertex<TPosition> where TPosition : IEquatable<TPosition> Type Parameters Name Description TPosition Type of the vertex position. Properties | Improve this Doc View Source Index Gets the index of the current vertex in the mesh. Declaration int Index { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Position Gets or sets the position of the current vertex. Declaration TPosition Position { get; set; } Property Value Type Description TPosition Methods | Improve this Doc View Source AdjacentFaces() Identifies the faces around the current vertex. Declaration IReadOnlyList<IFace<TPosition>> AdjacentFaces() Returns Type Description IReadOnlyList < IFace <TPosition>> The list of adjacent faces. An empty list can be returned. | Improve this Doc View Source ConnectedEdges() Identifies the edges connected to the current vertex. Declaration IReadOnlyList<IEdge<TPosition>> ConnectedEdges() Returns Type Description IReadOnlyList < IEdge <TPosition>> The list of connected edges. An empty list can be returned. | Improve this Doc View Source IsBoundary() Evaluates whether the vertex is on a boundary. Declaration bool IsBoundary() Returns Type Description System.Boolean true if the vertex is not connected or if at least one edge is a boundary edge, false otherwise. | Improve this Doc View Source IsConnected() Evaluates whether the vertex is connected to any edge. Declaration bool IsConnected() Returns Type Description System.Boolean true if the vertex has at least one connected edge, false otherwise. | Improve this Doc View Source NeighbourVertices() Identifies the vertices directly connected to the current vertex with an edge. Declaration IReadOnlyList<IVertex<TPosition>> NeighbourVertices() Returns Type Description IReadOnlyList < IVertex <TPosition>> The list of connected vertices. An empty list can be returned. | Improve this Doc View Source Valence() Determines the number of edges connected to the current vertex. Declaration int Valence() Returns Type Description System.Int32 The number of edges connected to the current vertex"
  },
  "api/BRIDGES.Geometry.Euclidean3D.Basis.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.Basis.html",
    "title": "Class Basis | BRIDGES Documentation",
    "keywords": "Class Basis Class defining a basis in three-dimensional euclidean space. It is defined by an ordered set of linearly independant Vector . Inheritance System.Object Basis Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public class Basis : object Remarks For a basis placed at an origin Point , refer to Frame . Constructors | Improve this Doc View Source Basis(Basis) Initialises a new instance of the Basis class from another Basis . Declaration public Basis(Basis basis) Parameters Type Name Description Basis basis Basis to copy. | Improve this Doc View Source Basis(Vector, Vector, Vector) Initialises a new instance of the Basis class by defining its three linearly independent axes. Declaration public Basis(Vector xAxis, Vector yAxis, Vector zAxis) Parameters Type Name Description Vector xAxis First axis of the Basis . Vector yAxis Second axis of the Basis . Vector zAxis Third axis of the Basis . | Improve this Doc View Source Basis(Vector[]) Initialises a new instance of the Basis class by defining its axes. Declaration public Basis(Vector[] axes) Parameters Type Name Description Vector [] axes Set of axes. Properties | Improve this Doc View Source Dimension Gets the number of axes of the current Basis . Declaration public int Dimension { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Gets the axis of the current Basis at the given index. Declaration public Vector this[int index] { get; } Parameters Type Name Description System.Int32 index Index of the axis to retrieve. Property Value Type Description Vector The axis at the given index. | Improve this Doc View Source XAxis Gets the first axis of the current Basis . Declaration public Vector XAxis { get; } Property Value Type Description Vector | Improve this Doc View Source YAxis Gets the second axis of the current Basis . Declaration public Vector YAxis { get; } Property Value Type Description Vector | Improve this Doc View Source ZAxis Gets the third axis of the current Basis . Declaration public Vector ZAxis { get; } Property Value Type Description Vector Methods | Improve this Doc View Source Equals(Basis) Evaluates whether the current Basis is equal to another Basis . Declaration public bool Equals(Basis other) Parameters Type Name Description Basis other Basis to compare with. Returns Type Description System.Boolean true if the two Basis are equal, false otherwise. Remarks Two Basis are equal if their corresponding Vector axes are equal. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/BRIDGES.Geometry.Euclidean3D.BSplineCurve.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.BSplineCurve.html",
    "title": "Class BSplineCurve | BRIDGES Documentation",
    "keywords": "Class BSplineCurve Class defining a B-Spline curve in three-dimensional euclidean space. Inheritance System.Object BSplineCurve < Point > BSplineCurve Inherited Members BSplineCurve<Point>._knotVector BSplineCurve<Point>._controlPoints BSplineCurve<Point>.IsClosed BSplineCurve<Point>.StartPoint BSplineCurve<Point>.EndPoint BSplineCurve<Point>.DomainStart BSplineCurve<Point>.DomainEnd BSplineCurve<Point>.Degree BSplineCurve<Point>.KnotCount BSplineCurve<Point>.PointCount BSplineCurve<Point>.GetKnot(Int32) BSplineCurve<Point>.Length() BSplineCurve<Point>.Flip() BSplineCurve<Point>.PointAt(Double, CurveParameterFormat) BSplineCurve<Point>.SetControlPoints(IEnumerable<Point>) BSplineCurve<Point>.SetKnotVector(IEnumerable<Double>) BSplineCurve<Point>.SetUniformKnotVector(Double, Double, Int32, Int32) Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public class BSplineCurve : BSplineCurve<Point> Constructors | Improve this Doc View Source BSplineCurve(Int32, IEnumerable<Point>) Initialises a new instance of BSplineCurve class. Declaration public BSplineCurve(int degree, IEnumerable<Point> controlPoints) Parameters Type Name Description System.Int32 degree Degree of the interpolating BSpline polynomial basis. IEnumerable < Point > controlPoints Control points of the BSplineCurve . | Improve this Doc View Source BSplineCurve(Int32, IEnumerable<Double>, IEnumerable<Point>) Initialises a new instance of BSplineCurve class by defining its fields. Declaration public BSplineCurve(int degree, IEnumerable<double> knotVector, IEnumerable<Point> controlPoints) Parameters Type Name Description System.Int32 degree Degree of the interpolating BSpline polynomial basis. IEnumerable < System.Double > knotVector Knot vector of the interpolating BSpline polynomial basis. IEnumerable < Point > controlPoints Control points of the BSplineCurve ."
  },
  "api/BRIDGES.Geometry.Euclidean3D.BSplineSurface.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.BSplineSurface.html",
    "title": "Class BSplineSurface | BRIDGES Documentation",
    "keywords": "Class BSplineSurface Class defining a B-Spline surface in three-dimensional euclidean space. Inheritance System.Object BSplineSurface < Point > BSplineSurface Inherited Members BSplineSurface<Point>._knotVectorU BSplineSurface<Point>._knotVectorV BSplineSurface<Point>._controlPoints BSplineSurface<Point>.DegreeU BSplineSurface<Point>.DegreeV BSplineSurface<Point>.KnotCountU BSplineSurface<Point>.KnotCountV BSplineSurface<Point>.PointCountU BSplineSurface<Point>.PointCountV BSplineSurface<Point>.PointAt((, )<Double, Double>) BSplineSurface<Point>.SetControlPoints(Point[,]) BSplineSurface<Point>.SetUniformKnotVectors((, )<Double, Double>, (, )<Double, Double>, (, )<Int32, Int32>, (, )<Int32, Int32>) Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public class BSplineSurface : BSplineSurface<Point> Constructors | Improve this Doc View Source BSplineSurface(Int32, Int32, Point[,]) Initialises a new instance of BSplineSurface class. Declaration public BSplineSurface(int degreeU, int degreeV, Point[, ] controlPoints) Parameters Type Name Description System.Int32 degreeU Degree of the interpolating polynomials in the BSpline basis in u-direction. System.Int32 degreeV Degree of the interpolating polynomials in the BSpline basis in v-direction. Point [,] controlPoints Control points of the BSplineSurface ."
  },
  "api/BRIDGES.Geometry.Euclidean3D.Circle.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.Circle.html",
    "title": "Struct Circle | BRIDGES Documentation",
    "keywords": "Struct Circle Structure defining a circle curve in three-dimensional euclidean space. Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public struct Circle Constructors | Improve this Doc View Source Circle(Plane, Double) Initialises a new instance of the Circle structure by defining its centre, orientation and radius. Declaration public Circle(Plane plane, double radius) Parameters Type Name Description Plane plane Plane for the centre and the orientation of the Circle . System.Double radius Radius of the Circle . | Improve this Doc View Source Circle(Point, Double) Initialises a new instance of the Circle structure, parallel to the WorldXY plane, by defining its centre and radius. Declaration public Circle(Point centre, double radius) Parameters Type Name Description Point centre Centre of the Circle . System.Double radius Radius of the Circle . Properties | Improve this Doc View Source Centre Gets the centre of the current Circle . Declaration public readonly Point Centre { get; } Property Value Type Description Point | Improve this Doc View Source IsClosed Gets a boolean evaluating whether the current Circle is closed or not; Declaration public readonly bool IsClosed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Normal Gets the normal Vector of the current Circle . Declaration public readonly Vector Normal { get; } Property Value Type Description Vector | Improve this Doc View Source Radius Gets or sets the radius of the circle. Declaration public double Radius { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(Circle) Evaluates whether the current Circle is equal to another Circle . Declaration public bool Equals(Circle other) Parameters Type Name Description Circle other Circle to compare with. Returns Type Description System.Boolean true if the two Circle are equal, false otherwise. Remarks Two Circle are equal if their centre, plane and radius are equal. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source Flip() Flips the current Circle by reversing the normal axis (and the in-plane YAxis). Declaration public void Flip() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source PointAt(Double) Evaluates the current Circle at the given angle. Declaration public Point PointAt(double angle) Parameters Type Name Description System.Double angle Value of the anlgle (in radians). Returns Type Description Point The Point on the Circle at the given angle. | Improve this Doc View Source PointAt(Double, CurveParameterFormat) Evaluates the current Circle at the given parameter. Declaration public Point PointAt(double parameter, CurveParameterFormat format) Parameters Type Name Description System.Double parameter Value of the parameter. CurveParameterFormat format Format of the parameter. Returns Type Description Point The Point on the Circle at the given parameter. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/BRIDGES.Geometry.Euclidean3D.Frame.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.Frame.html",
    "title": "Class Frame | BRIDGES Documentation",
    "keywords": "Class Frame Class defining a frame in three-dimensional euclidean space. It is defined by an origin Point and an ordered set of linearly independent Vector . Inheritance System.Object Frame Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public class Frame : object Remarks For an ordered set of linearly independent Vector without an origin, refer to Basis . Constructors | Improve this Doc View Source Frame(Frame) Initialises a new instance of the Frame class from another Frame . Declaration public Frame(Frame frame) Parameters Type Name Description Frame frame Frame to copy. | Improve this Doc View Source Frame(Point, Vector, Vector, Vector) Initialises a new instance of the Frame class by defining its origin and three linearly independent axes. Declaration public Frame(Point origin, Vector xAxis, Vector yAxis, Vector zAxis) Parameters Type Name Description Point origin Origin Point of the Frame . Vector xAxis First Vector axis of the Frame . Vector yAxis Second Vector axis of the Frame . Vector zAxis Third Vector axis of the Frame . | Improve this Doc View Source Frame(Point, Vector[]) Initialises a new instance of the Frame class by defining its origin and axes. Declaration public Frame(Point origin, Vector[] axes) Parameters Type Name Description Point origin Origin Point . Vector [] axes Vector axes. Properties | Improve this Doc View Source Dimension Gets the number of axes of the current Frame . Declaration public int Dimension { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Gets the axis of the current Frame at the given index. Declaration public Vector this[int index] { get; } Parameters Type Name Description System.Int32 index Index of the axis to retrieve. Property Value Type Description Vector The axis at the given index. | Improve this Doc View Source Origin Gets or sets the origin Point of the current Frame . Declaration public Point Origin { get; set; } Property Value Type Description Point | Improve this Doc View Source XAxis Gets the first axis of the current Frame . Declaration public Vector XAxis { get; } Property Value Type Description Vector | Improve this Doc View Source YAxis Gets the second axis of the current Frame . Declaration public Vector YAxis { get; } Property Value Type Description Vector | Improve this Doc View Source ZAxis Gets the third axis of the current Frame . Declaration public Vector ZAxis { get; } Property Value Type Description Vector Methods | Improve this Doc View Source Equals(Frame) Evaluates whether the current Frame is equal to another Frame . Declaration public bool Equals(Frame other) Parameters Type Name Description Frame other Frame to compare with. Returns Type Description System.Boolean true if the two Frame are equal, false otherwise. Remarks Two Frame are equal if their origin Point and their corresponding Vector axes are equal. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/BRIDGES.Geometry.Euclidean3D.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.html",
    "title": "Namespace BRIDGES.Geometry.Euclidean3D | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Geometry.Euclidean3D Classes Basis Class defining a basis in three-dimensional euclidean space. It is defined by an ordered set of linearly independant Vector . BSplineCurve Class defining a B-Spline curve in three-dimensional euclidean space. BSplineSurface Class defining a B-Spline surface in three-dimensional euclidean space. Frame Class defining a frame in three-dimensional euclidean space. It is defined by an origin Point and an ordered set of linearly independent Vector . NurbsCurve Class defining a NURBS curve in three-dimensional euclidean space. NurbsSurface Class defining a NURBS surface in three-dimensional euclidean space. Plane Class defining a plane in three-dimensional euclidean space. The X and Y axes are the in-plane Vector and Z the normal of the Plane . Polyline Class defining a polyline curve in three-dimensional euclidean space. It is defined by an ordered list of vertices. Sphere Class defining a sphere in three-dimensional euclidean space. Structs Circle Structure defining a circle curve in three-dimensional euclidean space. Line Structure defining a line in three-dimensional euclidean space. It is defined by an start point and an axis (infinite length). Point Structure defining a point in three-dimensional euclidean space. Ray Structure defining a half-line in three-dimensional euclidean space. It is defined by a start point and an end point (finite length). For an infinite line, refer to Line . Segment Structure defining a segment curve in three-dimensional euclidean space. It is defined by a start point and an end point (finite length). Vector Structure defining a vector in three-dimensional euclidean space."
  },
  "api/BRIDGES.Geometry.Euclidean3D.Line.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.Line.html",
    "title": "Struct Line | BRIDGES Documentation",
    "keywords": "Struct Line Structure defining a line in three-dimensional euclidean space. It is defined by an start point and an axis (infinite length). Implements IEquatable < Line > Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public struct Line Remarks For a finite line, refer to Segment . Constructors | Improve this Doc View Source Line(Line) Initialises a new instance of the Line structure from another Line . Declaration public Line(Line line) Parameters Type Name Description Line line Line to copy. | Improve this Doc View Source Line(Point, Vector) Initialises a new instance of the Line structure by defining its origin and axis. Declaration public Line(Point origin, Vector axis) Parameters Type Name Description Point origin Origin Point of the Line . Vector axis Axis of the Line . Properties | Improve this Doc View Source Axis Gets the axis of the current Line . Declaration public Vector Axis { get; } Property Value Type Description Vector | Improve this Doc View Source Origin Gets the origin of the current Line . Declaration public readonly Point Origin { get; } Property Value Type Description Point Methods | Improve this Doc View Source Equals(Line) Evaluates whether the current Line is equal to another Line . Declaration public bool Equals(Line other) Parameters Type Name Description Line other Line to compare with. Returns Type Description System.Boolean true if the two Line are equal, false otherwise. Remarks Two Line are equal if their Vector axis are parallel, and if the Vector connecting the two origin Point is zero or parallel to their parallel axis. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source Flip() Flips the current Line by flipping the Axis . Declaration public void Flip() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source PointAt(Double) Evaluates the current Line at the given length parameter. Declaration public Point PointAt(double lengthParameter) Parameters Type Name Description System.Double lengthParameter Value of the length parameter. Returns Type Description Point The Point on the Line at the given length parameter. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Implements IEquatable<>"
  },
  "api/BRIDGES.Geometry.Euclidean3D.NurbsCurve.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.NurbsCurve.html",
    "title": "Class NurbsCurve | BRIDGES Documentation",
    "keywords": "Class NurbsCurve Class defining a NURBS curve in three-dimensional euclidean space. Inheritance System.Object BSplineCurve < Point > NurbsCurve Inherited Members BSplineCurve<Point>._knotVector BSplineCurve<Point>._controlPoints BSplineCurve<Point>.IsClosed BSplineCurve<Point>.DomainStart BSplineCurve<Point>.DomainEnd BSplineCurve<Point>.Degree BSplineCurve<Point>.KnotCount BSplineCurve<Point>.PointCount BSplineCurve<Point>.GetKnot(Int32) BSplineCurve<Point>.Length() BSplineCurve<Point>.Flip() BSplineCurve<Point>.SetControlPoints(IEnumerable<Point>) BSplineCurve<Point>.SetKnotVector(IEnumerable<Double>) BSplineCurve<Point>.SetUniformKnotVector(Double, Double, Int32, Int32) Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public class NurbsCurve : BSplineCurve<Point> Constructors | Improve this Doc View Source NurbsCurve(Int32, IEnumerable<Point>) Initialises a new instance of NurbsCurve class. Declaration public NurbsCurve(int degree, IEnumerable<Point> controlPoints) Parameters Type Name Description System.Int32 degree Degree of the interpolating BSpline polynomial basis. IEnumerable < Point > controlPoints Control points of the NurbsCurve . | Improve this Doc View Source NurbsCurve(Int32, IEnumerable<Double>, IEnumerable<Point>, IEnumerable<Double>) Initialises a new instance of NurbsCurve class by defining its fields. Declaration public NurbsCurve(int degree, IEnumerable<double> knotVector, IEnumerable<Point> controlPoints, IEnumerable<double> weights) Parameters Type Name Description System.Int32 degree Degree of the interpolating BSpline polynomial basis. IEnumerable < System.Double > knotVector Knot vector of the interpolating BSpline polynomial basis. IEnumerable < Point > controlPoints Control points of the NurbsCurve . IEnumerable < System.Double > weights Weights of the control points. Properties | Improve this Doc View Source EndPoint Declaration public Point EndPoint { get; } Property Value Type Description Point | Improve this Doc View Source StartPoint Declaration public Point StartPoint { get; } Property Value Type Description Point Methods | Improve this Doc View Source ConvertControlPoints(IEnumerable<Point>) Converts the control points for the current NurbsCurve . Declaration protected IEnumerable<Point> ConvertControlPoints(IEnumerable<Point> controlPoints) Parameters Type Name Description IEnumerable < Point > controlPoints Point to convert. Returns Type Description IEnumerable < Point > The Point resulting from the conversion. | Improve this Doc View Source ConvertControlPoints(IEnumerable<Point>, IEnumerable<Double>) Converts the control points for the current NurbsCurve . Declaration protected IEnumerable<Point> ConvertControlPoints(IEnumerable<Point> controlPoints, IEnumerable<double> weights) Parameters Type Name Description IEnumerable < Point > controlPoints Point to convert. IEnumerable < System.Double > weights Weigths to include in the conversion. Returns Type Description IEnumerable < Point > The Point resulting from the conversion. | Improve this Doc View Source PointAt(Double, CurveParameterFormat) Declaration public Point PointAt(double parameter, CurveParameterFormat format) Parameters Type Name Description System.Double parameter CurveParameterFormat format Returns Type Description Point"
  },
  "api/BRIDGES.Geometry.Euclidean3D.NurbsSurface.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.NurbsSurface.html",
    "title": "Class NurbsSurface | BRIDGES Documentation",
    "keywords": "Class NurbsSurface Class defining a NURBS surface in three-dimensional euclidean space. Inheritance System.Object BSplineSurface < Point > NurbsSurface Inherited Members BSplineSurface<Point>._knotVectorU BSplineSurface<Point>._knotVectorV BSplineSurface<Point>._controlPoints BSplineSurface<Point>.DegreeU BSplineSurface<Point>.DegreeV BSplineSurface<Point>.KnotCountU BSplineSurface<Point>.KnotCountV BSplineSurface<Point>.PointCountU BSplineSurface<Point>.PointCountV BSplineSurface<Point>.SetControlPoints(Point[,]) BSplineSurface<Point>.SetUniformKnotVectors((, )<Double, Double>, (, )<Double, Double>, (, )<Int32, Int32>, (, )<Int32, Int32>) Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public class NurbsSurface : BSplineSurface<Point> Constructors | Improve this Doc View Source NurbsSurface(Int32, Int32, Point[,]) Initialises a new instance of BSplineSurface class. Declaration public NurbsSurface(int degreeU, int degreeV, Point[, ] controlPoints) Parameters Type Name Description System.Int32 degreeU Degree of the interpolating polynomials in the BSpline basis in u-direction. System.Int32 degreeV Degree of the interpolating polynomials in the BSpline basis in v-direction. Point [,] controlPoints Control points of the BSplineSurface . Methods | Improve this Doc View Source PointAt((Double, Double)) Evaluates the current surface at the given parameter. Declaration public Point PointAt((double, double) parameter) Parameters Type Name Description System.ValueTuple < System.Double , System.Double > parameter Value of the parameter. Returns Type Description Point The point on the surface at the given parameter. | Improve this Doc View Source SetControlPoints(Point[,]) Converts the control points for the current NurbsSurface . Declaration protected void SetControlPoints(Point[, ] controlPoints) Parameters Type Name Description Point [,] controlPoints Point to convert."
  },
  "api/BRIDGES.Geometry.Euclidean3D.Plane.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.Plane.html",
    "title": "Class Plane | BRIDGES Documentation",
    "keywords": "Class Plane Class defining a plane in three-dimensional euclidean space. The X and Y axes are the in-plane Vector and Z the normal of the Plane . Inheritance System.Object Plane Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public class Plane : object Constructors | Improve this Doc View Source Plane(Plane) Initialises a new instance of the Plane class from another Plane . Declaration public Plane(Plane plane) Parameters Type Name Description Plane plane Plane to copy. | Improve this Doc View Source Plane(Point, Vector) Initialises a new instance of the Plane class by defining its origin and normal. Declaration public Plane(Point origin, Vector normal) Parameters Type Name Description Point origin Origin Point of the Plane . Vector normal Normal Vector of the Plane . | Improve this Doc View Source Plane(Point, Vector, Vector, Vector) Initialises a new instance of the Plane class by defining its origin, two linearly independent in-plane Vector and a normal Vector orthogonal to the previous ones. Declaration public Plane(Point origin, Vector xAxis, Vector yAxis, Vector normal) Parameters Type Name Description Point origin Origin Point of the Plane . Vector xAxis First Vector in-plane axis of the Plane . Vector yAxis Second Vector in-plane axis of the Plane . Vector normal Normal Vector of the Plane . Properties | Improve this Doc View Source Normal Gets the Z axis, the normal axis of the current Plane . Declaration public Vector Normal { get; } Property Value Type Description Vector | Improve this Doc View Source Origin Gets the origin of the current Plane . Declaration public Point Origin { get; } Property Value Type Description Point | Improve this Doc View Source WorldXY Gets the Plane centered in (0.0, 0.0, 0.0) with WorldZ as its normal axis. Declaration public Plane WorldXY { get; } Property Value Type Description Plane | Improve this Doc View Source WorldYZ Gets the Plane centered in (0.0, 0.0, 0.0) with WorldX as its normal axis. Declaration public Plane WorldYZ { get; } Property Value Type Description Plane | Improve this Doc View Source WorldZX Gets the Plane centered in (0.0, 0.0, 0.0) with WorldY as its normal axis. Declaration public Plane WorldZX { get; } Property Value Type Description Plane | Improve this Doc View Source XAxis Gets the X axis, the first in-plane axis of the current Plane . Declaration public Vector XAxis { get; } Property Value Type Description Vector | Improve this Doc View Source YAxis Gets the Y axis, the second in-plane of the current Plane . Declaration public Vector YAxis { get; } Property Value Type Description Vector Methods | Improve this Doc View Source ClosestPoint(Point) Computes the closest Point of the given Point on the current Plane . Declaration public Point ClosestPoint(Point point) Parameters Type Name Description Point point Point to project on the current Plane . Returns Type Description Point The new Point on the Plane , cloesest to the initial one. | Improve this Doc View Source Equals(Plane) Evaluates whether the current Plane is equal to another Plane . Declaration public bool Equals(Plane other) Parameters Type Name Description Plane other Plane to compare with. Returns Type Description System.Boolean true if the two Plane are equal, false otherwise. Remarks Two Plane are equal if their normal Vector are parallel, and if the Vector connecting the two origin Point is zero or orthogonal to their parallel normal. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/BRIDGES.Geometry.Euclidean3D.Point.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.Point.html",
    "title": "Struct Point | BRIDGES Documentation",
    "keywords": "Struct Point Structure defining a point in three-dimensional euclidean space. Implements IAbelianGroup < Point > IGroup < Point > IMonoid < Point > ISemiGroup < Point > ILoop < Point > IQuasiGroup < Point > IMagma < Point > IAddable < Point > ISubtractable < Point > IZeroable < Point > IGroupAction < System.Double , Point > IDotProduct < System.Double , Point > INorm < Point > IMetric < Point > IEquatable < Point > Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public struct Point : IAbelianGroup<Point>, IGroup<Point>, IMonoid<Point>, ISemiGroup<Point>, ILoop<Point>, IQuasiGroup<Point>, IMagma<Point>, IAddable<Point>, ISubtractable<Point>, IZeroable<Point>, IGroupAction<double, Point>, IDotProduct<double, Point>, INorm<Point>, IMetric<Point> Constructors | Improve this Doc View Source Point(Point) Initialises a new instance of the Point structure from another Point . Declaration public Point(Point point) Parameters Type Name Description Point point Point to copy. | Improve this Doc View Source Point(Double, Double, Double) Initialises a new instance of the Point structure by defining its three coordinates. Declaration public Point(double x, double y, double z) Parameters Type Name Description System.Double x Value of the first coordinate. System.Double y Value of the second coordinate. System.Double z Value of the third coordinate. | Improve this Doc View Source Point(Double[]) Initialises a new instance of Point structure by defining its coordinates. Declaration public Point(double[] coordinates) Parameters Type Name Description System.Double [] coordinates Value of the coordinates. Properties | Improve this Doc View Source Dimension Gets the dimension of the current Point 's euclidean space. Declaration public readonly int Dimension { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Gets or sets the value of the coordinate at the given index. Declaration public double this[int index] { get; set; } Parameters Type Name Description System.Int32 index Index of the coordinate to get or set. Property Value Type Description System.Double The value of the coordinate at the given index. | Improve this Doc View Source X Gets or sets the first coordinate of the current Point . Declaration public double X { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Y Gets or sets the second coordinate of the current Point . Declaration public double Y { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Z Gets or sets the third coordinate of the current Point . Declaration public double Z { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Zero Gets a new Point with coordinates (0.0, 0.0, 0.0) Declaration public static readonly Point Zero { get; } Property Value Type Description Point Methods | Improve this Doc View Source Add(Point, Point) Computes the addition of two Point . Declaration public static Point Add(Point left, Point right) Parameters Type Name Description Point left Point for the addition. Point right Point for the addition. Returns Type Description Point The new Point resulting from the addition. | Improve this Doc View Source Add(Point, Vector) Computes the addition of a Point with a Vector . Declaration public static Point Add(Point point, Vector vector) Parameters Type Name Description Point point Point for the addition. Vector vector Vector for the addition. Returns Type Description Point The new Point resulting from the addition. | Improve this Doc View Source CrossProduct(Point, Point) Returns the cross product of two Point . Declaration public static Point CrossProduct(Point left, Point right) Parameters Type Name Description Point left Left Point for the cross product. Point right Right Point for the cross product. Returns Type Description Point A new Point resulting from the cross product of two Point . | Improve this Doc View Source DistanceTo(Point) Computes the distance of the current Point to another Point (using the L2-norm). Declaration public double DistanceTo(Point other) Parameters Type Name Description Point other Point to evaluate the distance to. Returns Type Description System.Double The value of the distance between the two Point . | Improve this Doc View Source Divide(Point, Double) Computes the scalar division of a Point with a -precision real number. Declaration public static Point Divide(Point operand, double divisor) Parameters Type Name Description Point operand Point to divide. System.Double divisor -precision real number to divide with. Returns Type Description Point The new Point resulting from the scalar division. | Improve this Doc View Source DotProduct(Point, Point) Computes the dot product of two Point . Declaration public static double DotProduct(Point left, Point right) Parameters Type Name Description Point left Point for the dot product. Point right Point for the dot product. Returns Type Description System.Double The new Point resulting from the dot product of two Point . | Improve this Doc View Source Equals(Point) Evaluates whether the current Point is equal to another Point . Declaration public bool Equals(Point other) Parameters Type Name Description Point other Point to compare with. Returns Type Description System.Boolean true if the two Point are equal, false otherwise. Remarks Two Point are equal if their coordinates are equal. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetCoordinates() Gets the coordinates of the current Point . Declaration public double[] GetCoordinates() Returns Type Description System.Double [] The array representation of the Point 's coordinates. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Multiply(Double, Point) Computes the scalar multiplication of a Point with a -precision real number. Declaration public static Point Multiply(double factor, Point operand) Parameters Type Name Description System.Double factor -precision real number. Point operand Point to multiply. Returns Type Description Point The new Point resulting from the scalar multiplication. | Improve this Doc View Source Norm() Computes the L2-norm the current Point . Declaration public double Norm() Returns Type Description System.Double The value of the norm. | Improve this Doc View Source Subtract(Point, Point) Computes the subtraction of two Point . Declaration public static Point Subtract(Point left, Point right) Parameters Type Name Description Point left Point to subtract. Point right Point to subtract with. Returns Type Description Point The new Point resulting from the subtraction. | Improve this Doc View Source Subtract(Point, Vector) Computes the subtraction of a Point with a Vector . Declaration public static Point Subtract(Point point, Vector vector) Parameters Type Name Description Point point Point to subtract. Vector vector Vector to subtract with. Returns Type Description Point The new Point resulting from the subtraction. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Addition(Point, Point) Computes the addition of two Point . Declaration public static Point operator +(Point left, Point right) Parameters Type Name Description Point left Point for the addition. Point right Point for the addition. Returns Type Description Point The new Point resulting from the addition. | Improve this Doc View Source Addition(Point, Vector) Computes the addition of a Point with a Vector . Declaration public static Point operator +(Point point, Vector vector) Parameters Type Name Description Point point Point for the addition. Vector vector Vector for the addition. Returns Type Description Point The new Point resulting from the addition. | Improve this Doc View Source Division(Point, Double) Computes the scalar division of a Point with a -precision real number. Declaration public static Point operator /(Point operand, double divisor) Parameters Type Name Description Point operand Point to divide. System.Double divisor -precision real number to divide with. Returns Type Description Point The new Point resulting from the scalar division. | Improve this Doc View Source Explicit(Point to Point) Casts a Point into a Point . Declaration public static explicit operator Point(Point point) Parameters Type Name Description Point point Point to cast. Returns Type Description Point The new Point resulting from the cast. | Improve this Doc View Source Implicit(Vector to Point) Casts a Vector into a Point . Declaration public static implicit operator Point(Vector vector) Parameters Type Name Description Vector vector Vector to cast. Returns Type Description Point The new Point resulting from the cast. | Improve this Doc View Source Multiply(Point, Point) Computes the dot product of two Point . Declaration public static double operator *(Point left, Point right) Parameters Type Name Description Point left Point for the dot product. Point right Point for the dot product. Returns Type Description System.Double The new Point resulting from the dot product of two Point . | Improve this Doc View Source Multiply(Point, Double) Declaration public static Point operator *(Point operand, double factor) Parameters Type Name Description Point operand System.Double factor Returns Type Description Point | Improve this Doc View Source Multiply(Double, Point) Computes the scalar multiplication of a Point with a -precision real number. Declaration public static Point operator *(double factor, Point operand) Parameters Type Name Description System.Double factor -precision real number. Point operand Point to multiply. Returns Type Description Point The new Point resulting from the scalar multiplication. | Improve this Doc View Source Subtraction(Point, Point) Computes the subtraction of two Point . Declaration public static Point operator -(Point left, Point right) Parameters Type Name Description Point left Point to subtract. Point right Point to subtract with. Returns Type Description Point The new Point resulting from the subtraction. | Improve this Doc View Source Subtraction(Point, Vector) Computes the subtraction of a Point with a Vector . Declaration public static Point operator -(Point point, Vector vector) Parameters Type Name Description Point point Point to subtract. Vector vector Vector to subtract with. Returns Type Description Point The new Point resulting from the subtraction. | Improve this Doc View Source UnaryNegation(Point) Computes the opposite of the given Point . Declaration public static Point operator -(Point operand) Parameters Type Name Description Point operand Point to be opposed. Returns Type Description Point The new Point , opposite of the initial one. Explicit Interface Implementations | Improve this Doc View Source IAddable<Point>.Add(Point) Computes the addition of the current element with another element on the right. Declaration Point IAddable<Point>.Add(Point right) Parameters Type Name Description Point right Returns Type Description Point The new element resulting from the addition. | Improve this Doc View Source IAddable<Point>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration readonly bool IAddable<Point>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<Point>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration readonly bool IAddable<Point>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source ISubtractable<Point>.Subtract(Point) Computes the subtraction of the current element with another element on the right. Declaration Point ISubtractable<Point>.Subtract(Point right) Parameters Type Name Description Point right Returns Type Description Point The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<Point>.Zero() Returns the neutral element of the addition. Declaration Point IZeroable<Point>.Zero() Returns Type Description Point The neutral element of the addition. | Improve this Doc View Source IDotProduct<Double, Point>.AngleWith(Point) Computes the angle between the current element and another element. Declaration double IDotProduct<double, Point>.AngleWith(Point other) Parameters Type Name Description Point other Returns Type Description System.Double The value of the angle (in radians). | Improve this Doc View Source IDotProduct<Double, Point>.DotProduct(Point) Computes the dot product of the current element with another element. Declaration double IDotProduct<double, Point>.DotProduct(Point right) Parameters Type Name Description Point right Returns Type Description System.Double The value of the dot product of the two elements. | Improve this Doc View Source INorm<Point>.Unitise() Unitises the current T . Declaration void INorm<Point>.Unitise() | Improve this Doc View Source IGroup<Point>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<Point>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, Point>.Divide(Double) Computes the right scalar division of the current element. Declaration Point IGroupAction<double, Point>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description Point The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, Point>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration Point IGroupAction<double, Point>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description Point The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IGroupAction<TValue, T> IDotProduct<TValue, T> INorm<T> IMetric<T> IEquatable<>"
  },
  "api/BRIDGES.Geometry.Euclidean3D.Polyline.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.Polyline.html",
    "title": "Class Polyline | BRIDGES Documentation",
    "keywords": "Class Polyline Class defining a polyline curve in three-dimensional euclidean space. It is defined by an ordered list of vertices. Inheritance System.Object Polyline Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public class Polyline : object Constructors | Improve this Doc View Source Polyline(Point[], Boolean) Initialises a new instance of the Polyline class by defining its vertices. Declaration public Polyline(Point[] vertices, bool isClosed = false) Parameters Type Name Description Point [] vertices Position of the vertices. System.Boolean isClosed Determines whether the new Polyline is closed or not. | Improve this Doc View Source Polyline(Polyline) Initialises a new instance of the Polyline class from another Polyline . Declaration public Polyline(Polyline polyline) Parameters Type Name Description Polyline polyline Polyline to copy. Properties | Improve this Doc View Source DomainEnd Declaration public double DomainEnd { get; } Property Value Type Description System.Double | Improve this Doc View Source DomainStart Declaration public double DomainStart { get; } Property Value Type Description System.Double | Improve this Doc View Source EndPoint Declaration public Point EndPoint { get; } Property Value Type Description Point | Improve this Doc View Source IsClosed Declaration public bool IsClosed { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets the vertex of the Polyline at the given index. Declaration public Point this[int index] { get; } Parameters Type Name Description System.Int32 index Index of the vertex to retrieve. Property Value Type Description Point The Point representing the position of the vertex. | Improve this Doc View Source StartPoint Declaration public Point StartPoint { get; } Property Value Type Description Point | Improve this Doc View Source VertexCount Gets the number of vertices of the current Polyline . Declaration public int VertexCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AddVertex(Point) Adds a vertex at the end of the polyline. Declaration public void AddVertex(Point vertex) Parameters Type Name Description Point vertex Position of the new vertex. | Improve this Doc View Source AddVertices(List<Point>) Adds a list of vertices at the end of the polyline. Declaration public void AddVertices(List<Point> vertices) Parameters Type Name Description List < Point > vertices Position of the new vertices. | Improve this Doc View Source ClosestPoint(Point, out Double) Retrieves the closest point on a polyline to a given point, and the distance from the point to the polyline. Declaration public Point ClosestPoint(Point point, out double t) Parameters Type Name Description Point point Point to find the closest point from. System.Double t Distance from the given point and the point on the polyline. Returns Type Description Point The closest point on the polyline. | Improve this Doc View Source Equals(Polyline) Evaluates whether the current Polyline is equal to another Polyline . Declaration public bool Equals(Polyline other) Parameters Type Name Description Polyline other Polyline to compare with. Returns Type Description System.Boolean true if the two Polyline are equal, false otherwise. Remarks Two Polyline are equal if they have the same topology and their corresponding vertices are equal. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source Flip() Flips the current Polyline by reversing the list of vertices. Declaration public void Flip() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source InsertVertex(Int32, Point) Inserts a vertex in the polyline at the given index. Declaration public void InsertVertex(int index, Point vertex) Parameters Type Name Description System.Int32 index Zero-based index at which the vertex should be inserted. Point vertex Position of the new vertex. | Improve this Doc View Source Length() Computes the length of the current Polyline . Declaration public double Length() Returns Type Description System.Double The value corresponding to the Polyline 's length. | Improve this Doc View Source PointAt(Double, CurveParameterFormat) Evaluates the current Polyline at the given parameter. Declaration public Point PointAt(double parameter, CurveParameterFormat format) Parameters Type Name Description System.Double parameter Value of the parameter. CurveParameterFormat format Format of the parameter. Returns Type Description Point The Point on the Polyline at the given parameter. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/BRIDGES.Geometry.Euclidean3D.Ray.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.Ray.html",
    "title": "Struct Ray | BRIDGES Documentation",
    "keywords": "Struct Ray Structure defining a half-line in three-dimensional euclidean space. It is defined by a start point and an end point (finite length). For an infinite line, refer to Line . Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public struct Ray Constructors | Improve this Doc View Source Ray(Point, Vector) Initialises a new instance of the Ray structure by defining its origin and axis. Declaration public Ray(Point start, Vector axis) Parameters Type Name Description Point start Start Point of the Ray . Vector axis Axis of the Ray . | Improve this Doc View Source Ray(Ray) Initialises a new instance of the Ray structure from another Ray . Declaration public Ray(Ray ray) Parameters Type Name Description Ray ray Ray to copy. Properties | Improve this Doc View Source Axis Gets the axis of the current Ray . Declaration public Vector Axis { get; } Property Value Type Description Vector | Improve this Doc View Source StartPoint Gets the start Point of the current Ray . Declaration public readonly Point StartPoint { get; } Property Value Type Description Point Methods | Improve this Doc View Source Equals(Ray) Evaluates whether the current Ray is equal to another Ray . Declaration public bool Equals(Ray other) Parameters Type Name Description Ray other Ray to compare with. Returns Type Description System.Boolean true if the two Ray are equal, false otherwise. Remarks Two Ray are equal if their start Point are equal and their Vector axis parallel. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source Flip() Flips the current Ray by flipping the Axis . Declaration public void Flip() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source PointAt(Double) Evaluates the current Ray at the given length parameter. Declaration public Point PointAt(double lengthParameter) Parameters Type Name Description System.Double lengthParameter Value of the length parameter. Returns Type Description Point The Point on the Line at the given length parameter. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/BRIDGES.Geometry.Euclidean3D.Segment.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.Segment.html",
    "title": "Struct Segment | BRIDGES Documentation",
    "keywords": "Struct Segment Structure defining a segment curve in three-dimensional euclidean space. It is defined by a start point and an end point (finite length). Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public struct Segment Remarks For an infinite line, refer to Line . Constructors | Improve this Doc View Source Segment(Point, Point) Initialises a new instance of the Segment structure by defining its start and end Point . Declaration public Segment(Point start, Point end) Parameters Type Name Description Point start Start Point of the Segment . Point end End Point of the Segment . | Improve this Doc View Source Segment(Segment) Initialises a new instance of the Segment structure from another Segment . Declaration public Segment(Segment segment) Parameters Type Name Description Segment segment Segment to copy. Properties | Improve this Doc View Source DomainEnd Declaration public readonly double DomainEnd { get; } Property Value Type Description System.Double | Improve this Doc View Source DomainStart Declaration public readonly double DomainStart { get; } Property Value Type Description System.Double | Improve this Doc View Source EndPoint Declaration public Point EndPoint { get; set; } Property Value Type Description Point | Improve this Doc View Source IsClosed Declaration public readonly bool IsClosed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source StartPoint Declaration public Point StartPoint { get; set; } Property Value Type Description Point Methods | Improve this Doc View Source Equals(Segment) Evaluates whether the current Segment is equal to another Segment . Declaration public bool Equals(Segment other) Parameters Type Name Description Segment other Segment to compare with. Returns Type Description System.Boolean true if the two Segment are equal, false otherwise. Remarks Two Segment are equal if their start and end Point are equal. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source Flip() Flips the current Segment by inverting the StartPoint and the EndPoint . Declaration public void Flip() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Length() Computes the length of the current Segment . Declaration public double Length() Returns Type Description System.Double The value corresponding to the Segment 's length. | Improve this Doc View Source PointAt(Double, CurveParameterFormat) Evaluates the current Segment at the given parameter. Declaration public Point PointAt(double parameter, CurveParameterFormat format) Parameters Type Name Description System.Double parameter Value of the parameter. CurveParameterFormat format Format of the parameter. Returns Type Description Point The Point on the Segment at the given parameter. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/BRIDGES.Geometry.Euclidean3D.Sphere.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.Sphere.html",
    "title": "Class Sphere | BRIDGES Documentation",
    "keywords": "Class Sphere Class defining a sphere in three-dimensional euclidean space. Inheritance System.Object Sphere Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public class Sphere : object Constructors | Improve this Doc View Source Sphere(Point, Double) Initialises a new instance of the Sphere class by defining its centre and radius. Declaration public Sphere(Point centre, double radius) Parameters Type Name Description Point centre Centre of the Circle . System.Double radius Radius of the Circle . Properties | Improve this Doc View Source Centre Gets the origin of the current Sphere . Declaration public Point Centre { get; set; } Property Value Type Description Point | Improve this Doc View Source Radius Gets or sets the radius of the circle. Declaration public double Radius { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(Circle) Evaluates whether the current Sphere is equal to another Sphere . Declaration public bool Equals(Circle other) Parameters Type Name Description Circle other Sphere to compare with. Returns Type Description System.Boolean true if the two Sphere are equal, false otherwise. Remarks Two Sphere are equal if their centre and radius are equal. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/BRIDGES.Geometry.Euclidean3D.Vector.html": {
    "href": "api/BRIDGES.Geometry.Euclidean3D.Vector.html",
    "title": "Struct Vector | BRIDGES Documentation",
    "keywords": "Struct Vector Structure defining a vector in three-dimensional euclidean space. Implements IAbelianGroup < Vector > IGroup < Vector > IMonoid < Vector > ISemiGroup < Vector > ILoop < Vector > IQuasiGroup < Vector > IMagma < Vector > IAddable < Vector > ISubtractable < Vector > IZeroable < Vector > IGroupAction < System.Double , Vector > IDotProduct < System.Double , Vector > INorm < Vector > IMetric < Vector > IEquatable < Vector > Namespace : BRIDGES.Geometry.Euclidean3D Assembly : BRIDGES.dll Syntax public struct Vector : IAbelianGroup<Vector>, IGroup<Vector>, IMonoid<Vector>, ISemiGroup<Vector>, ILoop<Vector>, IQuasiGroup<Vector>, IMagma<Vector>, IAddable<Vector>, ISubtractable<Vector>, IZeroable<Vector>, IGroupAction<double, Vector>, IDotProduct<double, Vector>, INorm<Vector>, IMetric<Vector> Constructors | Improve this Doc View Source Vector(Point, Point) Initialises a new instance of Vector structure from two Point . Declaration public Vector(Point start, Point end) Parameters Type Name Description Point start Point at start. Point end Point at end. | Improve this Doc View Source Vector(Vector) Initialises a new instance of the Vector structure from another Vector . Declaration public Vector(Vector vector) Parameters Type Name Description Vector vector Vector to copy. | Improve this Doc View Source Vector(Double, Double, Double) Initialises a new instance of the Vector structure by defining its three coordinates. Declaration public Vector(double x, double y, double z) Parameters Type Name Description System.Double x Value of the first coordinate. System.Double y Value of the second coordinate. System.Double z Value of the third coordinate. | Improve this Doc View Source Vector(Double[]) Initialises a new instance of Vector structure by defining its coordinates. Declaration public Vector(double[] coordinates) Parameters Type Name Description System.Double [] coordinates Value of the coordinates. Properties | Improve this Doc View Source Dimension Gets the dimension of the current Vector 's euclidean space. Declaration public readonly int Dimension { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Gets or sets the value of the coordinate at the given index. Declaration public double this[int index] { get; set; } Parameters Type Name Description System.Int32 index Index of the coordinate to get or set. Property Value Type Description System.Double The value of the coordinate at the given index. | Improve this Doc View Source WorldX Gets a new Vector with coordinates (1.0, 0.0, 0.0). Declaration public static readonly Vector WorldX { get; } Property Value Type Description Vector | Improve this Doc View Source WorldY Gets a new Vector with coordinates (0.0, 1.0, 0.0) Declaration public static readonly Vector WorldY { get; } Property Value Type Description Vector | Improve this Doc View Source WorldZ Gets a new Vector with coordinates (0.0, 0.0, 1.0) Declaration public static readonly Vector WorldZ { get; } Property Value Type Description Vector | Improve this Doc View Source X Gets or sets the first coordinate of the current Vector . Declaration public double X { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Y Gets or sets the second coordinate of the current Vector . Declaration public double Y { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Z Gets or sets the third coordinate of the current Vector . Declaration public double Z { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Zero Gets a new Vector with coordinates (0.0, 0.0, 0.0) Declaration public static readonly Vector Zero { get; } Property Value Type Description Vector Methods | Improve this Doc View Source Add(Vector, Vector) Computes the addition of two Vector . Declaration public static Vector Add(Vector left, Vector right) Parameters Type Name Description Vector left Vector for the addition. Vector right Vector for the addition. Returns Type Description Vector The new Vector resulting from the addition. | Improve this Doc View Source AngleBetween(Vector, Vector) Computes the angle between two Vector . Declaration public static double AngleBetween(Vector vectorA, Vector vectorB) Parameters Type Name Description Vector vectorA Vector for the angle evaluation. Vector vectorB Vector for the angle evaluation. Returns Type Description System.Double The value of the angle between the two Vector (in radians). | Improve this Doc View Source AngleWith(Vector) Computes the angle made by the current Vector with another Vector . Declaration public double AngleWith(Vector other) Parameters Type Name Description Vector other Vector to compare with. Returns Type Description System.Double The value of the angle (in radians). | Improve this Doc View Source AreOrthogonal(Vector, Vector) Evaluates whether two Vector are orthogonal. Declaration public static bool AreOrthogonal(Vector vectorA, Vector vectorB) Parameters Type Name Description Vector vectorA Vector for the comparison. Vector vectorB Vector for the comparison. Returns Type Description System.Boolean true if the two Vector are orthogonal, false otherwise. | Improve this Doc View Source AreParallel(Vector, Vector) Evaluates whether two Vector are parallel. Declaration public static bool AreParallel(Vector vectorA, Vector vectorB) Parameters Type Name Description Vector vectorA Vector for the comparison. Vector vectorB Vector for the comparison. Returns Type Description System.Boolean true if the two Vector are parallel, false otherwise. | Improve this Doc View Source CrossProduct(Vector, Vector) Returns the cross product of two Vector . Declaration public static Vector CrossProduct(Vector left, Vector right) Parameters Type Name Description Vector left Left Vector for the cross product. Vector right Right Vector for the cross product. Returns Type Description Vector A new Vector resulting from the cross product of two Vector . | Improve this Doc View Source Divide(Vector, Double) Computes the scalar division of a Vector with a -precision real number. Declaration public static Vector Divide(Vector operand, double divisor) Parameters Type Name Description Vector operand Vector to divide. System.Double divisor -precision real number to divide with. Returns Type Description Vector The new Vector resulting from the scalar division. | Improve this Doc View Source DotProduct(Vector, Vector) Computes the dot product of two Vector . Declaration public static double DotProduct(Vector left, Vector right) Parameters Type Name Description Vector left Vector for the dot product. Vector right Vector for the dot product. Returns Type Description System.Double The new Vector resulting from the dot product of two Vector . | Improve this Doc View Source Equals(Vector) Evaluates whether the current Vector is equal to another Vector . Declaration public bool Equals(Vector other) Parameters Type Name Description Vector other Vector to compare with. Returns Type Description System.Boolean true if the two Vector are equal, false otherwise. Remarks Two Vector are equal if their coordinates are equal. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetCoordinates() Gets the coordinates of the current Vector . Declaration public double[] GetCoordinates() Returns Type Description System.Double [] The array representation of the Vector 's coordinates. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source IsUnit() Evaluates whether the current Vector 's length is one. Declaration public bool IsUnit() Returns Type Description System.Boolean true if the current Vector is of unit length, false otherwise. | Improve this Doc View Source Length() Computes the length of the current Vector (using the L2-norm). Declaration public double Length() Returns Type Description System.Double The value of the current Vector 's length. | Improve this Doc View Source Multiply(Double, Vector) Computes the scalar multiplication of a Vector with a -precision real number. Declaration public static Vector Multiply(double factor, Vector operand) Parameters Type Name Description System.Double factor -precision real number. Vector operand Vector to multiply. Returns Type Description Vector The new Vector resulting from the scalar multiplication. | Improve this Doc View Source SquaredLength() Computes the squared length of the current Vector (using the L2-norm). Declaration public double SquaredLength() Returns Type Description System.Double The value of the current Vector 's squared length. | Improve this Doc View Source Subtract(Vector, Vector) Computes the subtraction of two Vector . Declaration public static Vector Subtract(Vector left, Vector right) Parameters Type Name Description Vector left Vector to subtract. Vector right Vector to subtract with. Returns Type Description Vector The new Vector resulting from the subtraction. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Unitise() Unitises the current Vector (using the L2-norm). Declaration public void Unitise() Operators | Improve this Doc View Source Addition(Vector, Point) Computes the addition of a Vector with a Point . Declaration public static Vector operator +(Vector vector, Point point) Parameters Type Name Description Vector vector Vector for the addition. Point point Point for the addition. Returns Type Description Vector The new Vector resulting from the addition. | Improve this Doc View Source Addition(Vector, Vector) Computes the addition of two Vector . Declaration public static Vector operator +(Vector left, Vector right) Parameters Type Name Description Vector left Vector for the addition. Vector right Vector for the addition. Returns Type Description Vector The new Vector resulting from the addition. | Improve this Doc View Source Division(Vector, Double) Computes the scalar division of a Vector with a -precision real number. Declaration public static Vector operator /(Vector operand, double divisor) Parameters Type Name Description Vector operand Vector to divide. System.Double divisor -precision real number to divide with. Returns Type Description Vector The new Vector resulting from the scalar division. | Improve this Doc View Source Implicit(Point to Vector) Casts a Point into a Vector . Declaration public static implicit operator Vector(Point point) Parameters Type Name Description Point point Point to cast. Returns Type Description Vector The new Vector resulting from the cast. | Improve this Doc View Source Multiply(Vector, Vector) Computes the dot product of two Vector . Declaration public static double operator *(Vector left, Vector right) Parameters Type Name Description Vector left Vector for the dot product. Vector right Vector for the dot product. Returns Type Description System.Double The new Vector resulting from the dot product of two Vector . | Improve this Doc View Source Multiply(Vector, Double) Declaration public static Vector operator *(Vector operand, double factor) Parameters Type Name Description Vector operand System.Double factor Returns Type Description Vector | Improve this Doc View Source Multiply(Double, Vector) Computes the scalar multiplication of a Vector with a -precision real number. Declaration public static Vector operator *(double factor, Vector operand) Parameters Type Name Description System.Double factor -precision real number. Vector operand Vector to multiply. Returns Type Description Vector The new Vector resulting from the scalar multiplication. | Improve this Doc View Source Subtraction(Vector, Point) Computes the subtraction of a Vector with a Point . Declaration public static Vector operator -(Vector vector, Point point) Parameters Type Name Description Vector vector Vector to subtract. Point point Point to subtract with. Returns Type Description Vector The new Vector resulting from the subtraction. | Improve this Doc View Source Subtraction(Vector, Vector) Computes the subtraction of two Vector . Declaration public static Vector operator -(Vector left, Vector right) Parameters Type Name Description Vector left Vector to subtract. Vector right Vector to subtract with. Returns Type Description Vector The new Vector resulting from the subtraction. | Improve this Doc View Source UnaryNegation(Vector) Computes the opposite of the given Vector . Declaration public static Vector operator -(Vector operand) Parameters Type Name Description Vector operand Vector to be opposed. Returns Type Description Vector The new Vector , opposite of the initial one. Explicit Interface Implementations | Improve this Doc View Source IAddable<Vector>.Add(Vector) Computes the addition of the current element with another element on the right. Declaration Vector IAddable<Vector>.Add(Vector right) Parameters Type Name Description Vector right Returns Type Description Vector The new element resulting from the addition. | Improve this Doc View Source IAddable<Vector>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration readonly bool IAddable<Vector>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<Vector>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration readonly bool IAddable<Vector>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source ISubtractable<Vector>.Subtract(Vector) Computes the subtraction of the current element with another element on the right. Declaration Vector ISubtractable<Vector>.Subtract(Vector right) Parameters Type Name Description Vector right Returns Type Description Vector The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<Vector>.Zero() Returns the neutral element of the addition. Declaration Vector IZeroable<Vector>.Zero() Returns Type Description Vector The neutral element of the addition. | Improve this Doc View Source IDotProduct<Double, Vector>.DotProduct(Vector) Computes the dot product of the current element with another element. Declaration double IDotProduct<double, Vector>.DotProduct(Vector right) Parameters Type Name Description Vector right Returns Type Description System.Double The value of the dot product of the two elements. | Improve this Doc View Source IMetric<Vector>.DistanceTo(Vector) Computes the distance of the current element to another element. Declaration double IMetric<Vector>.DistanceTo(Vector other) Parameters Type Name Description Vector other Returns Type Description System.Double The value of the distance between the two elements. | Improve this Doc View Source INorm<Vector>.Norm() Computes the norm the current T . Declaration double INorm<Vector>.Norm() Returns Type Description System.Double The value of the norm. | Improve this Doc View Source IGroup<Vector>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<Vector>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, Vector>.Divide(Double) Computes the right scalar division of the current element. Declaration Vector IGroupAction<double, Vector>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description Vector The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, Vector>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration Vector IGroupAction<double, Vector>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description Vector The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IGroupAction<TValue, T> IDotProduct<TValue, T> INorm<T> IMetric<T> IEquatable<>"
  },
  "api/BRIDGES.Geometry.Kernel.BSplineCurve-1.html": {
    "href": "api/BRIDGES.Geometry.Kernel.BSplineCurve-1.html",
    "title": "Class BSplineCurve<TPoint> | BRIDGES Documentation",
    "keywords": "Class BSplineCurve<TPoint> Class defining a generic B-Spline curve. Inheritance System.Object BSplineCurve<TPoint> BSplineCurve NurbsCurve Namespace : BRIDGES.Geometry.Kernel Assembly : BRIDGES.dll Syntax public class BSplineCurve<TPoint> : object where TPoint : IMagma<TPoint>, IGroupAction<double, TPoint> Type Parameters Name Description TPoint Type of point in the geometric space. Constructors | Improve this Doc View Source BSplineCurve() Initialises a new instance of BSplineCurve<TPoint> class. Declaration protected BSplineCurve() | Improve this Doc View Source BSplineCurve(Int32, IEnumerable<TPoint>) Initialises a new instance of BSplineCurve<TPoint> class. Declaration public BSplineCurve(int degree, IEnumerable<TPoint> controlPoints) Parameters Type Name Description System.Int32 degree Degree of the interpolating polynomials in the BSpline basis. IEnumerable <TPoint> controlPoints Control points of the BSplineCurve<TPoint> . | Improve this Doc View Source BSplineCurve(Int32, IEnumerable<Double>, IEnumerable<TPoint>) Initialises a new instance of BSplineCurve<TPoint> class by defining its fields. Declaration public BSplineCurve(int degree, IEnumerable<double> knotVector, IEnumerable<TPoint> controlPoints) Parameters Type Name Description System.Int32 degree Degree of the interpolating polynomials in the BSpline basis. IEnumerable < System.Double > knotVector Knot vector of the interpolating BSpline polynomial basis. IEnumerable <TPoint> controlPoints Control points of the BSplineCurve<TPoint> . Fields | Improve this Doc View Source _controlPoints Control points. Declaration protected List<TPoint> _controlPoints Field Value Type Description List <TPoint> | Improve this Doc View Source _knotVector Knot vector. Declaration protected List<double> _knotVector Field Value Type Description List < System.Double > Properties | Improve this Doc View Source Degree Gets the degree of the interpolating polynomials in the BSpline basis. Declaration public int Degree { get; protected set; } Property Value Type Description System.Int32 | Improve this Doc View Source DomainEnd Declaration public double DomainEnd { get; } Property Value Type Description System.Double | Improve this Doc View Source DomainStart Declaration public double DomainStart { get; } Property Value Type Description System.Double | Improve this Doc View Source EndPoint Declaration public TPoint EndPoint { get; } Property Value Type Description TPoint | Improve this Doc View Source IsClosed Declaration public bool IsClosed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source KnotCount Number of knots of the interpolating BSpline polynomial basis. Declaration public int KnotCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source PointCount Gets the number of control points of the curve. Declaration public int PointCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source StartPoint Declaration public TPoint StartPoint { get; } Property Value Type Description TPoint Methods | Improve this Doc View Source Flip() Declaration public void Flip() | Improve this Doc View Source GetKnot(Int32) Returns the knot at the given index. Declaration public double GetKnot(int index) Parameters Type Name Description System.Int32 index Index of the knot to look for. Returns Type Description System.Double The knot at the given index. | Improve this Doc View Source Length() Declaration public double Length() Returns Type Description System.Double | Improve this Doc View Source PointAt(Double, CurveParameterFormat) Declaration public TPoint PointAt(double parameter, CurveParameterFormat format) Parameters Type Name Description System.Double parameter CurveParameterFormat format Returns Type Description TPoint | Improve this Doc View Source SetControlPoints(IEnumerable<TPoint>) Sets the control points of the current BSplineCurve<TPoint> . Declaration protected void SetControlPoints(IEnumerable<TPoint> controlPoints) Parameters Type Name Description IEnumerable <TPoint> controlPoints Control points of the BSplineCurve<TPoint> . | Improve this Doc View Source SetKnotVector(IEnumerable<Double>) Sets the knot vector of the current BSplineCurve<TPoint> while ensuring its validity. Declaration protected void SetKnotVector(IEnumerable<double> knotVector) Parameters Type Name Description IEnumerable < System.Double > knotVector Knot vector to set. | Improve this Doc View Source SetUniformKnotVector(Double, Double, Int32, Int32) Creates and sets the knot vector for the current BSplineCurve<TPoint> with a uniform middle part. Declaration protected void SetUniformKnotVector(double domainStart, double domainEnd, int degree, int knotCount) Parameters Type Name Description System.Double domainStart Start value of the curve domain. System.Double domainEnd End value of the curve domain. System.Int32 degree Degree of the interpolating polynomials in the BSpline basis. System.Int32 knotCount Number of knots of the interpolating BSpline polynomial basis."
  },
  "api/BRIDGES.Geometry.Kernel.BSplineSurface-1.html": {
    "href": "api/BRIDGES.Geometry.Kernel.BSplineSurface-1.html",
    "title": "Class BSplineSurface<TPoint> | BRIDGES Documentation",
    "keywords": "Class BSplineSurface<TPoint> Class defining a generic B-Spline surface. Inheritance System.Object BSplineSurface<TPoint> BSplineSurface NurbsSurface Namespace : BRIDGES.Geometry.Kernel Assembly : BRIDGES.dll Syntax public class BSplineSurface<TPoint> : object where TPoint : IMagma<TPoint>, IGroupAction<double, TPoint> Type Parameters Name Description TPoint Type of point in the geometric space. Constructors | Improve this Doc View Source BSplineSurface() Initialises a new instance of BSplineSurface<TPoint> class. Declaration protected BSplineSurface() | Improve this Doc View Source BSplineSurface(Int32, Int32, TPoint[,]) Initialises a new instance of BSplineSurface<TPoint> class. Declaration public BSplineSurface(int degreeU, int degreeV, TPoint[, ] controlPoints) Parameters Type Name Description System.Int32 degreeU Degree of the interpolating polynomials in the BSpline basis in u-direction. System.Int32 degreeV Degree of the interpolating polynomials in the BSpline basis in v-direction. TPoint[,] controlPoints Control points of the BSplineSurface<TPoint> . Fields | Improve this Doc View Source _controlPoints Control points. Declaration protected TPoint[, ] _controlPoints Field Value Type Description TPoint[,] | Improve this Doc View Source _knotVectorU Knot vector in the u-direction. Declaration protected List<double> _knotVectorU Field Value Type Description List < System.Double > | Improve this Doc View Source _knotVectorV Knot vector in the v-direction. Declaration protected List<double> _knotVectorV Field Value Type Description List < System.Double > Properties | Improve this Doc View Source DegreeU Gets the degree of the interpolating polynomials in the BSpline basis in u-direction. Declaration public int DegreeU { get; protected set; } Property Value Type Description System.Int32 | Improve this Doc View Source DegreeV Gets the degree of the interpolating polynomials in the BSpline basis in v-direction. Declaration public int DegreeV { get; protected set; } Property Value Type Description System.Int32 | Improve this Doc View Source KnotCountU Number of knots of the interpolating BSpline polynomial basis in u-direction. Declaration public int KnotCountU { get; } Property Value Type Description System.Int32 | Improve this Doc View Source KnotCountV Number of knots of the interpolating BSpline polynomial basis in v-direction. Declaration public int KnotCountV { get; } Property Value Type Description System.Int32 | Improve this Doc View Source PointCountU Gets the number of control points of the surface in u-direction.. Declaration public int PointCountU { get; } Property Value Type Description System.Int32 | Improve this Doc View Source PointCountV Gets the number of control points of the surface in v-direction.. Declaration public int PointCountV { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source PointAt((Double, Double)) Evaluates the current surface at the given parameter. Declaration public TPoint PointAt((double, double) parameter) Parameters Type Name Description System.ValueTuple < System.Double , System.Double > parameter Value of the parameter. Returns Type Description TPoint The point on the surface at the given parameter. | Improve this Doc View Source SetControlPoints(TPoint[,]) Sets the control points of the current BSplineSurface<TPoint> . Declaration protected void SetControlPoints(TPoint[, ] controlPoints) Parameters Type Name Description TPoint[,] controlPoints Control points of the BSplineSurface<TPoint> . | Improve this Doc View Source SetUniformKnotVectors((Double, Double), (Double, Double), (Int32, Int32), (Int32, Int32)) Creates and sets the knot vector for the current BSplineSurface<TPoint> with a uniform middle part. Declaration protected void SetUniformKnotVectors((double, double) domainU, (double, double) domainV, (int, int) degrees, (int, int) knotCounts) Parameters Type Name Description System.ValueTuple < System.Double , System.Double > domainU Start and End value of the surface domain in u-direction. System.ValueTuple < System.Double , System.Double > domainV Start and End value of the surface domain in v-direction. System.ValueTuple < System.Int32 , System.Int32 > degrees Degrees of the interpolating polynomials in the BSpline basis in u and v directions. System.ValueTuple < System.Int32 , System.Int32 > knotCounts Number of knots of the interpolating BSpline polynomial basis in u and v directions."
  },
  "api/BRIDGES.Geometry.Kernel.CurveParameterFormat.html": {
    "href": "api/BRIDGES.Geometry.Kernel.CurveParameterFormat.html",
    "title": "Enum CurveParameterFormat | BRIDGES Documentation",
    "keywords": "Enum CurveParameterFormat Enumeration defining the format of the curve parameter. Namespace : BRIDGES.Geometry.Kernel Assembly : BRIDGES.dll Syntax public enum CurveParameterFormat : int Fields Name Description ArcLength The curve is spanned by a parameter from 0.0 (start) to L (end), where L is the length of the curve. Normalised The curve is spanned by a parameter ranging from BRIDGES.Geometry.Kernel.ICurve`1.DomainStart to BRIDGES.Geometry.Kernel.ICurve`1.DomainEnd ."
  },
  "api/BRIDGES.Geometry.Kernel.html": {
    "href": "api/BRIDGES.Geometry.Kernel.html",
    "title": "Namespace BRIDGES.Geometry.Kernel | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Geometry.Kernel Classes BSplineCurve<TPoint> Class defining a generic B-Spline curve. BSplineSurface<TPoint> Class defining a generic B-Spline surface. Enums CurveParameterFormat Enumeration defining the format of the curve parameter."
  },
  "api/BRIDGES.Geometry.Projective3D.html": {
    "href": "api/BRIDGES.Geometry.Projective3D.html",
    "title": "Namespace BRIDGES.Geometry.Projective3D | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Geometry.Projective3D Structs Point Structure defining a point in three-dimensional projective space."
  },
  "api/BRIDGES.Geometry.Projective3D.Point.html": {
    "href": "api/BRIDGES.Geometry.Projective3D.Point.html",
    "title": "Struct Point | BRIDGES Documentation",
    "keywords": "Struct Point Structure defining a point in three-dimensional projective space. Implements IAbelianGroup < Point > IGroup < Point > IMonoid < Point > ISemiGroup < Point > ILoop < Point > IQuasiGroup < Point > IMagma < Point > IAddable < Point > ISubtractable < Point > IZeroable < Point > IGroupAction < System.Double , Point > IEquatable < Point > Namespace : BRIDGES.Geometry.Projective3D Assembly : BRIDGES.dll Syntax public struct Point : IAbelianGroup<Point>, IGroup<Point>, IMonoid<Point>, ISemiGroup<Point>, ILoop<Point>, IQuasiGroup<Point>, IMagma<Point>, IAddable<Point>, ISubtractable<Point>, IZeroable<Point>, IGroupAction<double, Point> Constructors | Improve this Doc View Source Point(Point) Initialises a new instance of the Point structure from another Point . Declaration public Point(Point point) Parameters Type Name Description Point point Point to copy. | Improve this Doc View Source Point(Double, Double, Double, Double) Initialises a new instance of the Point structure by defining its three coordinates. Declaration public Point(double x0, double x1, double x2, double x3) Parameters Type Name Description System.Double x0 Value of the first coordinate. System.Double x1 Value of the second coordinate. System.Double x2 Value of the third coordinate. System.Double x3 Value of the fourth coordinate. | Improve this Doc View Source Point(Double[]) Initialises a new instance of Point structure by defining its coordinates. Declaration public Point(double[] coordinates) Parameters Type Name Description System.Double [] coordinates Value of the coordinates. Properties | Improve this Doc View Source Dimension Gets the dimension of the current Point 's projective space. Declaration public readonly int Dimension { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Gets or sets the value of the coordinate at the given index. Declaration public double this[int index] { get; set; } Parameters Type Name Description System.Int32 index Index of the coordinate to get or set. Property Value Type Description System.Double The value of the coordinate at the given index. | Improve this Doc View Source Zero Gets a new Point with coordinates (0.0, 0.0, 0.0, 0.0) Declaration public static readonly Point Zero { get; } Property Value Type Description Point Methods | Improve this Doc View Source Add(Point, Point) Computes the addition of two Point . Declaration public static Point Add(Point left, Point right) Parameters Type Name Description Point left Point for the addition. Point right Point for the addition. Returns Type Description Point The new Point resulting from the addition. | Improve this Doc View Source Divide(Point, Double) Computes the scalar division of a Point with a -precision real number. Declaration public static Point Divide(Point operand, double divisor) Parameters Type Name Description Point operand Point to divide. System.Double divisor -precision real number to divide with. Returns Type Description Point The new Point resulting from the scalar division. | Improve this Doc View Source Equals(Point) Evaluates whether the current Point is equal to another Point . Declaration public bool Equals(Point other) Parameters Type Name Description Point other Point to compare with. Returns Type Description System.Boolean true if the two Point are equal, false otherwise. Remarks Two Point are equal if their coordinates are equal. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetCoordinates() Gets the coordinates of the current Point . Declaration public double[] GetCoordinates() Returns Type Description System.Double [] The array representation of the Point 's coordinates. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Multiply(Double, Point) Computes the scalar multiplication of a Point with a -precision real number. Declaration public static Point Multiply(double factor, Point operand) Parameters Type Name Description System.Double factor -precision real number. Point operand Point to multiply. Returns Type Description Point The new Point resulting from the scalar multiplication. | Improve this Doc View Source Subtract(Point, Point) Computes the subtraction of two Point . Declaration public static Point Subtract(Point left, Point right) Parameters Type Name Description Point left Point to subtract. Point right Point to subtract with. Returns Type Description Point The new Point resulting from the subtraction. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Addition(Point, Point) Computes the addition of two Point . Declaration public static Point operator +(Point left, Point right) Parameters Type Name Description Point left Point for the addition. Point right Point for the addition. Returns Type Description Point The new Point resulting from the addition. | Improve this Doc View Source Division(Point, Double) Computes the scalar division of a Point with a -precision real number. Declaration public static Point operator /(Point operand, double divisor) Parameters Type Name Description Point operand Point to divide. System.Double divisor -precision real number to divide with. Returns Type Description Point The new Point resulting from the scalar division. | Improve this Doc View Source Explicit(Point to Point) Casts a Point into a Point . Declaration public static explicit operator Point(Point point) Parameters Type Name Description Point point Point to cast. Returns Type Description Point The new Point resulting from the cast. | Improve this Doc View Source Multiply(Point, Double) Declaration public static Point operator *(Point operand, double factor) Parameters Type Name Description Point operand System.Double factor Returns Type Description Point | Improve this Doc View Source Multiply(Double, Point) Computes the scalar multiplication of a Point with a -precision real number. Declaration public static Point operator *(double factor, Point operand) Parameters Type Name Description System.Double factor -precision real number. Point operand Point to multiply. Returns Type Description Point The new Point resulting from the scalar multiplication. | Improve this Doc View Source Subtraction(Point, Point) Computes the subtraction of two Point . Declaration public static Point operator -(Point left, Point right) Parameters Type Name Description Point left Point to subtract. Point right Point to subtract with. Returns Type Description Point The new Point resulting from the subtraction. | Improve this Doc View Source UnaryNegation(Point) Computes the opposite of the given Point . Declaration public static Point operator -(Point operand) Parameters Type Name Description Point operand Point to be opposed. Returns Type Description Point The new Point , opposite of the initial one. Explicit Interface Implementations | Improve this Doc View Source IAddable<Point>.Add(Point) Computes the addition of the current element with another element on the right. Declaration Point IAddable<Point>.Add(Point right) Parameters Type Name Description Point right Returns Type Description Point The new element resulting from the addition. | Improve this Doc View Source IAddable<Point>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration readonly bool IAddable<Point>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<Point>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration readonly bool IAddable<Point>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source ISubtractable<Point>.Subtract(Point) Computes the subtraction of the current element with another element on the right. Declaration Point ISubtractable<Point>.Subtract(Point right) Parameters Type Name Description Point right Returns Type Description Point The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<Point>.Zero() Returns the neutral element of the addition. Declaration Point IZeroable<Point>.Zero() Returns Type Description Point The neutral element of the addition. | Improve this Doc View Source IGroup<Point>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<Point>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, Point>.Divide(Double) Computes the right scalar division of the current element. Declaration Point IGroupAction<double, Point>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description Point The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, Point>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration Point IGroupAction<double, Point>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description Point The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IGroupAction<TValue, T> IEquatable<>"
  },
  "api/BRIDGES.html": {
    "href": "api/BRIDGES.html",
    "title": "Namespace BRIDGES | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES Classes Settings Static class defining global settings for the BRIDGES framework."
  },
  "api/BRIDGES.LinearAlgebra.Factorisation.html": {
    "href": "api/BRIDGES.LinearAlgebra.Factorisation.html",
    "title": "Namespace BRIDGES.LinearAlgebra.Factorisation | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.LinearAlgebra.Factorisation Classes SparseQR Class describing the QR factorisation of a CompressedColumn"
  },
  "api/BRIDGES.LinearAlgebra.Factorisation.SparseQR.html": {
    "href": "api/BRIDGES.LinearAlgebra.Factorisation.SparseQR.html",
    "title": "Class SparseQR | BRIDGES Documentation",
    "keywords": "Class SparseQR Class describing the QR factorisation of a CompressedColumn Inheritance System.Object SparseQR Namespace : BRIDGES.LinearAlgebra.Factorisation Assembly : BRIDGES.dll Syntax public class SparseQR : object Constructors | Improve this Doc View Source SparseQR(CompressedColumn) Initialises a new instance of the SparseQR class by computing the QR factorization of a CompressedColumn . Declaration public SparseQR(CompressedColumn matrix) Parameters Type Name Description CompressedColumn matrix Matrix over which the factorisation is performed. Methods | Improve this Doc View Source Solve(DenseVector) Solves the linear system : A·X=Y Declaration public DenseVector Solve(DenseVector vector) Parameters Type Name Description DenseVector vector DenseVector Y of the linear system. Returns Type Description DenseVector The DenseVector X, solution of the system. Remarks Since pre-factorisations are dedicated to speed, no exception handeling is provided. | Improve this Doc View Source Solve(SparseVector) Solves the linear system : A·X=Y Declaration public SparseVector Solve(SparseVector vector) Parameters Type Name Description SparseVector vector SparseVector Y of the linear system. Returns Type Description SparseVector The Vector X, solution of the system. Remarks Since pre-factorisations are dedicated to speed, no exception handeling is provided. | Improve this Doc View Source Solve(Vector) Solves the linear system : A·X=Y Declaration public Vector Solve(Vector vector) Parameters Type Name Description Vector vector Vector Y of the linear system. Returns Type Description Vector The Vector X, solution of the system. Remarks Since pre-factorisations are dedicated to speed, no exception handeling is provided. | Improve this Doc View Source Solve(Double[]) Solves the linear system : A·X=Y Declaration public double[] Solve(double[] components) Parameters Type Name Description System.Double [] components -precision array representing the Y vector of the linear system. Returns Type Description System.Double [] The -precision array representing the X vector, solution of the system. Remarks Since pre-factorisations are dedicated to speed, no exception handeling is provided."
  },
  "api/BRIDGES.LinearAlgebra.Matrices.DenseMatrix.html": {
    "href": "api/BRIDGES.LinearAlgebra.Matrices.DenseMatrix.html",
    "title": "Class DenseMatrix | BRIDGES Documentation",
    "keywords": "Class DenseMatrix Class defining a dense matrix. Inheritance System.Object Matrix DenseMatrix Implements IAbelianGroup < Matrix > IGroup < Matrix > IMonoid < Matrix > ISemiGroup < Matrix > ILoop < Matrix > IQuasiGroup < Matrix > IMagma < Matrix > IAddable < Matrix > ISubtractable < Matrix > IZeroable < Matrix > ISemiGroup < Matrix > IMagma < Matrix > IMultiplicable < Matrix > IGroupAction < System.Double , Matrix > IAbelianGroup < DenseMatrix > IGroup < DenseMatrix > IMonoid < DenseMatrix > ISemiGroup < DenseMatrix > ILoop < DenseMatrix > IQuasiGroup < DenseMatrix > IMagma < DenseMatrix > IAddable < DenseMatrix > ISubtractable < DenseMatrix > IZeroable < DenseMatrix > ISemiGroup < DenseMatrix > IMagma < DenseMatrix > IMultiplicable < DenseMatrix > IGroupAction < System.Double , DenseMatrix > Inherited Members Matrix.Add(Matrix, Matrix) Matrix.Subtract(Matrix, Matrix) Matrix.Multiply(Matrix, Matrix) Matrix.TransposeMultiplySelf(Matrix) Matrix.Multiply(Double, Matrix) Matrix.Multiply(Matrix, Double) Matrix.Divide(Matrix, Double) Matrix.Multiply(Matrix, Vector) Matrix.Multiply(Matrix, DenseVector) Matrix.Multiply(Matrix, SparseVector) Matrix.TransposeMultiply(Matrix, Vector) Matrix.TransposeMultiply(Matrix, DenseVector) Matrix.TransposeMultiply(Matrix, SparseVector) Matrix.IAddable<Matrix>.IsAssociative Matrix.IAddable<Matrix>.IsCommutative Matrix.IAddable<Matrix>.Add(Matrix) Matrix.ISubtractable<Matrix>.Subtract(Matrix) Matrix.IGroup<Matrix>.Opposite() Matrix.IZeroable<Matrix>.Zero() Matrix.IMultiplicable<Matrix>.IsAssociative Matrix.IMultiplicable<Matrix>.IsCommutative Matrix.IMultiplicable<Matrix>.Multiply(Matrix) Matrix.IGroupAction<Double, Matrix>.Multiply(Double) Matrix.IGroupAction<Double, Matrix>.Divide(Double) Namespace : BRIDGES.LinearAlgebra.Matrices Assembly : BRIDGES.dll Syntax public sealed class DenseMatrix : Matrix, IAbelianGroup<Matrix>, IGroup<Matrix>, IMonoid<Matrix>, ISemiGroup<Matrix>, ILoop<Matrix>, IQuasiGroup<Matrix>, IMagma<Matrix>, IAddable<Matrix>, ISubtractable<Matrix>, IZeroable<Matrix>, ISemiGroup<Matrix>, IMagma<Matrix>, IMultiplicable<Matrix>, IGroupAction<double, Matrix>, IAbelianGroup<DenseMatrix>, IGroup<DenseMatrix>, IMonoid<DenseMatrix>, ISemiGroup<DenseMatrix>, ILoop<DenseMatrix>, IQuasiGroup<DenseMatrix>, IMagma<DenseMatrix>, IAddable<DenseMatrix>, ISubtractable<DenseMatrix>, IZeroable<DenseMatrix>, ISemiGroup<DenseMatrix>, IMagma<DenseMatrix>, IMultiplicable<DenseMatrix>, IGroupAction<double, DenseMatrix> Constructors | Improve this Doc View Source DenseMatrix(Int32, Int32) Initialises a new instance of the DenseMatrix class by defining its number of row and column. Declaration public DenseMatrix(int rowCount, int columnCount) Parameters Type Name Description System.Int32 rowCount Number of rows of the DenseMatrix . System.Int32 columnCount Number of columns of the DenseMatrix . | Improve this Doc View Source DenseMatrix(Int32, Int32, Double[]) Initialises a new instance of the DenseMatrix class by defining its size and values row by row. Declaration public DenseMatrix(int rowCount, int columnCount, double[] components) Parameters Type Name Description System.Int32 rowCount Number of rows of the DenseMatrix . System.Int32 columnCount Number of columns of the DenseMatrix . System.Double [] components Component values given row by row. Properties | Improve this Doc View Source ColumnCount Gets the number of columns in the current matrix. Declaration public override int ColumnCount { get; } Property Value Type Description System.Int32 Overrides Matrix.ColumnCount | Improve this Doc View Source Item[Int32, Int32] Gets the value of the current matrix at the given row and column. Declaration public override double this[int row, int column] { get; } Parameters Type Name Description System.Int32 row Row of the value to get. System.Int32 column Column of the value to get. Property Value Type Description System.Double The value at the given row and column index. Overrides Matrix.Item[Int32, Int32] | Improve this Doc View Source RowCount Gets the number of rows in the current matrix. Declaration public override int RowCount { get; } Property Value Type Description System.Int32 Overrides Matrix.RowCount Methods | Improve this Doc View Source Add(DenseMatrix, DenseMatrix) Computes the addition of two DenseMatrix . Declaration public static DenseMatrix Add(DenseMatrix left, DenseMatrix right) Parameters Type Name Description DenseMatrix left Left DenseMatrix for the addition. DenseMatrix right Right DenseMatrix for the addition. Returns Type Description DenseMatrix The new DenseMatrix resulting from the addition. | Improve this Doc View Source Add(DenseMatrix, Matrix) Computes the addition of a DenseMatrix with a Matrix on the right. Declaration public static DenseMatrix Add(DenseMatrix left, Matrix right) Parameters Type Name Description DenseMatrix left Left DenseMatrix for the addition. Matrix right Right Matrix for the addition. Returns Type Description DenseMatrix The new DenseMatrix resulting from the addition. | Improve this Doc View Source Add(DenseMatrix, CompressedColumn) Computes the addition of a DenseMatrix with a CompressedColumn . Declaration public static DenseMatrix Add(DenseMatrix left, CompressedColumn right) Parameters Type Name Description DenseMatrix left Left DenseMatrix for the addition. CompressedColumn right Right CompressedColumn for the addition. Returns Type Description DenseMatrix The new DenseMatrix resulting from the addition. | Improve this Doc View Source Add(DenseMatrix, CompressedRow) Computes the addition of a DenseMatrix with a CompressedRow . Declaration public static DenseMatrix Add(DenseMatrix left, CompressedRow right) Parameters Type Name Description DenseMatrix left Left DenseMatrix for the addition. CompressedRow right Right CompressedRow for the addition. Returns Type Description DenseMatrix The new DenseMatrix resulting from the addition. | Improve this Doc View Source Add(DenseMatrix, SparseMatrix) Computes the addition of a DenseMatrix with a SparseMatrix . Declaration public static DenseMatrix Add(DenseMatrix left, SparseMatrix right) Parameters Type Name Description DenseMatrix left Left DenseMatrix for the addition. SparseMatrix right Right SparseMatrix for the addition. Returns Type Description DenseMatrix The new DenseMatrix resulting from the addition. | Improve this Doc View Source Add(Matrix, DenseMatrix) Computes the addition of a Matrix with a DenseMatrix . Declaration public static DenseMatrix Add(Matrix left, DenseMatrix right) Parameters Type Name Description Matrix left Left Matrix for the addition. DenseMatrix right Right DenseMatrix for the addition. Returns Type Description DenseMatrix The new DenseMatrix resulting from the addition. | Improve this Doc View Source Add(CompressedColumn, DenseMatrix) Computes the addition of a CompressedColumn with a DenseMatrix . Declaration public static DenseMatrix Add(CompressedColumn left, DenseMatrix right) Parameters Type Name Description CompressedColumn left Left CompressedColumn for the addition. DenseMatrix right Right DenseMatrix for the addition. Returns Type Description DenseMatrix The new DenseMatrix resulting from the addition. | Improve this Doc View Source Add(CompressedRow, DenseMatrix) Computes the addition of a CompressedRow with a DenseMatrix . Declaration public static DenseMatrix Add(CompressedRow left, DenseMatrix right) Parameters Type Name Description CompressedRow left Left CompressedRow for the addition. DenseMatrix right Right DenseMatrix for the addition. Returns Type Description DenseMatrix The new DenseMatrix resulting from the addition. | Improve this Doc View Source Add(SparseMatrix, DenseMatrix) Computes the addition of a SparseMatrix with a DenseMatrix . Declaration public static DenseMatrix Add(SparseMatrix left, DenseMatrix right) Parameters Type Name Description SparseMatrix left Left SparseMatrix for the addition. DenseMatrix right Right DenseMatrix for the addition. Returns Type Description DenseMatrix The new DenseMatrix resulting from the addition. | Improve this Doc View Source Divide(DenseMatrix, Double) Computes the scalar division of a DenseMatrix with a -precision real number. Declaration public static DenseMatrix Divide(DenseMatrix operand, double divisor) Parameters Type Name Description DenseMatrix operand DenseMatrix to divide. System.Double divisor -precision real number to divide with. Returns Type Description DenseMatrix The new DenseMatrix resulting from the scalar division. | Improve this Doc View Source Identity(Int32) Returns the neutral Matrix for the multiplication. Declaration public static DenseMatrix Identity(int size) Parameters Type Name Description System.Int32 size Number of rows and columns of the Matrix . Returns Type Description DenseMatrix The DenseMatrix of the given size, with ones on the diagonal and zeros elsewhere. | Improve this Doc View Source Multiply(DenseMatrix, DenseMatrix) Computes the multiplication of two DenseMatrix . Declaration public static DenseMatrix Multiply(DenseMatrix left, DenseMatrix right) Parameters Type Name Description DenseMatrix left Left DenseMatrix for the multiplication. DenseMatrix right Right DenseMatrix for the multiplication. Returns Type Description DenseMatrix The new DenseMatrix resulting from the multiplication. | Improve this Doc View Source Multiply(DenseMatrix, Matrix) Computes the multiplication of a DenseMatrix with a Matrix . Declaration public static DenseMatrix Multiply(DenseMatrix left, Matrix right) Parameters Type Name Description DenseMatrix left Left DenseMatrix for the multiplication. Matrix right Right Matrix for the multiplication. Returns Type Description DenseMatrix The new DenseMatrix resulting from the multiplication. | Improve this Doc View Source Multiply(DenseMatrix, CompressedColumn) Computes the multiplication of a DenseMatrix with a CompressedColumn . Declaration public static DenseMatrix Multiply(DenseMatrix left, CompressedColumn right) Parameters Type Name Description DenseMatrix left Left DenseMatrix for the multiplication. CompressedColumn right Right CompressedColumn for the multiplication. Returns Type Description DenseMatrix The new DenseMatrix resulting from the multiplication. | Improve this Doc View Source Multiply(DenseMatrix, CompressedRow) Computes the multiplication of a DenseMatrix with a CompressedRow . Declaration public static DenseMatrix Multiply(DenseMatrix left, CompressedRow right) Parameters Type Name Description DenseMatrix left Left DenseMatrix for the multiplication. CompressedRow right Right CompressedRow for the multiplication. Returns Type Description DenseMatrix The new DenseMatrix resulting from the multiplication. | Improve this Doc View Source Multiply(DenseMatrix, SparseMatrix) Computes the multiplication of a DenseMatrix with a SparseMatrix . Declaration public static DenseMatrix Multiply(DenseMatrix left, SparseMatrix right) Parameters Type Name Description DenseMatrix left Left DenseMatrix for the multiplication. SparseMatrix right Right SparseMatrix for the multiplication. Returns Type Description DenseMatrix The new DenseMatrix resulting from the multiplication. | Improve this Doc View Source Multiply(DenseMatrix, DenseVector) Computes the right multiplication of a DenseMatrix with a DenseVector : A*V . Declaration public static DenseVector Multiply(DenseMatrix matrix, DenseVector vector) Parameters Type Name Description DenseMatrix matrix DenseMatrix to multiply on the right. DenseVector vector DenseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source Multiply(DenseMatrix, SparseVector) Computes the right multiplication of a DenseMatrix with a SparseVector : A*V . Declaration public static DenseVector Multiply(DenseMatrix matrix, SparseVector vector) Parameters Type Name Description DenseMatrix matrix DenseMatrix to multiply on the right. SparseVector vector SparseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source Multiply(DenseMatrix, Vector) Computes the right multiplication of a DenseMatrix with a Vector : A*V . Declaration public static Vector Multiply(DenseMatrix matrix, Vector vector) Parameters Type Name Description DenseMatrix matrix DenseMatrix to multiply on the right. Vector vector Vector to multiply with. Returns Type Description Vector The new DenseVector as a Vector resulting from the multiplication. | Improve this Doc View Source Multiply(DenseMatrix, Double) Computes the scalar multiplication of a DenseMatrix with a -precision real number. Declaration public static DenseMatrix Multiply(DenseMatrix operand, double factor) Parameters Type Name Description DenseMatrix operand DenseMatrix to multiply. System.Double factor -precision real number. Returns Type Description DenseMatrix The new DenseMatrix resulting from the scalar multiplication. | Improve this Doc View Source Multiply(Matrix, DenseMatrix) Computes the multiplication of a Matrix with a DenseMatrix . Declaration public static DenseMatrix Multiply(Matrix left, DenseMatrix right) Parameters Type Name Description Matrix left Left Matrix for the multiplication. DenseMatrix right Right DenseMatrix for the multiplication. Returns Type Description DenseMatrix The new DenseMatrix resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedColumn, DenseMatrix) Computes the multiplication of a CompressedColumn with a DenseMatrix . Declaration public static DenseMatrix Multiply(CompressedColumn left, DenseMatrix right) Parameters Type Name Description CompressedColumn left Left CompressedColumn for the multiplication. DenseMatrix right Right DenseMatrix for the multiplication. Returns Type Description DenseMatrix The new DenseMatrix resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedRow, DenseMatrix) Computes the multiplication of a CompressedRow with a DenseMatrix . Declaration public static DenseMatrix Multiply(CompressedRow left, DenseMatrix right) Parameters Type Name Description CompressedRow left Left CompressedRow for the multiplication. DenseMatrix right Right DenseMatrix for the multiplication. Returns Type Description DenseMatrix The new DenseMatrix resulting from the multiplication. | Improve this Doc View Source Multiply(SparseMatrix, DenseMatrix) Computes the multiplication of a SparseMatrix with a DenseMatrix . Declaration public static DenseMatrix Multiply(SparseMatrix left, DenseMatrix right) Parameters Type Name Description SparseMatrix left Left SparseMatrix for the multiplication. DenseMatrix right Right DenseMatrix for the multiplication. Returns Type Description DenseMatrix The new DenseMatrix resulting from the multiplication. | Improve this Doc View Source Multiply(Double, DenseMatrix) Computes the scalar multiplication of a DenseMatrix with a -precision real number. Declaration public static DenseMatrix Multiply(double factor, DenseMatrix operand) Parameters Type Name Description System.Double factor -precision real number. DenseMatrix operand DenseMatrix to multiply. Returns Type Description DenseMatrix The new DenseMatrix resulting from the scalar multiplication. | Improve this Doc View Source Opposite() Replaces the current element with its opposite. Declaration protected override void Opposite() Overrides Matrix.Opposite() | Improve this Doc View Source Subtract(DenseMatrix, DenseMatrix) Computes the subtraction of two DenseMatrix . Declaration public static DenseMatrix Subtract(DenseMatrix left, DenseMatrix right) Parameters Type Name Description DenseMatrix left Left DenseMatrix to subtract. DenseMatrix right Right DenseMatrix to subtract with. Returns Type Description DenseMatrix The new DenseMatrix resulting from the subtraction. | Improve this Doc View Source Subtract(DenseMatrix, Matrix) Computes the subtraction of a DenseMatrix with a Matrix . Declaration public static DenseMatrix Subtract(DenseMatrix left, Matrix right) Parameters Type Name Description DenseMatrix left Left DenseMatrix to subtract. Matrix right Right Matrix to subtract with. Returns Type Description DenseMatrix The new DenseMatrix resulting from the subtraction. | Improve this Doc View Source Subtract(DenseMatrix, CompressedColumn) Computes the subtraction of a DenseMatrix with a CompressedColumn . Declaration public static DenseMatrix Subtract(DenseMatrix left, CompressedColumn right) Parameters Type Name Description DenseMatrix left Left DenseMatrix to subtract. CompressedColumn right Right CompressedColumn to subtract with. Returns Type Description DenseMatrix The new DenseMatrix resulting from the subtraction. | Improve this Doc View Source Subtract(DenseMatrix, CompressedRow) Computes the subtraction of a DenseMatrix with a CompressedRow . Declaration public static DenseMatrix Subtract(DenseMatrix left, CompressedRow right) Parameters Type Name Description DenseMatrix left Left DenseMatrix to subtract. CompressedRow right Right CompressedRow to subtract with. Returns Type Description DenseMatrix The new DenseMatrix resulting from the subtraction. | Improve this Doc View Source Subtract(DenseMatrix, SparseMatrix) Computes the subtraction of a DenseMatrix with a SparseMatrix . Declaration public static DenseMatrix Subtract(DenseMatrix left, SparseMatrix right) Parameters Type Name Description DenseMatrix left Left DenseMatrix to subtract. SparseMatrix right Right SparseMatrix to subtract with. Returns Type Description DenseMatrix The new DenseMatrix resulting from the subtraction. | Improve this Doc View Source Subtract(Matrix, DenseMatrix) Computes the subtraction of a Matrix with a DenseMatrix . Declaration public static DenseMatrix Subtract(Matrix left, DenseMatrix right) Parameters Type Name Description Matrix left Left Matrix to subtract. DenseMatrix right Right DenseMatrix to subtract with. Returns Type Description DenseMatrix The new DenseMatrix resulting from the subtraction. | Improve this Doc View Source Subtract(CompressedColumn, DenseMatrix) Computes the subtraction of a CompressedColumn with a DenseMatrix . Declaration public static DenseMatrix Subtract(CompressedColumn left, DenseMatrix right) Parameters Type Name Description CompressedColumn left Left CompressedColumn to subtract. DenseMatrix right Right DenseMatrix to subtract with. Returns Type Description DenseMatrix The new DenseMatrix resulting from the subtraction. | Improve this Doc View Source Subtract(CompressedRow, DenseMatrix) Computes the subtraction of a CompressedRow with a DenseMatrix . Declaration public static DenseMatrix Subtract(CompressedRow left, DenseMatrix right) Parameters Type Name Description CompressedRow left Left CompressedRow to subtract. DenseMatrix right Right DenseMatrix to subtract with. Returns Type Description DenseMatrix The new DenseMatrix resulting from the subtraction. | Improve this Doc View Source Subtract(SparseMatrix, DenseMatrix) Computes the subtraction of a SparseMatrix with a DenseMatrix . Declaration public static DenseMatrix Subtract(SparseMatrix left, DenseMatrix right) Parameters Type Name Description SparseMatrix left Left SparseMatrix to subtract. DenseMatrix right Right DenseMatrix to subtract with. Returns Type Description DenseMatrix The new DenseMatrix resulting from the subtraction. | Improve this Doc View Source Transpose() Transposes the current matrix. Declaration public override void Transpose() Overrides Matrix.Transpose() | Improve this Doc View Source TransposeMultiply(DenseMatrix, DenseVector) Computes the right multiplication of a transposed DenseMatrix with a DenseVector : At*V . Declaration public static DenseVector TransposeMultiply(DenseMatrix matrix, DenseVector vector) Parameters Type Name Description DenseMatrix matrix DenseMatrix to transpose then multiply on the right. DenseVector vector DenseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(DenseMatrix, SparseVector) Computes the right multiplication of a transposed DenseMatrix with a SparseVector : At*V . Declaration public static DenseVector TransposeMultiply(DenseMatrix matrix, SparseVector vector) Parameters Type Name Description DenseMatrix matrix DenseMatrix to transpose then multiply on the right. SparseVector vector SparseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(DenseMatrix, Vector) Computes the right multiplication of a transposed DenseMatrix with a Vector : At*V . Declaration public static Vector TransposeMultiply(DenseMatrix matrix, Vector vector) Parameters Type Name Description DenseMatrix matrix DenseMatrix to transpose then multiply on the right. Vector vector Vector to multiply with. Returns Type Description Vector The new DenseVector as a Vector resulting from the multiplication. | Improve this Doc View Source TransposeMultiplySelf(DenseMatrix) Computes the left multiplication of a DenseMatrix with its transposition : At*A . Declaration public static DenseMatrix TransposeMultiplySelf(DenseMatrix matrix) Parameters Type Name Description DenseMatrix matrix transposed DenseMatrix for the multiplication. Returns Type Description DenseMatrix The new DenseMatrix resulting from the multiplication. | Improve this Doc View Source Zero(Int32, Int32) Returns the neutral DenseMatrix for the addition. Declaration public static DenseMatrix Zero(int rowCount, int columnCount) Parameters Type Name Description System.Int32 rowCount Number of rows of the DenseMatrix . System.Int32 columnCount Number of columns of the DenseMatrix . Returns Type Description DenseMatrix The DenseMatrix of the given size and with zeros on every coordinates. Explicit Interface Implementations | Improve this Doc View Source IAddable<DenseMatrix>.Add(DenseMatrix) Computes the addition of the current element with another element on the right. Declaration DenseMatrix IAddable<DenseMatrix>.Add(DenseMatrix right) Parameters Type Name Description DenseMatrix right Returns Type Description DenseMatrix The new element resulting from the addition. | Improve this Doc View Source IAddable<DenseMatrix>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration bool IAddable<DenseMatrix>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<DenseMatrix>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration bool IAddable<DenseMatrix>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IMultiplicable<DenseMatrix>.IsAssociative Evaluates whether the multiplication is associative : a * (b * c) = (a * b) * c. Declaration bool IMultiplicable<DenseMatrix>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<DenseMatrix>.IsCommutative Evaluates whether the multiplication is commutative : a * b = b * a. Declaration bool IMultiplicable<DenseMatrix>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<DenseMatrix>.Multiply(DenseMatrix) Computes the multiplication of the current element with another element on the right. Declaration DenseMatrix IMultiplicable<DenseMatrix>.Multiply(DenseMatrix right) Parameters Type Name Description DenseMatrix right Returns Type Description DenseMatrix The new element resulting from the multiplication. | Improve this Doc View Source ISubtractable<DenseMatrix>.Subtract(DenseMatrix) Computes the subtraction of the current element with another element on the right. Declaration DenseMatrix ISubtractable<DenseMatrix>.Subtract(DenseMatrix right) Parameters Type Name Description DenseMatrix right Returns Type Description DenseMatrix The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<DenseMatrix>.Zero() Returns the neutral element of the addition. Declaration DenseMatrix IZeroable<DenseMatrix>.Zero() Returns Type Description DenseMatrix The neutral element of the addition. | Improve this Doc View Source IGroup<DenseMatrix>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<DenseMatrix>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, DenseMatrix>.Divide(Double) Computes the right scalar division of the current element. Declaration DenseMatrix IGroupAction<double, DenseMatrix>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description DenseMatrix The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, DenseMatrix>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration DenseMatrix IGroupAction<double, DenseMatrix>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description DenseMatrix The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> ISemiGroup<T> IMagma<T> IMultiplicable<T> IGroupAction<TValue, T> IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> ISemiGroup<T> IMagma<T> IMultiplicable<T> IGroupAction<TValue, T>"
  },
  "api/BRIDGES.LinearAlgebra.Matrices.html": {
    "href": "api/BRIDGES.LinearAlgebra.Matrices.html",
    "title": "Namespace BRIDGES.LinearAlgebra.Matrices | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.LinearAlgebra.Matrices Classes DenseMatrix Class defining a dense matrix. Matrix Class defining a matrix. SparseMatrix Class defining a sparse matrix."
  },
  "api/BRIDGES.LinearAlgebra.Matrices.Matrix.html": {
    "href": "api/BRIDGES.LinearAlgebra.Matrices.Matrix.html",
    "title": "Class Matrix | BRIDGES Documentation",
    "keywords": "Class Matrix Class defining a matrix. Inheritance System.Object Matrix DenseMatrix SparseMatrix Implements IAbelianGroup < Matrix > IGroup < Matrix > IMonoid < Matrix > ISemiGroup < Matrix > ILoop < Matrix > IQuasiGroup < Matrix > IMagma < Matrix > IAddable < Matrix > ISubtractable < Matrix > IZeroable < Matrix > ISemiGroup < Matrix > IMagma < Matrix > IMultiplicable < Matrix > IGroupAction < System.Double , Matrix > Namespace : BRIDGES.LinearAlgebra.Matrices Assembly : BRIDGES.dll Syntax public abstract class Matrix : object, IAbelianGroup<Matrix>, IGroup<Matrix>, IMonoid<Matrix>, ISemiGroup<Matrix>, ILoop<Matrix>, IQuasiGroup<Matrix>, IMagma<Matrix>, IAddable<Matrix>, ISubtractable<Matrix>, IZeroable<Matrix>, ISemiGroup<Matrix>, IMagma<Matrix>, IMultiplicable<Matrix>, IGroupAction<double, Matrix> Constructors | Improve this Doc View Source Matrix() Initialises a new instance of the Matrix class. Declaration protected Matrix() Properties | Improve this Doc View Source ColumnCount Gets the number of columns in the current matrix. Declaration public abstract int ColumnCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32, Int32] Gets the value of the current matrix at the given row and column. Declaration public abstract double this[int row, int column] { get; } Parameters Type Name Description System.Int32 row Row of the value to get. System.Int32 column Column of the value to get. Property Value Type Description System.Double The value at the given row and column index. | Improve this Doc View Source RowCount Gets the number of rows in the current matrix. Declaration public abstract int RowCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(Matrix, Matrix) Computes the addition of two Matrix . Declaration public static Matrix Add(Matrix left, Matrix right) Parameters Type Name Description Matrix left Left Matrix for the addition. Matrix right Right Matrix for the addition. Returns Type Description Matrix The new Matrix resulting from the addition. | Improve this Doc View Source Divide(Matrix, Double) Computes the scalar division of a Matrix with a -precision real number. Declaration public static Matrix Divide(Matrix operand, double divisor) Parameters Type Name Description Matrix operand Matrix to divide. System.Double divisor -precision real number to divide with. Returns Type Description Matrix The new Matrix resulting from the scalar division. | Improve this Doc View Source Identity(Int32) Returns the neutral Matrix for the multiplication. Declaration public static Matrix Identity(int size) Parameters Type Name Description System.Int32 size Number of rows and columns of the Matrix . Returns Type Description Matrix The CompressedColumn , as a Matrix , of the given size, with ones on the diagonal and zeros elsewhere. | Improve this Doc View Source Multiply(Matrix, Matrix) Computes the multiplication of two Matrix . Declaration public static Matrix Multiply(Matrix left, Matrix right) Parameters Type Name Description Matrix left Left Matrix for the multiplication. Matrix right Right Matrix for the multiplication. Returns Type Description Matrix The new Matrix resulting from the multiplication. | Improve this Doc View Source Multiply(Matrix, DenseVector) Computes the right multiplication of a Matrix with a DenseVector : A*V . Declaration public static DenseVector Multiply(Matrix matrix, DenseVector vector) Parameters Type Name Description Matrix matrix Matrix to multiply on the right. DenseVector vector DenseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source Multiply(Matrix, SparseVector) Computes the right multiplication of a Matrix with a SparseVector : A*V . Declaration public static Vector Multiply(Matrix matrix, SparseVector vector) Parameters Type Name Description Matrix matrix Matrix to multiply on the right. SparseVector vector SparseVector to multiply with. Returns Type Description Vector The new Vector resulting from the multiplication. | Improve this Doc View Source Multiply(Matrix, Vector) Computes the right multiplication of a Matrix with a Vector : A*V . Declaration public static Vector Multiply(Matrix matrix, Vector vector) Parameters Type Name Description Matrix matrix Matrix to multiply on the right. Vector vector Vector to multiply with. Returns Type Description Vector The new Vector resulting from the multiplication. | Improve this Doc View Source Multiply(Matrix, Double) Computes the scalar multiplication of a Matrix with a -precision real number on the right. Declaration public static Matrix Multiply(Matrix operand, double factor) Parameters Type Name Description Matrix operand Matrix to multiply on the right. System.Double factor -precision real number. Returns Type Description Matrix The new Matrix resulting from the scalar multiplication. | Improve this Doc View Source Multiply(Double, Matrix) Computes the scalar multiplication of a Matrix with a -precision real number on the left. Declaration public static Matrix Multiply(double factor, Matrix operand) Parameters Type Name Description System.Double factor -precision real number. Matrix operand Matrix to multiply on the left. Returns Type Description Matrix The new Matrix resulting from the scalar multiplication. | Improve this Doc View Source Opposite() Replaces the current element with its opposite. Declaration protected abstract void Opposite() | Improve this Doc View Source Subtract(Matrix, Matrix) Computes the subtraction of two Matrix . Declaration public static Matrix Subtract(Matrix left, Matrix right) Parameters Type Name Description Matrix left Left Matrix to subtract. Matrix right Right Matrix to subtract with. Returns Type Description Matrix The new Matrix resulting from the subtraction. | Improve this Doc View Source Transpose() Transposes the current matrix. Declaration public abstract void Transpose() | Improve this Doc View Source TransposeMultiply(Matrix, DenseVector) Computes the right multiplication of a transposed Matrix with a DenseVector : At*V . Declaration public static DenseVector TransposeMultiply(Matrix matrix, DenseVector vector) Parameters Type Name Description Matrix matrix Matrix to transpose then multiply on the right. DenseVector vector DenseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(Matrix, SparseVector) Computes the right multiplication of a transposed Matrix with a SparseVector : At*V . Declaration public static Vector TransposeMultiply(Matrix matrix, SparseVector vector) Parameters Type Name Description Matrix matrix Matrix to transpose then multiply on the right. SparseVector vector SparseVector to multiply with. Returns Type Description Vector The new Vector resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(Matrix, Vector) Computes the right multiplication of a transposed Matrix with a Vector : At*V . Declaration public static Vector TransposeMultiply(Matrix matrix, Vector vector) Parameters Type Name Description Matrix matrix Matrix to transpose then multiply on the right. Vector vector Vector to multiply with. Returns Type Description Vector The new Vector resulting from the multiplication. | Improve this Doc View Source TransposeMultiplySelf(Matrix) Computes the left multiplication of a Matrix with its transposition : At*A . Declaration public static Matrix TransposeMultiplySelf(Matrix matrix) Parameters Type Name Description Matrix matrix transposed Matrix for the multiplication. Returns Type Description Matrix The new Matrix resulting from the multiplication. | Improve this Doc View Source Zero(Int32, Int32) Returns the neutral Matrix for the addition. Declaration public static Matrix Zero(int rowCount, int columnCount) Parameters Type Name Description System.Int32 rowCount Number of rows of the Matrix . System.Int32 columnCount Number of columns of the Matrix . Returns Type Description Matrix The CompressedColumn , as a Matrix , of the given size and with zeros on every coordinates. Explicit Interface Implementations | Improve this Doc View Source IAddable<Matrix>.Add(Matrix) Computes the addition of the current element with another element on the right. Declaration Matrix IAddable<Matrix>.Add(Matrix right) Parameters Type Name Description Matrix right Returns Type Description Matrix The new element resulting from the addition. | Improve this Doc View Source IAddable<Matrix>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration bool IAddable<Matrix>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<Matrix>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration bool IAddable<Matrix>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IMultiplicable<Matrix>.IsAssociative Evaluates whether the multiplication is associative : a * (b * c) = (a * b) * c. Declaration bool IMultiplicable<Matrix>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Matrix>.IsCommutative Evaluates whether the multiplication is commutative : a * b = b * a. Declaration bool IMultiplicable<Matrix>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<Matrix>.Multiply(Matrix) Computes the multiplication of the current element with another element on the right. Declaration Matrix IMultiplicable<Matrix>.Multiply(Matrix right) Parameters Type Name Description Matrix right Returns Type Description Matrix The new element resulting from the multiplication. | Improve this Doc View Source ISubtractable<Matrix>.Subtract(Matrix) Computes the subtraction of the current element with another element on the right. Declaration Matrix ISubtractable<Matrix>.Subtract(Matrix right) Parameters Type Name Description Matrix right Returns Type Description Matrix The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<Matrix>.Zero() Returns the neutral element of the addition. Declaration Matrix IZeroable<Matrix>.Zero() Returns Type Description Matrix The neutral element of the addition. | Improve this Doc View Source IGroup<Matrix>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<Matrix>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, Matrix>.Divide(Double) Computes the right scalar division of the current element. Declaration Matrix IGroupAction<double, Matrix>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description Matrix The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, Matrix>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration Matrix IGroupAction<double, Matrix>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description Matrix The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> ISemiGroup<T> IMagma<T> IMultiplicable<T> IGroupAction<TValue, T>"
  },
  "api/BRIDGES.LinearAlgebra.Matrices.Sparse.CompressedColumn.html": {
    "href": "api/BRIDGES.LinearAlgebra.Matrices.Sparse.CompressedColumn.html",
    "title": "Class CompressedColumn | BRIDGES Documentation",
    "keywords": "Class CompressedColumn Class defining a sparse matrix with a compressed column storage. Inheritance System.Object Matrix SparseMatrix CompressedColumn Implements IAbelianGroup < Matrix > IGroup < Matrix > IMonoid < Matrix > ISemiGroup < Matrix > ILoop < Matrix > IQuasiGroup < Matrix > IMagma < Matrix > IAddable < Matrix > ISubtractable < Matrix > IZeroable < Matrix > ISemiGroup < Matrix > IMagma < Matrix > IMultiplicable < Matrix > IGroupAction < System.Double , Matrix > IAbelianGroup < SparseMatrix > IGroup < SparseMatrix > IMonoid < SparseMatrix > ISemiGroup < SparseMatrix > ILoop < SparseMatrix > IQuasiGroup < SparseMatrix > IMagma < SparseMatrix > IAddable < SparseMatrix > ISubtractable < SparseMatrix > IZeroable < SparseMatrix > ISemiGroup < SparseMatrix > IMagma < SparseMatrix > IMultiplicable < SparseMatrix > IGroupAction < System.Double , SparseMatrix > IAbelianGroup < CompressedColumn > IGroup < CompressedColumn > IMonoid < CompressedColumn > ISemiGroup < CompressedColumn > ILoop < CompressedColumn > IQuasiGroup < CompressedColumn > IMagma < CompressedColumn > IAddable < CompressedColumn > ISubtractable < CompressedColumn > IZeroable < CompressedColumn > ISemiGroup < CompressedColumn > IMagma < CompressedColumn > IMultiplicable < CompressedColumn > IGroupAction < System.Double , CompressedColumn > Inherited Members SparseMatrix.Add(SparseMatrix, SparseMatrix) SparseMatrix.Subtract(SparseMatrix, SparseMatrix) SparseMatrix.Multiply(SparseMatrix, SparseMatrix) SparseMatrix.TransposeMultiplySelf(SparseMatrix) SparseMatrix.Multiply(Double, SparseMatrix) SparseMatrix.Multiply(SparseMatrix, Double) SparseMatrix.Divide(SparseMatrix, Double) SparseMatrix.Multiply(SparseMatrix, Vector) SparseMatrix.Multiply(SparseMatrix, DenseVector) SparseMatrix.Multiply(SparseMatrix, SparseVector) SparseMatrix.TransposeMultiply(SparseMatrix, Vector) SparseMatrix.TransposeMultiply(SparseMatrix, DenseVector) SparseMatrix.TransposeMultiply(SparseMatrix, SparseVector) SparseMatrix.IAddable<SparseMatrix>.IsAssociative SparseMatrix.IAddable<SparseMatrix>.IsCommutative SparseMatrix.IAddable<SparseMatrix>.Add(SparseMatrix) SparseMatrix.ISubtractable<SparseMatrix>.Subtract(SparseMatrix) SparseMatrix.IGroup<SparseMatrix>.Opposite() SparseMatrix.IZeroable<SparseMatrix>.Zero() SparseMatrix.IMultiplicable<SparseMatrix>.IsAssociative SparseMatrix.IMultiplicable<SparseMatrix>.IsCommutative SparseMatrix.IMultiplicable<SparseMatrix>.Multiply(SparseMatrix) SparseMatrix.IGroupAction<Double, SparseMatrix>.Multiply(Double) SparseMatrix.IGroupAction<Double, SparseMatrix>.Divide(Double) Matrix.Add(Matrix, Matrix) Matrix.Subtract(Matrix, Matrix) Matrix.Multiply(Matrix, Matrix) Matrix.TransposeMultiplySelf(Matrix) Matrix.Multiply(Double, Matrix) Matrix.Multiply(Matrix, Double) Matrix.Divide(Matrix, Double) Matrix.Multiply(Matrix, Vector) Matrix.Multiply(Matrix, DenseVector) Matrix.Multiply(Matrix, SparseVector) Matrix.TransposeMultiply(Matrix, Vector) Matrix.TransposeMultiply(Matrix, DenseVector) Matrix.TransposeMultiply(Matrix, SparseVector) Matrix.IAddable<Matrix>.IsAssociative Matrix.IAddable<Matrix>.IsCommutative Matrix.IAddable<Matrix>.Add(Matrix) Matrix.ISubtractable<Matrix>.Subtract(Matrix) Matrix.IGroup<Matrix>.Opposite() Matrix.IZeroable<Matrix>.Zero() Matrix.IMultiplicable<Matrix>.IsAssociative Matrix.IMultiplicable<Matrix>.IsCommutative Matrix.IMultiplicable<Matrix>.Multiply(Matrix) Matrix.IGroupAction<Double, Matrix>.Multiply(Double) Matrix.IGroupAction<Double, Matrix>.Divide(Double) Namespace : BRIDGES.LinearAlgebra.Matrices.Sparse Assembly : BRIDGES.dll Syntax public sealed class CompressedColumn : SparseMatrix, IAbelianGroup<Matrix>, IGroup<Matrix>, IMonoid<Matrix>, ISemiGroup<Matrix>, ILoop<Matrix>, IQuasiGroup<Matrix>, IMagma<Matrix>, IAddable<Matrix>, ISubtractable<Matrix>, IZeroable<Matrix>, ISemiGroup<Matrix>, IMagma<Matrix>, IMultiplicable<Matrix>, IGroupAction<double, Matrix>, IAbelianGroup<SparseMatrix>, IGroup<SparseMatrix>, IMonoid<SparseMatrix>, ISemiGroup<SparseMatrix>, ILoop<SparseMatrix>, IQuasiGroup<SparseMatrix>, IMagma<SparseMatrix>, IAddable<SparseMatrix>, ISubtractable<SparseMatrix>, IZeroable<SparseMatrix>, ISemiGroup<SparseMatrix>, IMagma<SparseMatrix>, IMultiplicable<SparseMatrix>, IGroupAction<double, SparseMatrix>, IAbelianGroup<CompressedColumn>, IGroup<CompressedColumn>, IMonoid<CompressedColumn>, ISemiGroup<CompressedColumn>, ILoop<CompressedColumn>, IQuasiGroup<CompressedColumn>, IMagma<CompressedColumn>, IAddable<CompressedColumn>, ISubtractable<CompressedColumn>, IZeroable<CompressedColumn>, ISemiGroup<CompressedColumn>, IMagma<CompressedColumn>, IMultiplicable<CompressedColumn>, IGroupAction<double, CompressedColumn> Constructors | Improve this Doc View Source CompressedColumn(CompressedColumn) Initialises a new instance of the CompressedColumn class from a CSparse compressed column storage. Declaration public CompressedColumn(CompressedColumn ccs) Parameters Type Name Description CompressedColumn ccs CSparse compressed column storage. | Improve this Doc View Source CompressedColumn(Int32, Int32, DictionaryOfKeys) Initialises a new instance of the CompressedColumn class by defining its size, and by giving its values in a DictionaryOfKeys . Declaration public CompressedColumn(int rowCount, int columnCount, DictionaryOfKeys dok) Parameters Type Name Description System.Int32 rowCount Number of rows of the CompressedColumn . System.Int32 columnCount Number of columns of the CompressedColumn . DictionaryOfKeys dok Values of the CompressedColumn . Properties | Improve this Doc View Source ColumnCount Gets the number of columns in the current matrix. Declaration public override int ColumnCount { get; } Property Value Type Description System.Int32 Overrides Matrix.ColumnCount | Improve this Doc View Source Item[Int32, Int32] Gets the value of the current matrix at the given row and column. Declaration public override double this[int row, int column] { get; } Parameters Type Name Description System.Int32 row Row of the value to get. System.Int32 column Column of the value to get. Property Value Type Description System.Double The value at the given row and column index. Overrides Matrix.Item[Int32, Int32] | Improve this Doc View Source NonZerosCount Gets the number of non-zero values in the current sparse matrix. Declaration public override int NonZerosCount { get; } Property Value Type Description System.Int32 Overrides SparseMatrix.NonZerosCount | Improve this Doc View Source RowCount Gets the number of rows in the current matrix. Declaration public override int RowCount { get; } Property Value Type Description System.Int32 Overrides Matrix.RowCount Methods | Improve this Doc View Source Add(CompressedColumn, CompressedColumn) Computes the addition of two CompressedColumn . Declaration public static CompressedColumn Add(CompressedColumn left, CompressedColumn right) Parameters Type Name Description CompressedColumn left Left CompressedColumn for the addition. CompressedColumn right Right CompressedColumn for the addition. Returns Type Description CompressedColumn The new CompressedColumn resulting from the addition. | Improve this Doc View Source Add(CompressedColumn, CompressedRow) Computes the addition of a CompressedColumn with a CompressedRow . Declaration public static CompressedColumn Add(CompressedColumn left, CompressedRow right) Parameters Type Name Description CompressedColumn left Left CompressedColumn for the addition. CompressedRow right Right CompressedRow for the addition. Returns Type Description CompressedColumn The new CompressedColumn resulting from the addition. | Improve this Doc View Source Add(CompressedColumn, SparseMatrix) Computes the addition of a CompressedColumn with a SparseMatrix . Declaration public static CompressedColumn Add(CompressedColumn left, SparseMatrix right) Parameters Type Name Description CompressedColumn left Left CompressedColumn for the addition. SparseMatrix right Right SparseMatrix for the addition. Returns Type Description CompressedColumn The new CompressedColumn resulting from the addition. | Improve this Doc View Source Add(CompressedRow, CompressedColumn) Computes the addition of a CompressedRow with a CompressedColumn . Declaration public static CompressedColumn Add(CompressedRow left, CompressedColumn right) Parameters Type Name Description CompressedRow left Left CompressedRow for the addition. CompressedColumn right Right CompressedColumn for the addition. Returns Type Description CompressedColumn The new CompressedColumn resulting from the addition. | Improve this Doc View Source Add(SparseMatrix, CompressedColumn) Computes the addition of a SparseMatrix with a CompressedColumn . Declaration public static CompressedColumn Add(SparseMatrix left, CompressedColumn right) Parameters Type Name Description SparseMatrix left Left SparseMatrix for the addition. CompressedColumn right Right CompressedColumn for the addition. Returns Type Description CompressedColumn The new CompressedColumn resulting from the addition. | Improve this Doc View Source ColumnPointers() Returns the column pointers of the current CompressedColumn sparse matrix. Declaration public int[] ColumnPointers() Returns Type Description System.Int32 [] The column pointers of the current CompressedColumn sparse matrix. | Improve this Doc View Source Divide(CompressedColumn, Double) Computes the scalar division of a CompressedColumn with a -precision real number. Declaration public static CompressedColumn Divide(CompressedColumn operand, double divisor) Parameters Type Name Description CompressedColumn operand CompressedColumn to divide. System.Double divisor -precision real number to divide with. Returns Type Description CompressedColumn The new CompressedColumn resulting from the scalar division. | Improve this Doc View Source GetColumnPointers(Int32) Returns the column pointers of the current CompressedColumn sparse matrix. Declaration public int GetColumnPointers(int index) Parameters Type Name Description System.Int32 index Index of the column pointers to get. Returns Type Description System.Int32 The column pointers of the current CompressedColumn sparse matrix. | Improve this Doc View Source GetNonZeros() Provides an enumerable collection to iterate on the non-zero entries of the SparseMatrix non-zero entries. Declaration public override IEnumerable<(int RowIndex, int ColumnIndex, double Value)> GetNonZeros() Returns Type Description IEnumerable < System.ValueTuple < System.Int32 , System.Int32 , System.Double >> The enumerable collection containing row index, the column index and the value of the SparseMatrix non-zero entries. Overrides SparseMatrix.GetNonZeros() | Improve this Doc View Source GetRowIndex(Int32) Returns the row index of the current CompressedColumn sparse matrix at a given index. Declaration public int GetRowIndex(int index) Parameters Type Name Description System.Int32 index Index of the row index to get. Returns Type Description System.Int32 The row index of the current CompressedColumn sparse matrix at the given index. | Improve this Doc View Source GetValue(Int32) Returns the non-zero value of the current CompressedColumn sparse matrix at a given index. Declaration public double GetValue(int index) Parameters Type Name Description System.Int32 index Index of the non-zero value to get. Returns Type Description System.Double The non-zero value of the current CompressedColumn sparse matrix at the given index. | Improve this Doc View Source Identity(Int32) Returns the neutral CompressedColumn for the multiplication. Declaration public static CompressedColumn Identity(int size) Parameters Type Name Description System.Int32 size Number of rows and columns of the CompressedColumn . Returns Type Description CompressedColumn The CompressedColumn of the given size, with ones on the diagonal and zeros elsewhere. | Improve this Doc View Source Kernel() Computes the kernel (or null-space) of the current SparseMatrix using the QR decomposition. Declaration public DenseVector[] Kernel() Returns Type Description DenseVector [] The vectors forming a basis of the null-space. Remarks The method is adapted for rectangular matrix. | Improve this Doc View Source Multiply(CompressedColumn, CompressedColumn) Computes the multiplication of two CompressedColumn . Declaration public static CompressedColumn Multiply(CompressedColumn left, CompressedColumn right) Parameters Type Name Description CompressedColumn left Left CompressedColumn for the multiplication. CompressedColumn right Right CompressedColumn for the multiplication. Returns Type Description CompressedColumn The new CompressedColumn resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedColumn, CompressedRow) Computes the multiplication of a CompressedColumn with a CompressedRow . Declaration public static CompressedColumn Multiply(CompressedColumn left, CompressedRow right) Parameters Type Name Description CompressedColumn left Left CompressedColumn for the multiplication. CompressedRow right Right CompressedRow for the multiplication. Returns Type Description CompressedColumn The new CompressedColumn resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedColumn, SparseMatrix) Computes the multiplication of a CompressedColumn with a SparseMatrix . Declaration public static CompressedColumn Multiply(CompressedColumn left, SparseMatrix right) Parameters Type Name Description CompressedColumn left Left CompressedColumn for the multiplication. SparseMatrix right Right SparseMatrix for the multiplication. Returns Type Description CompressedColumn The new CompressedColumn resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedColumn, DenseVector) Computes the right multiplication of a CompressedColumn with a DenseVector : A*V . Declaration public static DenseVector Multiply(CompressedColumn matrix, DenseVector vector) Parameters Type Name Description CompressedColumn matrix CompressedColumn to multiply on the right. DenseVector vector DenseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedColumn, SparseVector) Computes the right multiplication of a CompressedColumn with a SparseVector : A*V . Declaration public static SparseVector Multiply(CompressedColumn matrix, SparseVector vector) Parameters Type Name Description CompressedColumn matrix CompressedColumn to multiply on the right. SparseVector vector SparseVector to multiply with. Returns Type Description SparseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedColumn, Vector) Computes the right multiplication of a CompressedColumn with a Vector : A*V . Declaration public static Vector Multiply(CompressedColumn matrix, Vector vector) Parameters Type Name Description CompressedColumn matrix CompressedColumn to multiply on the right. Vector vector Vector to multiply with. Returns Type Description Vector The new Vector resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedColumn, Double) Computes the scalar multiplication of a CompressedColumn with a -precision real number. Declaration public static CompressedColumn Multiply(CompressedColumn operand, double factor) Parameters Type Name Description CompressedColumn operand CompressedColumn to multiply. System.Double factor -precision real number. Returns Type Description CompressedColumn The new CompressedColumn resulting from the scalar multiplication. | Improve this Doc View Source Multiply(CompressedRow, CompressedColumn) Computes the multiplication of a CompressedRow with a CompressedColumn . Declaration public static CompressedColumn Multiply(CompressedRow left, CompressedColumn right) Parameters Type Name Description CompressedRow left Left CompressedRow for the multiplication. CompressedColumn right Right CompressedColumn for the multiplication. Returns Type Description CompressedColumn The new CompressedColumn resulting from the multiplication. | Improve this Doc View Source Multiply(SparseMatrix, CompressedColumn) Computes the multiplication of a SparseMatrix with a CompressedColumn . Declaration public static CompressedColumn Multiply(SparseMatrix left, CompressedColumn right) Parameters Type Name Description SparseMatrix left Left SparseMatrix for the multiplication. CompressedColumn right Right CompressedColumn for the multiplication. Returns Type Description CompressedColumn The new CompressedColumn resulting from the multiplication. | Improve this Doc View Source Multiply(Double, CompressedColumn) Computes the scalar multiplication of a CompressedColumn with a -precision real number. Declaration public static CompressedColumn Multiply(double factor, CompressedColumn operand) Parameters Type Name Description System.Double factor -precision real number. CompressedColumn operand CompressedColumn to multiply. Returns Type Description CompressedColumn The new CompressedColumn resulting from the scalar multiplication. | Improve this Doc View Source Opposite() Replaces the current element with its opposite. Declaration protected override void Opposite() Overrides Matrix.Opposite() | Improve this Doc View Source RowIndices() Returns the row indices of the current CompressedColumn sparse matrix. Declaration public int[] RowIndices() Returns Type Description System.Int32 [] The row indices of the current CompressedColumn sparse matrix. | Improve this Doc View Source SolveCholesky(Vector) Solve the system Ax=y using Cholesky decomposition. Declaration public DenseVector SolveCholesky(Vector vector) Parameters Type Name Description Vector vector The vector y in the system. Returns Type Description DenseVector The vector x in the system. | Improve this Doc View Source Subtract(CompressedColumn, CompressedColumn) Computes the subtraction of two CompressedColumn . Declaration public static CompressedColumn Subtract(CompressedColumn left, CompressedColumn right) Parameters Type Name Description CompressedColumn left Left CompressedColumn to subtract. CompressedColumn right Right CompressedColumn to subtract with. Returns Type Description CompressedColumn The new CompressedColumn resulting from the subtraction. | Improve this Doc View Source Subtract(CompressedColumn, CompressedRow) Computes the subtraction of a CompressedColumn with a CompressedRow . Declaration public static CompressedColumn Subtract(CompressedColumn left, CompressedRow right) Parameters Type Name Description CompressedColumn left Left CompressedColumn to subtract. CompressedRow right Right CompressedRow to subtract with. Returns Type Description CompressedColumn The new CompressedColumn resulting from the subtraction. | Improve this Doc View Source Subtract(CompressedColumn, SparseMatrix) Computes the subtraction of a CompressedColumn with a SparseMatrix . Declaration public static CompressedColumn Subtract(CompressedColumn left, SparseMatrix right) Parameters Type Name Description CompressedColumn left Left CompressedColumn to subtract. SparseMatrix right Right SparseMatrix to subtract with. Returns Type Description CompressedColumn The new CompressedColumn resulting from the subtraction. | Improve this Doc View Source Subtract(CompressedRow, CompressedColumn) Computes the subtraction of a CompressedRow with a CompressedColumn . Declaration public static CompressedColumn Subtract(CompressedRow left, CompressedColumn right) Parameters Type Name Description CompressedRow left Left CompressedRow to subtract. CompressedColumn right Right CompressedColumn to subtract with. Returns Type Description CompressedColumn The new CompressedColumn resulting from the subtraction. | Improve this Doc View Source Subtract(SparseMatrix, CompressedColumn) Computes the subtraction of a SparseMatrix with a CompressedColumn . Declaration public static CompressedColumn Subtract(SparseMatrix left, CompressedColumn right) Parameters Type Name Description SparseMatrix left Left SparseMatrix to subtract. CompressedColumn right Right CompressedColumn to subtract with. Returns Type Description CompressedColumn The new CompressedColumn resulting from the subtraction. | Improve this Doc View Source ToCompressedRow() Converts a the current CompressedColumn matrix into an equivalent CompressedRow matrix. Declaration public CompressedRow ToCompressedRow() Returns Type Description CompressedRow The new CompressedRow resulting from the conversion. | Improve this Doc View Source Transpose() Transposes the current matrix. Declaration public override void Transpose() Overrides Matrix.Transpose() | Improve this Doc View Source TransposeMultiply(CompressedColumn, DenseVector) Computes the right multiplication of a transposed CompressedColumn with a DenseVector : At*V . Declaration public static DenseVector TransposeMultiply(CompressedColumn matrix, DenseVector vector) Parameters Type Name Description CompressedColumn matrix CompressedColumn to transpose then multiply on the right. DenseVector vector DenseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(CompressedColumn, SparseVector) Computes the right multiplication of a transposed CompressedColumn with a SparseVector : At*V . Declaration public static SparseVector TransposeMultiply(CompressedColumn matrix, SparseVector vector) Parameters Type Name Description CompressedColumn matrix CompressedColumn to transpose then multiply on the right. SparseVector vector SparseVector to multiply with. Returns Type Description SparseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(CompressedColumn, Vector) Computes the right multiplication of a transposed CompressedColumn with a Vector : At*V . Declaration public static Vector TransposeMultiply(CompressedColumn matrix, Vector vector) Parameters Type Name Description CompressedColumn matrix CompressedColumn to transpose then multiply on the right. Vector vector Vector to multiply with. Returns Type Description Vector The new Vector resulting from the multiplication. | Improve this Doc View Source TransposeMultiplySelf(CompressedColumn) Computes the left multiplication of a CompressedColumn with its transposition : At*A . Declaration public static CompressedColumn TransposeMultiplySelf(CompressedColumn matrix) Parameters Type Name Description CompressedColumn matrix transposed CompressedColumn for the multiplication. Returns Type Description CompressedColumn The new CompressedColumn resulting from the multiplication. | Improve this Doc View Source Values() Returns the non-zero values of the current CompressedColumn sparse matrix. Declaration public double[] Values() Returns Type Description System.Double [] The non-zero values of the current CompressedColumn sparse matrix. | Improve this Doc View Source Zero(Int32, Int32) Returns the neutral CompressedColumn for the addition. Declaration public static CompressedColumn Zero(int rowCount, int columnCount) Parameters Type Name Description System.Int32 rowCount Number of rows of the CompressedColumn . System.Int32 columnCount Number of columns of the CompressedColumn . Returns Type Description CompressedColumn The CompressedColumn of the given size, with zeros on every coordinates. Explicit Interface Implementations | Improve this Doc View Source IAddable<CompressedColumn>.Add(CompressedColumn) Computes the addition of the current element with another element on the right. Declaration CompressedColumn IAddable<CompressedColumn>.Add(CompressedColumn right) Parameters Type Name Description CompressedColumn right Returns Type Description CompressedColumn The new element resulting from the addition. | Improve this Doc View Source IAddable<CompressedColumn>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration bool IAddable<CompressedColumn>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<CompressedColumn>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration bool IAddable<CompressedColumn>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IMultiplicable<CompressedColumn>.IsAssociative Evaluates whether the multiplication is associative : a * (b * c) = (a * b) * c. Declaration bool IMultiplicable<CompressedColumn>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<CompressedColumn>.IsCommutative Evaluates whether the multiplication is commutative : a * b = b * a. Declaration bool IMultiplicable<CompressedColumn>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<CompressedColumn>.Multiply(CompressedColumn) Computes the multiplication of the current element with another element on the right. Declaration CompressedColumn IMultiplicable<CompressedColumn>.Multiply(CompressedColumn right) Parameters Type Name Description CompressedColumn right Returns Type Description CompressedColumn The new element resulting from the multiplication. | Improve this Doc View Source ISubtractable<CompressedColumn>.Subtract(CompressedColumn) Computes the subtraction of the current element with another element on the right. Declaration CompressedColumn ISubtractable<CompressedColumn>.Subtract(CompressedColumn right) Parameters Type Name Description CompressedColumn right Returns Type Description CompressedColumn The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<CompressedColumn>.Zero() Returns the neutral element of the addition. Declaration CompressedColumn IZeroable<CompressedColumn>.Zero() Returns Type Description CompressedColumn The neutral element of the addition. | Improve this Doc View Source IGroup<CompressedColumn>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<CompressedColumn>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, CompressedColumn>.Divide(Double) Computes the right scalar division of the current element. Declaration CompressedColumn IGroupAction<double, CompressedColumn>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description CompressedColumn The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, CompressedColumn>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration CompressedColumn IGroupAction<double, CompressedColumn>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description CompressedColumn The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> ISemiGroup<T> IMagma<T> IMultiplicable<T> IGroupAction<TValue, T> IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> ISemiGroup<T> IMagma<T> IMultiplicable<T> IGroupAction<TValue, T> IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> ISemiGroup<T> IMagma<T> IMultiplicable<T> IGroupAction<TValue, T>"
  },
  "api/BRIDGES.LinearAlgebra.Matrices.Sparse.CompressedRow.html": {
    "href": "api/BRIDGES.LinearAlgebra.Matrices.Sparse.CompressedRow.html",
    "title": "Class CompressedRow | BRIDGES Documentation",
    "keywords": "Class CompressedRow Class defining a sparse matrix with a compressed row storage. Inheritance System.Object Matrix SparseMatrix CompressedRow Implements IAbelianGroup < Matrix > IGroup < Matrix > IMonoid < Matrix > ISemiGroup < Matrix > ILoop < Matrix > IQuasiGroup < Matrix > IMagma < Matrix > IAddable < Matrix > ISubtractable < Matrix > IZeroable < Matrix > ISemiGroup < Matrix > IMagma < Matrix > IMultiplicable < Matrix > IGroupAction < System.Double , Matrix > IAbelianGroup < SparseMatrix > IGroup < SparseMatrix > IMonoid < SparseMatrix > ISemiGroup < SparseMatrix > ILoop < SparseMatrix > IQuasiGroup < SparseMatrix > IMagma < SparseMatrix > IAddable < SparseMatrix > ISubtractable < SparseMatrix > IZeroable < SparseMatrix > ISemiGroup < SparseMatrix > IMagma < SparseMatrix > IMultiplicable < SparseMatrix > IGroupAction < System.Double , SparseMatrix > IAbelianGroup < CompressedRow > IGroup < CompressedRow > IMonoid < CompressedRow > ISemiGroup < CompressedRow > ILoop < CompressedRow > IQuasiGroup < CompressedRow > IMagma < CompressedRow > IAddable < CompressedRow > ISubtractable < CompressedRow > IZeroable < CompressedRow > ISemiGroup < CompressedRow > IMagma < CompressedRow > IMultiplicable < CompressedRow > IGroupAction < System.Double , CompressedRow > Inherited Members SparseMatrix.Add(SparseMatrix, SparseMatrix) SparseMatrix.Subtract(SparseMatrix, SparseMatrix) SparseMatrix.Multiply(SparseMatrix, SparseMatrix) SparseMatrix.TransposeMultiplySelf(SparseMatrix) SparseMatrix.Multiply(Double, SparseMatrix) SparseMatrix.Multiply(SparseMatrix, Double) SparseMatrix.Divide(SparseMatrix, Double) SparseMatrix.Multiply(SparseMatrix, Vector) SparseMatrix.Multiply(SparseMatrix, DenseVector) SparseMatrix.Multiply(SparseMatrix, SparseVector) SparseMatrix.TransposeMultiply(SparseMatrix, Vector) SparseMatrix.TransposeMultiply(SparseMatrix, DenseVector) SparseMatrix.TransposeMultiply(SparseMatrix, SparseVector) SparseMatrix.IAddable<SparseMatrix>.IsAssociative SparseMatrix.IAddable<SparseMatrix>.IsCommutative SparseMatrix.IAddable<SparseMatrix>.Add(SparseMatrix) SparseMatrix.ISubtractable<SparseMatrix>.Subtract(SparseMatrix) SparseMatrix.IGroup<SparseMatrix>.Opposite() SparseMatrix.IZeroable<SparseMatrix>.Zero() SparseMatrix.IMultiplicable<SparseMatrix>.IsAssociative SparseMatrix.IMultiplicable<SparseMatrix>.IsCommutative SparseMatrix.IMultiplicable<SparseMatrix>.Multiply(SparseMatrix) SparseMatrix.IGroupAction<Double, SparseMatrix>.Multiply(Double) SparseMatrix.IGroupAction<Double, SparseMatrix>.Divide(Double) Matrix.Add(Matrix, Matrix) Matrix.Subtract(Matrix, Matrix) Matrix.Multiply(Matrix, Matrix) Matrix.TransposeMultiplySelf(Matrix) Matrix.Multiply(Double, Matrix) Matrix.Multiply(Matrix, Double) Matrix.Divide(Matrix, Double) Matrix.Multiply(Matrix, Vector) Matrix.Multiply(Matrix, DenseVector) Matrix.Multiply(Matrix, SparseVector) Matrix.TransposeMultiply(Matrix, Vector) Matrix.TransposeMultiply(Matrix, DenseVector) Matrix.TransposeMultiply(Matrix, SparseVector) Matrix.IAddable<Matrix>.IsAssociative Matrix.IAddable<Matrix>.IsCommutative Matrix.IAddable<Matrix>.Add(Matrix) Matrix.ISubtractable<Matrix>.Subtract(Matrix) Matrix.IGroup<Matrix>.Opposite() Matrix.IZeroable<Matrix>.Zero() Matrix.IMultiplicable<Matrix>.IsAssociative Matrix.IMultiplicable<Matrix>.IsCommutative Matrix.IMultiplicable<Matrix>.Multiply(Matrix) Matrix.IGroupAction<Double, Matrix>.Multiply(Double) Matrix.IGroupAction<Double, Matrix>.Divide(Double) Namespace : BRIDGES.LinearAlgebra.Matrices.Sparse Assembly : BRIDGES.dll Syntax public class CompressedRow : SparseMatrix, IAbelianGroup<Matrix>, IGroup<Matrix>, IMonoid<Matrix>, ISemiGroup<Matrix>, ILoop<Matrix>, IQuasiGroup<Matrix>, IMagma<Matrix>, IAddable<Matrix>, ISubtractable<Matrix>, IZeroable<Matrix>, ISemiGroup<Matrix>, IMagma<Matrix>, IMultiplicable<Matrix>, IGroupAction<double, Matrix>, IAbelianGroup<SparseMatrix>, IGroup<SparseMatrix>, IMonoid<SparseMatrix>, ISemiGroup<SparseMatrix>, ILoop<SparseMatrix>, IQuasiGroup<SparseMatrix>, IMagma<SparseMatrix>, IAddable<SparseMatrix>, ISubtractable<SparseMatrix>, IZeroable<SparseMatrix>, ISemiGroup<SparseMatrix>, IMagma<SparseMatrix>, IMultiplicable<SparseMatrix>, IGroupAction<double, SparseMatrix>, IAbelianGroup<CompressedRow>, IGroup<CompressedRow>, IMonoid<CompressedRow>, ISemiGroup<CompressedRow>, ILoop<CompressedRow>, IQuasiGroup<CompressedRow>, IMagma<CompressedRow>, IAddable<CompressedRow>, ISubtractable<CompressedRow>, IZeroable<CompressedRow>, ISemiGroup<CompressedRow>, IMagma<CompressedRow>, IMultiplicable<CompressedRow>, IGroupAction<double, CompressedRow> Constructors | Improve this Doc View Source CompressedRow(Int32, Int32, DictionaryOfKeys) Initialises a new instance of the CompressedRow class by defining its size, and by giving its values in a DictionaryOfKeys . Declaration public CompressedRow(int rowCount, int columnCount, DictionaryOfKeys dok) Parameters Type Name Description System.Int32 rowCount Number of rows of the CompressedRow . System.Int32 columnCount Number of columns of the CompressedRow . DictionaryOfKeys dok Values of the CompressedRow . Properties | Improve this Doc View Source ColumnCount Gets the number of columns in the current matrix. Declaration public override int ColumnCount { get; } Property Value Type Description System.Int32 Overrides Matrix.ColumnCount | Improve this Doc View Source Item[Int32, Int32] Gets the value of the current matrix at the given row and column. Declaration public override double this[int row, int column] { get; } Parameters Type Name Description System.Int32 row Row of the value to get. System.Int32 column Column of the value to get. Property Value Type Description System.Double The value at the given row and column index. Overrides Matrix.Item[Int32, Int32] | Improve this Doc View Source NonZerosCount Gets the number of non-zero values in the current sparse matrix. Declaration public override int NonZerosCount { get; } Property Value Type Description System.Int32 Overrides SparseMatrix.NonZerosCount | Improve this Doc View Source RowCount Gets the number of rows in the current matrix. Declaration public override int RowCount { get; } Property Value Type Description System.Int32 Overrides Matrix.RowCount Methods | Improve this Doc View Source Add(CompressedColumn, CompressedRow) Computes the addition of a CompressedColumn with a CompressedRow . Declaration public static CompressedRow Add(CompressedColumn left, CompressedRow right) Parameters Type Name Description CompressedColumn left Left CompressedColumn for the addition. CompressedRow right Right CompressedRow for the addition. Returns Type Description CompressedRow The new CompressedColumn resulting from the addition. | Improve this Doc View Source Add(CompressedRow, CompressedColumn) Computes the addition of a CompressedRow with a CompressedColumn . Declaration public static CompressedRow Add(CompressedRow left, CompressedColumn right) Parameters Type Name Description CompressedRow left Left CompressedRow for the addition. CompressedColumn right Right CompressedColumn for the addition. Returns Type Description CompressedRow The new CompressedColumn resulting from the addition. | Improve this Doc View Source Add(CompressedRow, CompressedRow) Computes the addition of two CompressedRow . Declaration public static CompressedRow Add(CompressedRow left, CompressedRow right) Parameters Type Name Description CompressedRow left Left CompressedRow for the addition. CompressedRow right Right CompressedRow for the addition. Returns Type Description CompressedRow The new CompressedRow resulting from the addition. | Improve this Doc View Source Add(CompressedRow, SparseMatrix) Computes the addition of a CompressedRow with a SparseMatrix . Declaration public static CompressedRow Add(CompressedRow left, SparseMatrix right) Parameters Type Name Description CompressedRow left Left CompressedRow for the addition. SparseMatrix right Right SparseMatrix for the addition. Returns Type Description CompressedRow The new CompressedRow resulting from the addition. | Improve this Doc View Source Add(SparseMatrix, CompressedRow) Computes the addition of a SparseMatrix with a CompressedRow . Declaration public static CompressedRow Add(SparseMatrix left, CompressedRow right) Parameters Type Name Description SparseMatrix left Left SparseMatrix for the addition. CompressedRow right Right CompressedRow for the addition. Returns Type Description CompressedRow The new CompressedRow resulting from the addition. | Improve this Doc View Source ColumnIndices() Returns the column indices of the current CompressedRow sparse matrix. Declaration public int[] ColumnIndices() Returns Type Description System.Int32 [] The column indices of the current CompressedRow sparse matrix. | Improve this Doc View Source Divide(CompressedRow, Double) Computes the scalar division of a CompressedRow with a -precision real number. Declaration public static CompressedRow Divide(CompressedRow operand, double divisor) Parameters Type Name Description CompressedRow operand CompressedRow to divide. System.Double divisor -precision real number to divide with. Returns Type Description CompressedRow The new CompressedRow resulting from the scalar division. | Improve this Doc View Source GetColumnIndex(Int32) Returns the column index of the current CompressedRow sparse matrix at a given index. Declaration public int GetColumnIndex(int index) Parameters Type Name Description System.Int32 index Index of the column index to get. Returns Type Description System.Int32 The column index of the current CompressedRow sparse matrix at the given index. | Improve this Doc View Source GetNonZeros() Provides an enumerable collection to iterate on the non-zero entries of the SparseMatrix non-zero entries. Declaration public override IEnumerable<(int RowIndex, int ColumnIndex, double Value)> GetNonZeros() Returns Type Description IEnumerable < System.ValueTuple < System.Int32 , System.Int32 , System.Double >> The enumerable collection containing row index, the column index and the value of the SparseMatrix non-zero entries. Overrides SparseMatrix.GetNonZeros() | Improve this Doc View Source GetRowPointer(Int32) Returns the row pointers of the current CompressedRow sparse matrix. Declaration public int GetRowPointer(int index) Parameters Type Name Description System.Int32 index Index of the row pointers to get. Returns Type Description System.Int32 The row pointers of the current CompressedRow sparse matrix. | Improve this Doc View Source GetValue(Int32) Returns the non-zero value of the current CompressedRow sparse matrix at a given index. Declaration public double GetValue(int index) Parameters Type Name Description System.Int32 index Index of the non-zero value to get. Returns Type Description System.Double The non-zero value of the current CompressedRow sparse matrix at the given index. | Improve this Doc View Source Identity(Int32) Returns the neutral CompressedRow for the multiplication. Declaration public static CompressedRow Identity(int size) Parameters Type Name Description System.Int32 size Number of rows and columns of the CompressedRow . Returns Type Description CompressedRow The CompressedRow of the given size, with ones on the diagonal and zeros elsewhere. | Improve this Doc View Source Multiply(CompressedColumn, CompressedRow) Computes the multiplication of a CompressedColumn with a CompressedRow . Declaration public static CompressedRow Multiply(CompressedColumn left, CompressedRow right) Parameters Type Name Description CompressedColumn left Left CompressedColumn for the multiplication. CompressedRow right Right CompressedRow for the multiplication. Returns Type Description CompressedRow The new CompressedColumn resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedRow, CompressedColumn) Computes the multiplication of a CompressedRow with a CompressedColumn . Declaration public static CompressedRow Multiply(CompressedRow left, CompressedColumn right) Parameters Type Name Description CompressedRow left Left CompressedRow for the multiplication. CompressedColumn right Right CompressedColumn for the multiplication. Returns Type Description CompressedRow The new CompressedColumn resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedRow, CompressedRow) Computes the multiplication of two CompressedRow . Declaration public static CompressedRow Multiply(CompressedRow left, CompressedRow right) Parameters Type Name Description CompressedRow left Left CompressedRow for the multiplication. CompressedRow right Right CompressedRow for the multiplication. Returns Type Description CompressedRow The new CompressedRow resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedRow, SparseMatrix) Computes the multiplication of a CompressedRow with a SparseMatrix . Declaration public static CompressedRow Multiply(CompressedRow left, SparseMatrix right) Parameters Type Name Description CompressedRow left Left CompressedRow for the multiplication. SparseMatrix right Right SparseMatrix for the multiplication. Returns Type Description CompressedRow The new CompressedRow resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedRow, DenseVector) Computes the right multiplication of a CompressedRow with a DenseVector : A*V . Declaration public static DenseVector Multiply(CompressedRow matrix, DenseVector vector) Parameters Type Name Description CompressedRow matrix CompressedRow to multiply on the right. DenseVector vector DenseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedRow, SparseVector) Computes the right multiplication of a CompressedRow with a SparseVector : A*V . Declaration public static SparseVector Multiply(CompressedRow matrix, SparseVector vector) Parameters Type Name Description CompressedRow matrix CompressedRow to multiply on the right. SparseVector vector SparseVector to multiply with. Returns Type Description SparseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedRow, Vector) Computes the right multiplication of a CompressedRow with a Vector : A*V . Declaration public static Vector Multiply(CompressedRow matrix, Vector vector) Parameters Type Name Description CompressedRow matrix CompressedRow to multiply on the right. Vector vector Vector to multiply with. Returns Type Description Vector The new Vector resulting from the multiplication. | Improve this Doc View Source Multiply(CompressedRow, Double) Computes the scalar multiplication of a CompressedRow with a -precision real number. Declaration public static CompressedRow Multiply(CompressedRow operand, double factor) Parameters Type Name Description CompressedRow operand CompressedRow to multiply. System.Double factor -precision real number. Returns Type Description CompressedRow The new CompressedRow resulting from the scalar multiplication. | Improve this Doc View Source Multiply(SparseMatrix, CompressedRow) Computes the multiplication of a SparseMatrix with a CompressedRow . Declaration public static CompressedRow Multiply(SparseMatrix left, CompressedRow right) Parameters Type Name Description SparseMatrix left Left SparseMatrix for the multiplication. CompressedRow right Right CompressedRow for the multiplication. Returns Type Description CompressedRow The new CompressedRow resulting from the multiplication. | Improve this Doc View Source Multiply(Double, CompressedRow) Computes the scalar multiplication of a CompressedRow with a -precision real number. Declaration public static CompressedRow Multiply(double factor, CompressedRow operand) Parameters Type Name Description System.Double factor -precision real number. CompressedRow operand CompressedRow to multiply. Returns Type Description CompressedRow The new CompressedRow resulting from the scalar multiplication. | Improve this Doc View Source Opposite() Replaces the current element with its opposite. Declaration protected override void Opposite() Overrides Matrix.Opposite() | Improve this Doc View Source RowPointers() Returns the row pointers of the current CompressedRow sparse matrix. Declaration public int[] RowPointers() Returns Type Description System.Int32 [] The row pointers of the current CompressedRow sparse matrix. | Improve this Doc View Source SolveCholesky(DenseVector) Solve the system Ax=y using Cholesky decomposition. Declaration public DenseVector SolveCholesky(DenseVector vector) Parameters Type Name Description DenseVector vector The vector y in the system. Returns Type Description DenseVector The vector x in the system. | Improve this Doc View Source Subtract(CompressedColumn, CompressedRow) Computes the subtraction of a CompressedColumn with a CompressedRow . Declaration public static CompressedRow Subtract(CompressedColumn left, CompressedRow right) Parameters Type Name Description CompressedColumn left Left CompressedColumn to subtract. CompressedRow right Right CompressedRow to subtract with. Returns Type Description CompressedRow The new CompressedColumn resulting from the subtraction. | Improve this Doc View Source Subtract(CompressedRow, CompressedColumn) Computes the subtraction of a CompressedRow with a CompressedColumn . Declaration public static CompressedRow Subtract(CompressedRow left, CompressedColumn right) Parameters Type Name Description CompressedRow left Left CompressedRow to subtract. CompressedColumn right Right CompressedColumn to subtract with. Returns Type Description CompressedRow The new CompressedColumn resulting from the subtraction. | Improve this Doc View Source Subtract(CompressedRow, CompressedRow) Computes the subtraction of two CompressedRow . Declaration public static CompressedRow Subtract(CompressedRow left, CompressedRow right) Parameters Type Name Description CompressedRow left Left CompressedRow to subtract. CompressedRow right Right CompressedRow to subtract with. Returns Type Description CompressedRow The new CompressedRow resulting from the subtraction. | Improve this Doc View Source Subtract(CompressedRow, SparseMatrix) Computes the subtraction of a CompressedRow with a SparseMatrix . Declaration public static CompressedRow Subtract(CompressedRow left, SparseMatrix right) Parameters Type Name Description CompressedRow left Left CompressedRow to subtract. SparseMatrix right Right SparseMatrix to subtract with. Returns Type Description CompressedRow The new CompressedRow resulting from the subtraction. | Improve this Doc View Source Subtract(SparseMatrix, CompressedRow) Computes the subtraction of a SparseMatrix with a CompressedRow . Declaration public static CompressedRow Subtract(SparseMatrix left, CompressedRow right) Parameters Type Name Description SparseMatrix left Left SparseMatrix to subtract. CompressedRow right Right CompressedRow to subtract with. Returns Type Description CompressedRow The new CompressedRow resulting from the subtraction. | Improve this Doc View Source ToCompressedColumn() Converts a the current CompressedRow matrix into an equivalent CompressedColumn matrix. Declaration public CompressedColumn ToCompressedColumn() Returns Type Description CompressedColumn The new CompressedColumn resulting from the conversion. | Improve this Doc View Source Transpose() Transposes the current matrix. Declaration public override void Transpose() Overrides Matrix.Transpose() | Improve this Doc View Source TransposeMultiply(CompressedRow, DenseVector) Computes the right multiplication of a transposed CompressedRow with a DenseVector : At*V . Declaration public static DenseVector TransposeMultiply(CompressedRow matrix, DenseVector vector) Parameters Type Name Description CompressedRow matrix CompressedRow to transpose then multiply on the right. DenseVector vector DenseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(CompressedRow, SparseVector) Computes the right multiplication of a transposed CompressedRow with a SparseVector : At*V . Declaration public static SparseVector TransposeMultiply(CompressedRow matrix, SparseVector vector) Parameters Type Name Description CompressedRow matrix CompressedRow to transpose then multiply on the right. SparseVector vector SparseVector to multiply with. Returns Type Description SparseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(CompressedRow, Vector) Computes the right multiplication of a transposed CompressedRow with a Vector : At*V . Declaration public static Vector TransposeMultiply(CompressedRow matrix, Vector vector) Parameters Type Name Description CompressedRow matrix CompressedRow to transpose then multiply on the right. Vector vector Vector to multiply with. Returns Type Description Vector The new Vector resulting from the multiplication. | Improve this Doc View Source TransposeMultiplySelf(CompressedRow) Computes the left multiplication of a CompressedRow with its transposition : At*A . Declaration public static CompressedRow TransposeMultiplySelf(CompressedRow matrix) Parameters Type Name Description CompressedRow matrix transposed CompressedRow for the multiplication. Returns Type Description CompressedRow The new CompressedRow resulting from the multiplication. | Improve this Doc View Source Values() Returns the non-zero values of the current CompressedRow sparse matrix. Declaration public double[] Values() Returns Type Description System.Double [] The non-zero values of the current CompressedRow sparse matrix. | Improve this Doc View Source Zero(Int32, Int32) Returns the neutral CompressedRow for the addition. Declaration public static CompressedRow Zero(int rowCount, int columnCount) Parameters Type Name Description System.Int32 rowCount Number of rows of the CompressedRow . System.Int32 columnCount Number of columns of the CompressedRow . Returns Type Description CompressedRow The CompressedRow of the given size, with zeros on every coordinates. Explicit Interface Implementations | Improve this Doc View Source IAddable<CompressedRow>.Add(CompressedRow) Computes the addition of the current element with another element on the right. Declaration CompressedRow IAddable<CompressedRow>.Add(CompressedRow right) Parameters Type Name Description CompressedRow right Returns Type Description CompressedRow The new element resulting from the addition. | Improve this Doc View Source IAddable<CompressedRow>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration bool IAddable<CompressedRow>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<CompressedRow>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration bool IAddable<CompressedRow>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IMultiplicable<CompressedRow>.IsAssociative Evaluates whether the multiplication is associative : a * (b * c) = (a * b) * c. Declaration bool IMultiplicable<CompressedRow>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<CompressedRow>.IsCommutative Evaluates whether the multiplication is commutative : a * b = b * a. Declaration bool IMultiplicable<CompressedRow>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<CompressedRow>.Multiply(CompressedRow) Computes the multiplication of the current element with another element on the right. Declaration CompressedRow IMultiplicable<CompressedRow>.Multiply(CompressedRow right) Parameters Type Name Description CompressedRow right Returns Type Description CompressedRow The new element resulting from the multiplication. | Improve this Doc View Source ISubtractable<CompressedRow>.Subtract(CompressedRow) Computes the subtraction of the current element with another element on the right. Declaration CompressedRow ISubtractable<CompressedRow>.Subtract(CompressedRow right) Parameters Type Name Description CompressedRow right Returns Type Description CompressedRow The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<CompressedRow>.Zero() Returns the neutral element of the addition. Declaration CompressedRow IZeroable<CompressedRow>.Zero() Returns Type Description CompressedRow The neutral element of the addition. | Improve this Doc View Source IGroup<CompressedRow>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<CompressedRow>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, CompressedRow>.Divide(Double) Computes the right scalar division of the current element. Declaration CompressedRow IGroupAction<double, CompressedRow>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description CompressedRow The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, CompressedRow>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration CompressedRow IGroupAction<double, CompressedRow>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description CompressedRow The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> ISemiGroup<T> IMagma<T> IMultiplicable<T> IGroupAction<TValue, T> IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> ISemiGroup<T> IMagma<T> IMultiplicable<T> IGroupAction<TValue, T> IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> ISemiGroup<T> IMagma<T> IMultiplicable<T> IGroupAction<TValue, T>"
  },
  "api/BRIDGES.LinearAlgebra.Matrices.Sparse.html": {
    "href": "api/BRIDGES.LinearAlgebra.Matrices.Sparse.html",
    "title": "Namespace BRIDGES.LinearAlgebra.Matrices.Sparse | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.LinearAlgebra.Matrices.Sparse Classes CompressedColumn Class defining a sparse matrix with a compressed column storage. CompressedRow Class defining a sparse matrix with a compressed row storage."
  },
  "api/BRIDGES.LinearAlgebra.Matrices.SparseMatrix.html": {
    "href": "api/BRIDGES.LinearAlgebra.Matrices.SparseMatrix.html",
    "title": "Class SparseMatrix | BRIDGES Documentation",
    "keywords": "Class SparseMatrix Class defining a sparse matrix. Inheritance System.Object Matrix SparseMatrix CompressedColumn CompressedRow Implements IAbelianGroup < Matrix > IGroup < Matrix > IMonoid < Matrix > ISemiGroup < Matrix > ILoop < Matrix > IQuasiGroup < Matrix > IMagma < Matrix > IAddable < Matrix > ISubtractable < Matrix > IZeroable < Matrix > ISemiGroup < Matrix > IMagma < Matrix > IMultiplicable < Matrix > IGroupAction < System.Double , Matrix > IAbelianGroup < SparseMatrix > IGroup < SparseMatrix > IMonoid < SparseMatrix > ISemiGroup < SparseMatrix > ILoop < SparseMatrix > IQuasiGroup < SparseMatrix > IMagma < SparseMatrix > IAddable < SparseMatrix > ISubtractable < SparseMatrix > IZeroable < SparseMatrix > ISemiGroup < SparseMatrix > IMagma < SparseMatrix > IMultiplicable < SparseMatrix > IGroupAction < System.Double , SparseMatrix > Inherited Members Matrix.RowCount Matrix.ColumnCount Matrix.Item[Int32, Int32] Matrix.Add(Matrix, Matrix) Matrix.Subtract(Matrix, Matrix) Matrix.Multiply(Matrix, Matrix) Matrix.TransposeMultiplySelf(Matrix) Matrix.Multiply(Double, Matrix) Matrix.Multiply(Matrix, Double) Matrix.Divide(Matrix, Double) Matrix.Multiply(Matrix, Vector) Matrix.Multiply(Matrix, DenseVector) Matrix.Multiply(Matrix, SparseVector) Matrix.TransposeMultiply(Matrix, Vector) Matrix.TransposeMultiply(Matrix, DenseVector) Matrix.TransposeMultiply(Matrix, SparseVector) Matrix.Transpose() Matrix.Opposite() Matrix.IAddable<Matrix>.IsAssociative Matrix.IAddable<Matrix>.IsCommutative Matrix.IAddable<Matrix>.Add(Matrix) Matrix.ISubtractable<Matrix>.Subtract(Matrix) Matrix.IGroup<Matrix>.Opposite() Matrix.IZeroable<Matrix>.Zero() Matrix.IMultiplicable<Matrix>.IsAssociative Matrix.IMultiplicable<Matrix>.IsCommutative Matrix.IMultiplicable<Matrix>.Multiply(Matrix) Matrix.IGroupAction<Double, Matrix>.Multiply(Double) Matrix.IGroupAction<Double, Matrix>.Divide(Double) Namespace : BRIDGES.LinearAlgebra.Matrices Assembly : BRIDGES.dll Syntax public abstract class SparseMatrix : Matrix, IAbelianGroup<Matrix>, IGroup<Matrix>, IMonoid<Matrix>, ISemiGroup<Matrix>, ILoop<Matrix>, IQuasiGroup<Matrix>, IMagma<Matrix>, IAddable<Matrix>, ISubtractable<Matrix>, IZeroable<Matrix>, ISemiGroup<Matrix>, IMagma<Matrix>, IMultiplicable<Matrix>, IGroupAction<double, Matrix>, IAbelianGroup<SparseMatrix>, IGroup<SparseMatrix>, IMonoid<SparseMatrix>, ISemiGroup<SparseMatrix>, ILoop<SparseMatrix>, IQuasiGroup<SparseMatrix>, IMagma<SparseMatrix>, IAddable<SparseMatrix>, ISubtractable<SparseMatrix>, IZeroable<SparseMatrix>, ISemiGroup<SparseMatrix>, IMagma<SparseMatrix>, IMultiplicable<SparseMatrix>, IGroupAction<double, SparseMatrix> Constructors | Improve this Doc View Source SparseMatrix() Initialises a new instance of the SparseMatrix class. Declaration protected SparseMatrix() Properties | Improve this Doc View Source NonZerosCount Gets the number of non-zero values in the current sparse matrix. Declaration public abstract int NonZerosCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(SparseMatrix, SparseMatrix) Computes the addition of two SparseMatrix . Declaration public static SparseMatrix Add(SparseMatrix left, SparseMatrix right) Parameters Type Name Description SparseMatrix left Left SparseMatrix for the addition. SparseMatrix right Right SparseMatrix for the addition. Returns Type Description SparseMatrix The new SparseMatrix resulting from the addition. | Improve this Doc View Source Divide(SparseMatrix, Double) Computes the scalar division of a SparseMatrix with a -precision real number. Declaration public static SparseMatrix Divide(SparseMatrix operand, double divisor) Parameters Type Name Description SparseMatrix operand SparseMatrix to divide. System.Double divisor -precision real number to divide with. Returns Type Description SparseMatrix The new SparseMatrix resulting from the scalar division. | Improve this Doc View Source GetNonZeros() Provides an enumerable collection to iterate on the non-zero entries of the SparseMatrix non-zero entries. Declaration public abstract IEnumerable<(int RowIndex, int ColumnIndex, double Value)> GetNonZeros() Returns Type Description IEnumerable < System.ValueTuple < System.Int32 , System.Int32 , System.Double >> The enumerable collection containing row index, the column index and the value of the SparseMatrix non-zero entries. | Improve this Doc View Source Identity(Int32) Returns the neutral SparseMatrix for the multiplication. Declaration public static SparseMatrix Identity(int size) Parameters Type Name Description System.Int32 size Number of rows and columns of the SparseMatrix . Returns Type Description SparseMatrix The CompressedColumn , as a SparseMatrix , of the given size, with ones on the diagonal and zeros elsewhere. | Improve this Doc View Source Multiply(SparseMatrix, SparseMatrix) Computes the multiplication of two SparseMatrix . Declaration public static SparseMatrix Multiply(SparseMatrix left, SparseMatrix right) Parameters Type Name Description SparseMatrix left Left SparseMatrix for the multiplication. SparseMatrix right Right SparseMatrix for the multiplication. Returns Type Description SparseMatrix The new SparseMatrix resulting from the multiplication. | Improve this Doc View Source Multiply(SparseMatrix, DenseVector) Computes the right multiplication of a SparseMatrix with a DenseVector : A*V . Declaration public static DenseVector Multiply(SparseMatrix matrix, DenseVector vector) Parameters Type Name Description SparseMatrix matrix SparseMatrix to multiply on the right. DenseVector vector DenseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source Multiply(SparseMatrix, SparseVector) Computes the right multiplication of a SparseMatrix with a SparseVector : A*V . Declaration public static SparseVector Multiply(SparseMatrix matrix, SparseVector vector) Parameters Type Name Description SparseMatrix matrix SparseMatrix to multiply on the right. SparseVector vector SparseVector to multiply with. Returns Type Description SparseVector The new SparseVector resulting from the multiplication. | Improve this Doc View Source Multiply(SparseMatrix, Vector) Computes the right multiplication of a SparseMatrix with a Vector : A*V . Declaration public static Vector Multiply(SparseMatrix matrix, Vector vector) Parameters Type Name Description SparseMatrix matrix SparseMatrix to multiply on the right. Vector vector Vector to multiply with. Returns Type Description Vector The new Vector resulting from the multiplication. | Improve this Doc View Source Multiply(SparseMatrix, Double) Computes the scalar multiplication of a SparseMatrix with a -precision real number on the right. Declaration public static SparseMatrix Multiply(SparseMatrix operand, double factor) Parameters Type Name Description SparseMatrix operand SparseMatrix to multiply on the right. System.Double factor -precision real number. Returns Type Description SparseMatrix The new SparseMatrix resulting from the scalar multiplication. | Improve this Doc View Source Multiply(Double, SparseMatrix) Computes the scalar multiplication of a SparseMatrix with a -precision real number on the left. Declaration public static SparseMatrix Multiply(double factor, SparseMatrix operand) Parameters Type Name Description System.Double factor -precision real number. SparseMatrix operand SparseMatrix to multiply on the left. Returns Type Description SparseMatrix The new SparseMatrix resulting from the scalar multiplication. | Improve this Doc View Source Subtract(SparseMatrix, SparseMatrix) Computes the subtraction of two SparseMatrix . Declaration public static SparseMatrix Subtract(SparseMatrix left, SparseMatrix right) Parameters Type Name Description SparseMatrix left Left SparseMatrix to subtract. SparseMatrix right Right SparseMatrix to subtract with. Returns Type Description SparseMatrix The new SparseMatrix resulting from the subtraction. | Improve this Doc View Source TransposeMultiply(SparseMatrix, DenseVector) Computes the right multiplication of a transposed SparseMatrix with a DenseVector : At*V . Declaration public static DenseVector TransposeMultiply(SparseMatrix matrix, DenseVector vector) Parameters Type Name Description SparseMatrix matrix SparseMatrix to transpose then multiply on the right. DenseVector vector DenseVector to multiply with. Returns Type Description DenseVector The new DenseVector resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(SparseMatrix, SparseVector) Computes the right multiplication of a transposed SparseMatrix with a SparseVector : At*V . Declaration public static SparseVector TransposeMultiply(SparseMatrix matrix, SparseVector vector) Parameters Type Name Description SparseMatrix matrix SparseMatrix to transpose then multiply on the right. SparseVector vector SparseVector to multiply with. Returns Type Description SparseVector The new SparseVector resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(SparseMatrix, Vector) Computes the right multiplication of a transposed SparseMatrix with a Vector : At*V . Declaration public static Vector TransposeMultiply(SparseMatrix matrix, Vector vector) Parameters Type Name Description SparseMatrix matrix SparseMatrix to transpose then multiply on the right. Vector vector Vector to multiply with. Returns Type Description Vector The new Vector resulting from the multiplication. | Improve this Doc View Source TransposeMultiplySelf(SparseMatrix) Computes the left multiplication of a SparseMatrix with its transposition : At*A . Declaration public static SparseMatrix TransposeMultiplySelf(SparseMatrix matrix) Parameters Type Name Description SparseMatrix matrix transposed SparseMatrix for the multiplication. Returns Type Description SparseMatrix The new SparseMatrix resulting from the multiplication. | Improve this Doc View Source Zero(Int32, Int32) Returns the neutral SparseMatrix for the addition. Declaration public static SparseMatrix Zero(int rowCount, int columnCount) Parameters Type Name Description System.Int32 rowCount Number of rows of the SparseMatrix . System.Int32 columnCount Number of columns of the SparseMatrix . Returns Type Description SparseMatrix The CompressedColumn , as a SparseMatrix , of the given size and with zeros on every coordinates. Explicit Interface Implementations | Improve this Doc View Source IAddable<SparseMatrix>.Add(SparseMatrix) Computes the addition of the current element with another element on the right. Declaration SparseMatrix IAddable<SparseMatrix>.Add(SparseMatrix right) Parameters Type Name Description SparseMatrix right Returns Type Description SparseMatrix The new element resulting from the addition. | Improve this Doc View Source IAddable<SparseMatrix>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration bool IAddable<SparseMatrix>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<SparseMatrix>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration bool IAddable<SparseMatrix>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IMultiplicable<SparseMatrix>.IsAssociative Evaluates whether the multiplication is associative : a * (b * c) = (a * b) * c. Declaration bool IMultiplicable<SparseMatrix>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<SparseMatrix>.IsCommutative Evaluates whether the multiplication is commutative : a * b = b * a. Declaration bool IMultiplicable<SparseMatrix>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the addition. | Improve this Doc View Source IMultiplicable<SparseMatrix>.Multiply(SparseMatrix) Computes the multiplication of the current element with another element on the right. Declaration SparseMatrix IMultiplicable<SparseMatrix>.Multiply(SparseMatrix right) Parameters Type Name Description SparseMatrix right Returns Type Description SparseMatrix The new element resulting from the multiplication. | Improve this Doc View Source ISubtractable<SparseMatrix>.Subtract(SparseMatrix) Computes the subtraction of the current element with another element on the right. Declaration SparseMatrix ISubtractable<SparseMatrix>.Subtract(SparseMatrix right) Parameters Type Name Description SparseMatrix right Returns Type Description SparseMatrix The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<SparseMatrix>.Zero() Returns the neutral element of the addition. Declaration SparseMatrix IZeroable<SparseMatrix>.Zero() Returns Type Description SparseMatrix The neutral element of the addition. | Improve this Doc View Source IGroup<SparseMatrix>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<SparseMatrix>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, SparseMatrix>.Divide(Double) Computes the right scalar division of the current element. Declaration SparseMatrix IGroupAction<double, SparseMatrix>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description SparseMatrix The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, SparseMatrix>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration SparseMatrix IGroupAction<double, SparseMatrix>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description SparseMatrix The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> ISemiGroup<T> IMagma<T> IMultiplicable<T> IGroupAction<TValue, T> IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> ISemiGroup<T> IMagma<T> IMultiplicable<T> IGroupAction<TValue, T>"
  },
  "api/BRIDGES.LinearAlgebra.Matrices.Storage.DictionaryOfKeys.html": {
    "href": "api/BRIDGES.LinearAlgebra.Matrices.Storage.DictionaryOfKeys.html",
    "title": "Class DictionaryOfKeys | BRIDGES Documentation",
    "keywords": "Class DictionaryOfKeys Class defining a dictionary of keys storage for sparse matrix. Inheritance System.Object DictionaryOfKeys Namespace : BRIDGES.LinearAlgebra.Matrices.Storage Assembly : BRIDGES.dll Syntax public sealed class DictionaryOfKeys : object Constructors | Improve this Doc View Source DictionaryOfKeys() Initialises a new instance of the DictionaryOfKeys class. Declaration public DictionaryOfKeys() | Improve this Doc View Source DictionaryOfKeys(Double[], Int32[], Int32[]) Initialises a new instance of the DictionaryOfKeys class. Declaration public DictionaryOfKeys(double[] values, int[] rows, int[] columns) Parameters Type Name Description System.Double [] values Values of the new DictionaryOfKeys . System.Int32 [] rows Row indices of the new DictionaryOfKeys . System.Int32 [] columns Column indices of the new DictionaryOfKeys . Properties | Improve this Doc View Source Count Gets the number of elements in the DictionaryOfKeys . Declaration public int Count { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(Double, Int32, Int32) Adds an element to the storage. If the storage contains an element at the given row and column, the value is added to the existing one. Declaration public void Add(double value, int row, int column) Parameters Type Name Description System.Double value Value to add. System.Int32 row Row index of the value. System.Int32 column Column index of the value. | Improve this Doc View Source AddOrReplace(Double, Int32, Int32) Adds an element to the storage. If the storage contains an element at the given row and column, the value replaces the existing one. Declaration public void AddOrReplace(double value, int row, int column) Parameters Type Name Description System.Double value Value to add. System.Int32 row Row index of the value. System.Int32 column Column index of the value. | Improve this Doc View Source Clean(Double) Removes all zeros in the storage. Declaration public void Clean(double tolerance = null) Parameters Type Name Description System.Double tolerance Tolerance around the zero. | Improve this Doc View Source GetNonZeros() Returns an enumerator which reads through the non-zero components of the current DictionaryOfKeys . The represents is composed of the row-column pair and the component value. Declaration public IEnumerator<KeyValuePair<(int, int), double>> GetNonZeros() Returns Type Description IEnumerator < KeyValuePair < System.ValueTuple < System.Int32 , System.Int32 >, System.Double >> The enumerator of the DictionaryOfKeys . | Improve this Doc View Source IsEmpty(Int32, Int32) Evaluates whether the DictionaryOfKeys contains an element at the given row and column index. Declaration public bool IsEmpty(int row, int column) Parameters Type Name Description System.Int32 row Row index. System.Int32 column Column index. Returns Type Description System.Boolean true if the storage doesn't have element at the specified row and column index, false otherwise. | Improve this Doc View Source MakeSymmetric() Makes the storage symmetrical by applying the operation s1/2*(A^T+A) Declaration public void MakeSymmetric() | Improve this Doc View Source Remove(Int32, Int32) Removes an element of the storage at the given row and column. Declaration public void Remove(int row, int column) Parameters Type Name Description System.Int32 row Row index of the value. System.Int32 column Column index of the value. | Improve this Doc View Source Replace(Double, Int32, Int32) Replaces an element of the storage at the given row and column. Declaration public void Replace(double value, int row, int column) Parameters Type Name Description System.Double value Value to replace with. System.Int32 row Row index of the value. System.Int32 column Column index of the value."
  },
  "api/BRIDGES.LinearAlgebra.Matrices.Storage.html": {
    "href": "api/BRIDGES.LinearAlgebra.Matrices.Storage.html",
    "title": "Namespace BRIDGES.LinearAlgebra.Matrices.Storage | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.LinearAlgebra.Matrices.Storage Classes DictionaryOfKeys Class defining a dictionary of keys storage for sparse matrix."
  },
  "api/BRIDGES.LinearAlgebra.Vectors.DenseVector.html": {
    "href": "api/BRIDGES.LinearAlgebra.Vectors.DenseVector.html",
    "title": "Class DenseVector | BRIDGES Documentation",
    "keywords": "Class DenseVector Class defining a dense vector. Inheritance System.Object Vector DenseVector Implements IAbelianGroup < Vector > IGroup < Vector > IMonoid < Vector > ISemiGroup < Vector > ILoop < Vector > IQuasiGroup < Vector > IMagma < Vector > IAddable < Vector > ISubtractable < Vector > IZeroable < Vector > IGroupAction < System.Double , Vector > INorm < Vector > IMetric < Vector > IEquatable < Vector > IAbelianGroup < DenseVector > IGroup < DenseVector > IMonoid < DenseVector > ISemiGroup < DenseVector > ILoop < DenseVector > IQuasiGroup < DenseVector > IMagma < DenseVector > IAddable < DenseVector > ISubtractable < DenseVector > IZeroable < DenseVector > IGroupAction < System.Double , DenseVector > INorm < DenseVector > IMetric < DenseVector > IEquatable < DenseVector > Inherited Members Vector.Add(Vector, Vector) Vector.Subtract(Vector, Vector) Vector.Multiply(Double, Vector) Vector.Multiply(Vector, Double) Vector.Divide(Vector, Double) Vector.TransposeMultiply(Vector, Vector) Vector.GramSchmidt(IEnumerable<Vector>) Vector.IAddable<Vector>.IsAssociative Vector.IAddable<Vector>.IsCommutative Vector.IAddable<Vector>.Add(Vector) Vector.ISubtractable<Vector>.Subtract(Vector) Vector.IGroup<Vector>.Opposite() Vector.IZeroable<Vector>.Zero() Vector.IGroupAction<Double, Vector>.Multiply(Double) Vector.IGroupAction<Double, Vector>.Divide(Double) Vector.INorm<Vector>.Norm() Vector.IMetric<Vector>.DistanceTo(Vector) Namespace : BRIDGES.LinearAlgebra.Vectors Assembly : BRIDGES.dll Syntax public sealed class DenseVector : Vector, IAbelianGroup<Vector>, IGroup<Vector>, IMonoid<Vector>, ISemiGroup<Vector>, ILoop<Vector>, IQuasiGroup<Vector>, IMagma<Vector>, IAddable<Vector>, ISubtractable<Vector>, IZeroable<Vector>, IGroupAction<double, Vector>, INorm<Vector>, IMetric<Vector>, IAbelianGroup<DenseVector>, IGroup<DenseVector>, IMonoid<DenseVector>, ISemiGroup<DenseVector>, ILoop<DenseVector>, IQuasiGroup<DenseVector>, IMagma<DenseVector>, IAddable<DenseVector>, ISubtractable<DenseVector>, IZeroable<DenseVector>, IGroupAction<double, DenseVector>, INorm<DenseVector>, IMetric<DenseVector> Constructors | Improve this Doc View Source DenseVector(DenseVector) Initialises a new instance of the DenseVector class from another DenseVector . Declaration public DenseVector(DenseVector vector) Parameters Type Name Description DenseVector vector DenseVector to copy. | Improve this Doc View Source DenseVector(SparseVector) Initialises a new instance of the DenseVector class from a SparseVector . Declaration public DenseVector(SparseVector vector) Parameters Type Name Description SparseVector vector SparseVector to copy. | Improve this Doc View Source DenseVector(IEnumerable<Double>) Initialises a new instance of the DenseVector class from its components. Declaration public DenseVector(IEnumerable<double> components) Parameters Type Name Description IEnumerable < System.Double > components Components of the new DenseVector . | Improve this Doc View Source DenseVector(Int32) Initialises a new instance of the DenseVector class of given size, containing only zeros. Declaration public DenseVector(int size) Parameters Type Name Description System.Int32 size Number of component of the current DenseVector . Properties | Improve this Doc View Source Item[Int32] Gets or sets the component at a given index. Declaration public override double this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Double Overrides Vector.Item[Int32] | Improve this Doc View Source Size Number of component of the current vector. Declaration public override int Size { get; } Property Value Type Description System.Int32 Overrides Vector.Size Methods | Improve this Doc View Source Add(DenseVector, DenseVector) Computes the addition of two DenseVector . Declaration public static DenseVector Add(DenseVector left, DenseVector right) Parameters Type Name Description DenseVector left Left DenseVector for the addition. DenseVector right Right DenseVector for the addition. Returns Type Description DenseVector The new DenseVector resulting from the addition. | Improve this Doc View Source Add(DenseVector, SparseVector) Computes the addition of a DenseVector with a SparseVector . Declaration public static DenseVector Add(DenseVector left, SparseVector right) Parameters Type Name Description DenseVector left Left DenseVector for the addition. SparseVector right Right SparseVector for the addition. Returns Type Description DenseVector The new DenseVector resulting from the addition. | Improve this Doc View Source Add(DenseVector, Vector) Computes the addition of a DenseVector with a Vector . Declaration public static DenseVector Add(DenseVector left, Vector right) Parameters Type Name Description DenseVector left Left DenseVector for the addition. Vector right Right Vector for the addition. Returns Type Description DenseVector The new DenseVector resulting from the addition. | Improve this Doc View Source Add(SparseVector, DenseVector) Computes the addition of a SparseVector with a DenseVector . Declaration public static DenseVector Add(SparseVector left, DenseVector right) Parameters Type Name Description SparseVector left Left SparseVector for the addition. DenseVector right Right DenseVector for the addition. Returns Type Description DenseVector The new DenseVector resulting from the addition. | Improve this Doc View Source Add(Vector, DenseVector) Computes the addition of a Vector with a DenseVector . Declaration public static DenseVector Add(Vector left, DenseVector right) Parameters Type Name Description Vector left Left Vector for the addition. DenseVector right Right DenseVector for the addition. Returns Type Description DenseVector The new DenseVector resulting from the addition. | Improve this Doc View Source Divide(DenseVector, Double) Computes the scalar division of a DenseVector with a -precision real number. Declaration public static DenseVector Divide(DenseVector operand, double divisor) Parameters Type Name Description DenseVector operand DenseVector to divide. System.Double divisor -precision real number to divide with. Returns Type Description DenseVector The new DenseVector resulting from the scalar division. | Improve this Doc View Source Equals(DenseVector) Declaration public bool Equals(DenseVector other) Parameters Type Name Description DenseVector other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Vector) Declaration public override bool Equals(Vector other) Parameters Type Name Description Vector other Returns Type Description System.Boolean Overrides Vector.Equals(Vector) | Improve this Doc View Source GramSchmidt(IEnumerable<DenseVector>) Ortho-normalise the set of DenseVector using a Gram-Schimdt process. Declaration public static DenseVector[] GramSchmidt(IEnumerable<DenseVector> vectors) Parameters Type Name Description IEnumerable < DenseVector > vectors Set of DenseVector to operate on. Returns Type Description DenseVector [] The ortho-normal set of DenseVector . Remarks If the vectors are not linearly independent the number of vectors will change. | Improve this Doc View Source Length() Computes the length of the current vector. Declaration public override double Length() Returns Type Description System.Double The value of the vector length. Overrides Vector.Length() | Improve this Doc View Source Multiply(DenseVector, Double) Computes the scalar multiplication of a DenseVector with a -precision real number on the right. Declaration public static DenseVector Multiply(DenseVector operand, double factor) Parameters Type Name Description DenseVector operand DenseVector to multiply on the right. System.Double factor -precision real number. Returns Type Description DenseVector The new DenseVector resulting from the scalar multiplication. | Improve this Doc View Source Multiply(Double, DenseVector) Computes the scalar multiplication of a DenseVector with a -precision real number on the left. Declaration public static DenseVector Multiply(double factor, DenseVector operand) Parameters Type Name Description System.Double factor -precision real number. DenseVector operand DenseVector to multiply on the left. Returns Type Description DenseVector The new DenseVector resulting from the scalar multiplication. | Improve this Doc View Source Opposite() Replaces the current element with its opposite. Declaration protected override void Opposite() Overrides Vector.Opposite() | Improve this Doc View Source SquaredLength() Computes the squared length of the current vector. Declaration public override double SquaredLength() Returns Type Description System.Double The value of the vector squared length. Overrides Vector.SquaredLength() | Improve this Doc View Source StandardVector(Int32, Int32) Returns the unit DenseVector of a given size , with one at the given row index and zeros elsewhere. Declaration public static DenseVector StandardVector(int size, int index) Parameters Type Name Description System.Int32 size Size of the new DenseVector . System.Int32 index Index of the standard vector, i.e of the component equal to one. Returns Type Description DenseVector The new DenseVector representing the standard vector. | Improve this Doc View Source Subtract(DenseVector, DenseVector) Computes the subtraction of two DenseVector . Declaration public static DenseVector Subtract(DenseVector left, DenseVector right) Parameters Type Name Description DenseVector left Left DenseVector to subtract. DenseVector right Right DenseVector to subtract with. Returns Type Description DenseVector The new DenseVector resulting from the subtraction. | Improve this Doc View Source Subtract(DenseVector, SparseVector) Computes the subtraction of a DenseVector with a SparseVector . Declaration public static DenseVector Subtract(DenseVector left, SparseVector right) Parameters Type Name Description DenseVector left Left DenseVector to subtract. SparseVector right Right SparseVector to subtract with. Returns Type Description DenseVector The new DenseVector resulting from the subtraction. | Improve this Doc View Source Subtract(DenseVector, Vector) Computes the subtraction of a DenseVector with a Vector . Declaration public static DenseVector Subtract(DenseVector left, Vector right) Parameters Type Name Description DenseVector left Left DenseVector to subtract. Vector right Right Vector to subtract with. Returns Type Description DenseVector The new DenseVector resulting from the subtraction. | Improve this Doc View Source Subtract(SparseVector, DenseVector) Computes the subtraction of a SparseVector with a DenseVector . Declaration public static DenseVector Subtract(SparseVector left, DenseVector right) Parameters Type Name Description SparseVector left Left SparseVector to subtract. DenseVector right Right DenseVector to subtract with. Returns Type Description DenseVector The new DenseVector resulting from the subtraction. | Improve this Doc View Source Subtract(Vector, DenseVector) Computes the subtraction of a Vector with a DenseVector . Declaration public static DenseVector Subtract(Vector left, DenseVector right) Parameters Type Name Description Vector left Left Vector to subtract. DenseVector right Right DenseVector to subtract with. Returns Type Description DenseVector The new DenseVector resulting from the subtraction. | Improve this Doc View Source ToArray() Translates the current vector into its array representation. Declaration public override double[] ToArray() Returns Type Description System.Double [] The -precision array representing the vector. Overrides Vector.ToArray() | Improve this Doc View Source TransposeMultiply(DenseVector, DenseVector) Computes the multiplication between the transposed left DenseVector and the right DenseVector . Declaration public static double TransposeMultiply(DenseVector left, DenseVector right) Parameters Type Name Description DenseVector left Left DenseVector to transpose, then multiply. DenseVector right Right DenseVector to multiply. Returns Type Description System.Double The -precision scalar resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(DenseVector, SparseVector) Computes the multiplication between the transposed left DenseVector and the right SparseVector . Declaration public static double TransposeMultiply(DenseVector left, SparseVector right) Parameters Type Name Description DenseVector left Left DenseVector to transpose, then multiply. SparseVector right Right SparseVector to multiply. Returns Type Description System.Double The -precision scalar resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(SparseVector, DenseVector) Computes the multiplication between the transposed left SparseVector and the right DenseVector . Declaration public static double TransposeMultiply(SparseVector left, DenseVector right) Parameters Type Name Description SparseVector left Left SparseVector to transpose, then multiply. DenseVector right Right DenseVector to multiply. Returns Type Description System.Double The -precision scalar resulting from the multiplication. | Improve this Doc View Source Unitise() Unitises the current T . Declaration public override void Unitise() Overrides Vector.Unitise() | Improve this Doc View Source Zero(Int32) Returns the neutral DenseVector for the addition. Declaration public static DenseVector Zero(int size) Parameters Type Name Description System.Int32 size Number of component of the current DenseVector . Returns Type Description DenseVector The DenseVector of the given size and with zeros on every coordinates. Explicit Interface Implementations | Improve this Doc View Source IAddable<DenseVector>.Add(DenseVector) Computes the addition of the current element with another element on the right. Declaration DenseVector IAddable<DenseVector>.Add(DenseVector right) Parameters Type Name Description DenseVector right Returns Type Description DenseVector The new element resulting from the addition. | Improve this Doc View Source IAddable<DenseVector>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration bool IAddable<DenseVector>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<DenseVector>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration bool IAddable<DenseVector>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source ISubtractable<DenseVector>.Subtract(DenseVector) Computes the subtraction of the current element with another element on the right. Declaration DenseVector ISubtractable<DenseVector>.Subtract(DenseVector right) Parameters Type Name Description DenseVector right Returns Type Description DenseVector The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<DenseVector>.Zero() Returns the neutral element of the addition. Declaration DenseVector IZeroable<DenseVector>.Zero() Returns Type Description DenseVector The neutral element of the addition. | Improve this Doc View Source IMetric<DenseVector>.DistanceTo(DenseVector) Computes the distance of the current element to another element. Declaration double IMetric<DenseVector>.DistanceTo(DenseVector other) Parameters Type Name Description DenseVector other Returns Type Description System.Double The value of the distance between the two elements. | Improve this Doc View Source INorm<DenseVector>.Norm() Computes the norm the current T . Declaration double INorm<DenseVector>.Norm() Returns Type Description System.Double The value of the norm. | Improve this Doc View Source IGroup<DenseVector>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<DenseVector>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, DenseVector>.Divide(Double) Computes the right scalar division of the current element. Declaration DenseVector IGroupAction<double, DenseVector>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description DenseVector The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, DenseVector>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration DenseVector IGroupAction<double, DenseVector>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description DenseVector The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IGroupAction<TValue, T> INorm<T> IMetric<T> IEquatable<> IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IGroupAction<TValue, T> INorm<T> IMetric<T> IEquatable<>"
  },
  "api/BRIDGES.LinearAlgebra.Vectors.html": {
    "href": "api/BRIDGES.LinearAlgebra.Vectors.html",
    "title": "Namespace BRIDGES.LinearAlgebra.Vectors | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.LinearAlgebra.Vectors Classes DenseVector Class defining a dense vector. SparseVector Class defining a sparse vector. Vector Class defining a vector."
  },
  "api/BRIDGES.LinearAlgebra.Vectors.SparseVector.html": {
    "href": "api/BRIDGES.LinearAlgebra.Vectors.SparseVector.html",
    "title": "Class SparseVector | BRIDGES Documentation",
    "keywords": "Class SparseVector Class defining a sparse vector. Inheritance System.Object Vector SparseVector Implements IAbelianGroup < Vector > IGroup < Vector > IMonoid < Vector > ISemiGroup < Vector > ILoop < Vector > IQuasiGroup < Vector > IMagma < Vector > IAddable < Vector > ISubtractable < Vector > IZeroable < Vector > IGroupAction < System.Double , Vector > INorm < Vector > IMetric < Vector > IEquatable < Vector > IAbelianGroup < SparseVector > IGroup < SparseVector > IMonoid < SparseVector > ISemiGroup < SparseVector > ILoop < SparseVector > IQuasiGroup < SparseVector > IMagma < SparseVector > IAddable < SparseVector > ISubtractable < SparseVector > IZeroable < SparseVector > IGroupAction < System.Double , SparseVector > INorm < SparseVector > IMetric < SparseVector > IEquatable < SparseVector > Inherited Members Vector.Add(Vector, Vector) Vector.Subtract(Vector, Vector) Vector.Multiply(Double, Vector) Vector.Multiply(Vector, Double) Vector.Divide(Vector, Double) Vector.TransposeMultiply(Vector, Vector) Vector.GramSchmidt(IEnumerable<Vector>) Vector.IAddable<Vector>.IsAssociative Vector.IAddable<Vector>.IsCommutative Vector.IAddable<Vector>.Add(Vector) Vector.ISubtractable<Vector>.Subtract(Vector) Vector.IGroup<Vector>.Opposite() Vector.IZeroable<Vector>.Zero() Vector.IGroupAction<Double, Vector>.Multiply(Double) Vector.IGroupAction<Double, Vector>.Divide(Double) Vector.INorm<Vector>.Norm() Vector.IMetric<Vector>.DistanceTo(Vector) Namespace : BRIDGES.LinearAlgebra.Vectors Assembly : BRIDGES.dll Syntax public sealed class SparseVector : Vector, IAbelianGroup<Vector>, IGroup<Vector>, IMonoid<Vector>, ISemiGroup<Vector>, ILoop<Vector>, IQuasiGroup<Vector>, IMagma<Vector>, IAddable<Vector>, ISubtractable<Vector>, IZeroable<Vector>, IGroupAction<double, Vector>, INorm<Vector>, IMetric<Vector>, IAbelianGroup<SparseVector>, IGroup<SparseVector>, IMonoid<SparseVector>, ISemiGroup<SparseVector>, ILoop<SparseVector>, IQuasiGroup<SparseVector>, IMagma<SparseVector>, IAddable<SparseVector>, ISubtractable<SparseVector>, IZeroable<SparseVector>, IGroupAction<double, SparseVector>, INorm<SparseVector>, IMetric<SparseVector> Constructors | Improve this Doc View Source SparseVector(SparseVector) Initialises a new instance of the SparseVector class from another SparseVector . Declaration public SparseVector(SparseVector other) Parameters Type Name Description SparseVector other SparseVector to copy. | Improve this Doc View Source SparseVector(Int32) Initialises a new instance of the SparseVector class of given size, containing only zeros. Declaration public SparseVector(int size) Parameters Type Name Description System.Int32 size Number of components of the current SparseVector . | Improve this Doc View Source SparseVector(Int32, IEnumerable<Int32>, IEnumerable<Double>) Initialises a new instance of the SparseVector class of given size, with given values. Declaration public SparseVector(int size, IEnumerable<int> rowIndices, IEnumerable<double> values) Parameters Type Name Description System.Int32 size Number of components of the current SparseVector . IEnumerable < System.Int32 > rowIndices Row indices of the non-zero values of the current SparseVector . IEnumerable < System.Double > values Non-zero values of the current SparseVector . Properties | Improve this Doc View Source Item[Int32] Gets or sets the component at a given index. Declaration public override double this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Double Overrides Vector.Item[Int32] | Improve this Doc View Source NonZerosCount Gets the number of non-zero values in the current sparse vector. Declaration public int NonZerosCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Size Number of component of the current vector. Declaration public override int Size { get; } Property Value Type Description System.Int32 Overrides Vector.Size Methods | Improve this Doc View Source Add(SparseVector, SparseVector) Computes the addition of two SparseVector . Declaration public static SparseVector Add(SparseVector left, SparseVector right) Parameters Type Name Description SparseVector left Left SparseVector for the addition. SparseVector right Right SparseVector for the addition. Returns Type Description SparseVector The new SparseVector resulting from the addition. | Improve this Doc View Source Divide(SparseVector, Double) Computes the scalar division of a SparseVector with a -precision real number. Declaration public static SparseVector Divide(SparseVector operand, double divisor) Parameters Type Name Description SparseVector operand SparseVector to divide. System.Double divisor -precision real number to divide with. Returns Type Description SparseVector The new SparseVector resulting from the scalar division. | Improve this Doc View Source Equals(SparseVector) Declaration public bool Equals(SparseVector other) Parameters Type Name Description SparseVector other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Vector) Declaration public override bool Equals(Vector other) Parameters Type Name Description Vector other Returns Type Description System.Boolean Overrides Vector.Equals(Vector) | Improve this Doc View Source GetNonZeros() Returns an enumerator which reads through the non-zero components of the current SparseVector . The represents is composed of the row index and the component value. Declaration public IEnumerable<(int RowIndex, double Value)> GetNonZeros() Returns Type Description IEnumerable < System.ValueTuple < System.Int32 , System.Double >> The enumerator of the SparseVector . | Improve this Doc View Source GramSchmidt(IEnumerable<SparseVector>) Ortho-normalise the set of SparseVector using a Gram-Schimdt process. Declaration public static SparseVector[] GramSchmidt(IEnumerable<SparseVector> vectors) Parameters Type Name Description IEnumerable < SparseVector > vectors Set of SparseVector to operate on. Returns Type Description SparseVector [] The ortho-normal set of SparseVector . Remarks If the vectors are not linearly independent the number of vectors will change. | Improve this Doc View Source Length() Computes the length of the current vector. Declaration public override double Length() Returns Type Description System.Double The value of the vector length. Overrides Vector.Length() | Improve this Doc View Source Multiply(SparseVector, Double) Computes the scalar multiplication of a SparseVector with a -precision real number on the right. Declaration public static SparseVector Multiply(SparseVector operand, double factor) Parameters Type Name Description SparseVector operand SparseVector to multiply on the right. System.Double factor -precision real number. Returns Type Description SparseVector The new SparseVector resulting from the scalar multiplication. | Improve this Doc View Source Multiply(Double, SparseVector) Computes the scalar multiplication of a SparseVector with a -precision real number on the left. Declaration public static SparseVector Multiply(double factor, SparseVector operand) Parameters Type Name Description System.Double factor -precision real number. SparseVector operand SparseVector to multiply on the left. Returns Type Description SparseVector The new SparseVector resulting from the scalar multiplication. | Improve this Doc View Source Opposite() Replaces the current element with its opposite. Declaration protected override void Opposite() Overrides Vector.Opposite() | Improve this Doc View Source SquaredLength() Computes the squared length of the current vector. Declaration public override double SquaredLength() Returns Type Description System.Double The value of the vector squared length. Overrides Vector.SquaredLength() | Improve this Doc View Source StandardVector(Int32, Int32) Returns the unit SparseVector of a given size , with one at the given row index and zeros elsewhere. Declaration public static SparseVector StandardVector(int size, int index) Parameters Type Name Description System.Int32 size Size of the new SparseVector . System.Int32 index Index of the standard vector, i.e of the component equal to one. Returns Type Description SparseVector The new SparseVector representing the standard vector. | Improve this Doc View Source Subtract(SparseVector, SparseVector) Computes the subtraction of two SparseVector . Declaration public static SparseVector Subtract(SparseVector left, SparseVector right) Parameters Type Name Description SparseVector left Left SparseVector to subtract. SparseVector right Right SparseVector to subtract with. Returns Type Description SparseVector The new SparseVector resulting from the subtraction. | Improve this Doc View Source ToArray() Translates the current vector into its array representation. Declaration public override double[] ToArray() Returns Type Description System.Double [] The -precision array representing the vector. Overrides Vector.ToArray() | Improve this Doc View Source TransposeMultiply(DenseVector, SparseVector) Computes the multiplication between the transposed left DenseVector and the right SparseVector . Declaration public static double TransposeMultiply(DenseVector left, SparseVector right) Parameters Type Name Description DenseVector left Left DenseVector to transpose, then multiply. SparseVector right Right SparseVector to multiply. Returns Type Description System.Double The -precision scalar resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(SparseVector, DenseVector) Computes the multiplication between the transposed left SparseVector and the right DenseVector . Declaration public static double TransposeMultiply(SparseVector left, DenseVector right) Parameters Type Name Description SparseVector left Left SparseVector to transpose, then multiply. DenseVector right Right DenseVector to multiply. Returns Type Description System.Double The -precision scalar resulting from the multiplication. | Improve this Doc View Source TransposeMultiply(SparseVector, SparseVector) Computes the multiplication between the transposed left SparseVector and the right SparseVector . Declaration public static double TransposeMultiply(SparseVector left, SparseVector right) Parameters Type Name Description SparseVector left Left SparseVector to transpose, then multiply. SparseVector right Right SparseVector to multiply. Returns Type Description System.Double The -precision scalar resulting from the multiplication. | Improve this Doc View Source TryGetComponent(Int32, out Double) Gets the components at the given index. Declaration public bool TryGetComponent(int index, out double val) Parameters Type Name Description System.Int32 index The index of the component to get. System.Double val Value containing the component at the given index if it was found, zero otherwise. Returns Type Description System.Boolean true if the component was found, false otherwise. | Improve this Doc View Source Unitise() Unitises the current T . Declaration public override void Unitise() Overrides Vector.Unitise() | Improve this Doc View Source Zero(Int32) Returns the neutral SparseVector for the addition. Declaration public static SparseVector Zero(int size) Parameters Type Name Description System.Int32 size Number of component of the current SparseVector . Returns Type Description SparseVector The SparseVector of the given size and with zeros on every coordinates. Explicit Interface Implementations | Improve this Doc View Source IAddable<SparseVector>.Add(SparseVector) Computes the addition of the current element with another element on the right. Declaration SparseVector IAddable<SparseVector>.Add(SparseVector right) Parameters Type Name Description SparseVector right Returns Type Description SparseVector The new element resulting from the addition. | Improve this Doc View Source IAddable<SparseVector>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration bool IAddable<SparseVector>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<SparseVector>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration bool IAddable<SparseVector>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source ISubtractable<SparseVector>.Subtract(SparseVector) Computes the subtraction of the current element with another element on the right. Declaration SparseVector ISubtractable<SparseVector>.Subtract(SparseVector right) Parameters Type Name Description SparseVector right Returns Type Description SparseVector The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<SparseVector>.Zero() Returns the neutral element of the addition. Declaration SparseVector IZeroable<SparseVector>.Zero() Returns Type Description SparseVector The neutral element of the addition. | Improve this Doc View Source IMetric<SparseVector>.DistanceTo(SparseVector) Computes the distance of the current element to another element. Declaration double IMetric<SparseVector>.DistanceTo(SparseVector other) Parameters Type Name Description SparseVector other Returns Type Description System.Double The value of the distance between the two elements. | Improve this Doc View Source INorm<SparseVector>.Norm() Computes the norm the current T . Declaration double INorm<SparseVector>.Norm() Returns Type Description System.Double The value of the norm. | Improve this Doc View Source IGroup<SparseVector>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<SparseVector>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, SparseVector>.Divide(Double) Computes the right scalar division of the current element. Declaration SparseVector IGroupAction<double, SparseVector>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description SparseVector The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, SparseVector>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration SparseVector IGroupAction<double, SparseVector>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description SparseVector The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IGroupAction<TValue, T> INorm<T> IMetric<T> IEquatable<> IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IGroupAction<TValue, T> INorm<T> IMetric<T> IEquatable<>"
  },
  "api/BRIDGES.LinearAlgebra.Vectors.Vector.html": {
    "href": "api/BRIDGES.LinearAlgebra.Vectors.Vector.html",
    "title": "Class Vector | BRIDGES Documentation",
    "keywords": "Class Vector Class defining a vector. Inheritance System.Object Vector DenseVector SparseVector Implements IAbelianGroup < Vector > IGroup < Vector > IMonoid < Vector > ISemiGroup < Vector > ILoop < Vector > IQuasiGroup < Vector > IMagma < Vector > IAddable < Vector > ISubtractable < Vector > IZeroable < Vector > IGroupAction < System.Double , Vector > INorm < Vector > IMetric < Vector > IEquatable < Vector > Namespace : BRIDGES.LinearAlgebra.Vectors Assembly : BRIDGES.dll Syntax public abstract class Vector : object, IAbelianGroup<Vector>, IGroup<Vector>, IMonoid<Vector>, ISemiGroup<Vector>, ILoop<Vector>, IQuasiGroup<Vector>, IMagma<Vector>, IAddable<Vector>, ISubtractable<Vector>, IZeroable<Vector>, IGroupAction<double, Vector>, INorm<Vector>, IMetric<Vector> Constructors | Improve this Doc View Source Vector() Initialises a new instance of the Vector class. Declaration protected Vector() Properties | Improve this Doc View Source Item[Int32] Gets or sets the component at a given index. Declaration public abstract double this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Double | Improve this Doc View Source Size Number of component of the current vector. Declaration public abstract int Size { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(Vector, Vector) Computes the addition of two Vector . Declaration public static Vector Add(Vector left, Vector right) Parameters Type Name Description Vector left Left Vector for the addition. Vector right Right Vector for the addition. Returns Type Description Vector The new Vector resulting from the addition. | Improve this Doc View Source Divide(Vector, Double) Computes the scalar division of a Vector with a -precision real number. Declaration public static Vector Divide(Vector operand, double divisor) Parameters Type Name Description Vector operand Vector to divide. System.Double divisor -precision real number to divide with. Returns Type Description Vector The new Vector resulting from the scalar division. | Improve this Doc View Source Equals(Vector) Declaration public abstract bool Equals(Vector other) Parameters Type Name Description Vector other Returns Type Description System.Boolean | Improve this Doc View Source GramSchmidt(IEnumerable<Vector>) Ortho-normalise the set of Vector using a Gram-Schimdt process. Declaration public static Vector[] GramSchmidt(IEnumerable<Vector> vectors) Parameters Type Name Description IEnumerable < Vector > vectors Set of Vector to operate on. Returns Type Description Vector [] The ortho-normal set of Vector . Remarks If the vectors are not linearly independent the number of vectors will change. | Improve this Doc View Source Length() Computes the length of the current vector. Declaration public abstract double Length() Returns Type Description System.Double The value of the vector length. | Improve this Doc View Source Multiply(Vector, Double) Computes the scalar multiplication of a Vector with a -precision real number on the right. Declaration public static Vector Multiply(Vector operand, double factor) Parameters Type Name Description Vector operand Vector to multiply on the right. System.Double factor -precision real number. Returns Type Description Vector The new Vector resulting from the scalar multiplication. | Improve this Doc View Source Multiply(Double, Vector) Computes the scalar multiplication of a Vector with a -precision real number on the left. Declaration public static Vector Multiply(double factor, Vector operand) Parameters Type Name Description System.Double factor -precision real number. Vector operand Vector to multiply on the left. Returns Type Description Vector The new Vector resulting from the scalar multiplication. | Improve this Doc View Source Opposite() Replaces the current element with its opposite. Declaration protected abstract void Opposite() | Improve this Doc View Source SquaredLength() Computes the squared length of the current vector. Declaration public abstract double SquaredLength() Returns Type Description System.Double The value of the vector squared length. | Improve this Doc View Source StandardVector(Int32, Int32) Returns the unit Vector of a given size , with one at the given row index and zeros elsewhere. Declaration public static Vector StandardVector(int size, int index) Parameters Type Name Description System.Int32 size Size of the new Vector . System.Int32 index Index of the standard vector, i.e of the component equal to one. Returns Type Description Vector The new Vector representing the standard vector. | Improve this Doc View Source Subtract(Vector, Vector) Computes the subtraction of two Vector . Declaration public static Vector Subtract(Vector left, Vector right) Parameters Type Name Description Vector left Left Vector to subtract. Vector right Right Vector to subtract with. Returns Type Description Vector The new Vector resulting from the subtraction. | Improve this Doc View Source ToArray() Translates the current vector into its array representation. Declaration public abstract double[] ToArray() Returns Type Description System.Double [] The -precision array representing the vector. | Improve this Doc View Source TransposeMultiply(Vector, Vector) Computes the multiplication between the transposed left Vector and the right Vector . Declaration public static double TransposeMultiply(Vector left, Vector right) Parameters Type Name Description Vector left Left Vector to transpose, then multiply. Vector right Right Vector to multiply. Returns Type Description System.Double The -precision scalar resulting from the multiplication. | Improve this Doc View Source Unitise() Unitises the current T . Declaration public abstract void Unitise() | Improve this Doc View Source Zero(Int32) Returns the neutral Vector for the addition. Declaration public static Vector Zero(int size) Parameters Type Name Description System.Int32 size Number of component of the current vector. Returns Type Description Vector The SparseVector , as a Vector , of the given size and with zeros on every coordinates. Explicit Interface Implementations | Improve this Doc View Source IAddable<Vector>.Add(Vector) Computes the addition of the current element with another element on the right. Declaration Vector IAddable<Vector>.Add(Vector right) Parameters Type Name Description Vector right Returns Type Description Vector The new element resulting from the addition. | Improve this Doc View Source IAddable<Vector>.IsAssociative Evaluates whether the addition is associative : a + (b + c) = (a + b) + c. Declaration bool IAddable<Vector>.IsAssociative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source IAddable<Vector>.IsCommutative Evaluates whether the addition is commutative : a + b = b + a. Declaration bool IAddable<Vector>.IsCommutative { get; } Returns Type Description System.Boolean Remarks This property should be implemented explicitely as it is only informative. It also helps prevents any confusion with the homonymous property of the multiplication. | Improve this Doc View Source ISubtractable<Vector>.Subtract(Vector) Computes the subtraction of the current element with another element on the right. Declaration Vector ISubtractable<Vector>.Subtract(Vector right) Parameters Type Name Description Vector right Returns Type Description Vector The new element resulting from the subtraction. | Improve this Doc View Source IZeroable<Vector>.Zero() Returns the neutral element of the addition. Declaration Vector IZeroable<Vector>.Zero() Returns Type Description Vector The neutral element of the addition. | Improve this Doc View Source IMetric<Vector>.DistanceTo(Vector) Computes the distance of the current element to another element. Declaration double IMetric<Vector>.DistanceTo(Vector other) Parameters Type Name Description Vector other Returns Type Description System.Double The value of the distance between the two elements. | Improve this Doc View Source INorm<Vector>.Norm() Computes the norm the current T . Declaration double INorm<Vector>.Norm() Returns Type Description System.Double The value of the norm. | Improve this Doc View Source IGroup<Vector>.Opposite() Replaces the current element with its opposite. Declaration bool IGroup<Vector>.Opposite() Returns Type Description System.Boolean true if the current element was opposed, false otherwise. | Improve this Doc View Source IGroupAction<Double, Vector>.Divide(Double) Computes the right scalar division of the current element. Declaration Vector IGroupAction<double, Vector>.Divide(double divisor) Parameters Type Name Description System.Double divisor Returns Type Description Vector The new element resulting from the scalar dividion. | Improve this Doc View Source IGroupAction<Double, Vector>.Multiply(Double) Computes the right scalar multiplication of the current element. Declaration Vector IGroupAction<double, Vector>.Multiply(double factor) Parameters Type Name Description System.Double factor Returns Type Description Vector The new element resulting from the scalar multiplication. Implements IAbelianGroup<T> IGroup<T> IMonoid<T> ISemiGroup<T> ILoop<T> IQuasiGroup<T> IMagma<T> IAddable<T> ISubtractable<T> IZeroable<T> IGroupAction<TValue, T> INorm<T> IMetric<T> IEquatable<>"
  },
  "api/BRIDGES.Settings.html": {
    "href": "api/BRIDGES.Settings.html",
    "title": "Class Settings | BRIDGES Documentation",
    "keywords": "Class Settings Static class defining global settings for the BRIDGES framework. Inheritance System.Object Settings Namespace : BRIDGES Assembly : BRIDGES.dll Syntax public static class Settings : object Fields | Improve this Doc View Source AbsolutePrecision Absolute linear precision. Declaration public const double AbsolutePrecision = null Field Value Type Description System.Double | Improve this Doc View Source AngularPrecision Absolute angular precision (in radians). Declaration public const double AngularPrecision = null Field Value Type Description System.Double"
  },
  "api/BRIDGES.Solvers.GuidedProjection.Energy.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.Energy.html",
    "title": "Class Energy | BRIDGES Documentation",
    "keywords": "Class Energy Class defining an energy for the GuidedProjectionAlgorithm . Inheritance System.Object Energy Namespace : BRIDGES.Solvers.GuidedProjection Assembly : BRIDGES.dll Syntax public class Energy : object Fields | Improve this Doc View Source energyType Energy type defining the reduced vector LocalKi and the scalar value Si . Declaration protected IEnergyType energyType Field Value Type Description IEnergyType | Improve this Doc View Source variables Variables composing the local vector xReduced on which the energyType is defined. Declaration protected List<(VariableSet Set, int Index)> variables Field Value Type Description List < System.ValueTuple < VariableSet , System.Int32 >> Remarks The first component corresponds to the variable set and the second to the index of the variable in the set. Properties | Improve this Doc View Source Weight Gets or sets the weight of the energy. Declaration public double Weight { get; } Property Value Type Description System.Double"
  },
  "api/BRIDGES.Solvers.GuidedProjection.EnergyTypes.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.EnergyTypes.html",
    "title": "Namespace BRIDGES.Solvers.GuidedProjection.EnergyTypes | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Solvers.GuidedProjection.EnergyTypes Classes SegmentOrthogonality Energy enforcing a segment defined from two point variables, pi and pj , to be orthogonal to a constant direction v . SegmentParallelity Energy enforcing a segment defined from two point variables, pi and pj , to be parallel to a constant direction v ."
  },
  "api/BRIDGES.Solvers.GuidedProjection.EnergyTypes.SegmentOrthogonality.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.EnergyTypes.SegmentOrthogonality.html",
    "title": "Class SegmentOrthogonality | BRIDGES Documentation",
    "keywords": "Class SegmentOrthogonality Energy enforcing a segment defined from two point variables, pi and pj , to be orthogonal to a constant direction v . Inheritance System.Object SegmentOrthogonality Implements IEnergyType Namespace : BRIDGES.Solvers.GuidedProjection.EnergyTypes Assembly : BRIDGES.dll Syntax public class SegmentOrthogonality : object, IEnergyType Remarks The vector xReduced = [pi, pj]. Constructors | Improve this Doc View Source SegmentOrthogonality(Double[]) Initialises a new instance of the SegmentOrthogonality class. Declaration public SegmentOrthogonality(double[] coordinates) Parameters Type Name Description System.Double [] coordinates Coordinates of the target direction vector. Properties | Improve this Doc View Source LocalKi Gets the local vector Ki of the energy. Declaration public SparseVector LocalKi { get; } Property Value Type Description SparseVector | Improve this Doc View Source Si Gets the scalar value Si of the energy. Declaration public double Si { get; } Property Value Type Description System.Double Implements IEnergyType"
  },
  "api/BRIDGES.Solvers.GuidedProjection.EnergyTypes.SegmentParallelity.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.EnergyTypes.SegmentParallelity.html",
    "title": "Class SegmentParallelity | BRIDGES Documentation",
    "keywords": "Class SegmentParallelity Energy enforcing a segment defined from two point variables, pi and pj , to be parallel to a constant direction v . Inheritance System.Object SegmentParallelity Implements IEnergyType Namespace : BRIDGES.Solvers.GuidedProjection.EnergyTypes Assembly : BRIDGES.dll Syntax public class SegmentParallelity : object, IEnergyType Remarks A scalar variable l identified as the segment length must be defined. The vector xReduced = [pi, pj, l]. Constructors | Improve this Doc View Source SegmentParallelity(Double[]) Initialises a new instance of the SegmentParallelity class by defining the coordinates of the target direction vector. Declaration public SegmentParallelity(double[] coordinates) Parameters Type Name Description System.Double [] coordinates Coordinates of the target direction vector. Properties | Improve this Doc View Source LocalKi Gets the local vector Ki of the energy. Declaration public SparseVector LocalKi { get; } Property Value Type Description SparseVector | Improve this Doc View Source Si Gets the scalar value Si of the energy. Declaration public double Si { get; } Property Value Type Description System.Double Implements IEnergyType"
  },
  "api/BRIDGES.Solvers.GuidedProjection.GuidedProjectionAlgorithm.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.GuidedProjectionAlgorithm.html",
    "title": "Class GuidedProjectionAlgorithm | BRIDGES Documentation",
    "keywords": "Class GuidedProjectionAlgorithm Class defining a Guided Projection Algorithm solver. The algorithm is described in https://doi.org/10.1145/2601097.2601213 . Inheritance System.Object GuidedProjectionAlgorithm Namespace : BRIDGES.Solvers.GuidedProjection Assembly : BRIDGES.dll Syntax public sealed class GuidedProjectionAlgorithm : object Constructors | Improve this Doc View Source GuidedProjectionAlgorithm(Double, Int32) Initializes a new instance of the GuidedProjectionAlgorithm class. Declaration public GuidedProjectionAlgorithm(double epsilon, int maxIteration) Parameters Type Name Description System.Double epsilon The weights of the distance to the previous iteration. System.Int32 maxIteration The iteration index after which the solver is stopped. Properties | Improve this Doc View Source IterationIndex Gets the zero-based index of the current iteration. Declaration public int IterationIndex { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxIteration Gets or sets the maximum number of iteration after which the solver is stopped. Declaration public int MaxIteration { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source X Gets the vector containing all the components of the GuidedProjectionAlgorithm . Declaration public Vector X { get; } Property Value Type Description Vector Methods | Improve this Doc View Source AddConstraint(ILinearisedConstraintType, List<(VariableSet, Int32)>, Func<Int32, Double>) Creates a new LinearisedConstraint with a varying weight and adds it to the list. Declaration public LinearisedConstraint AddConstraint(ILinearisedConstraintType constraintType, List<(VariableSet, int)> variables, Func<int, double> weightFunction) Parameters Type Name Description ILinearisedConstraintType constraintType Quadratic constraint type defining the constraint locally. List < System.ValueTuple < VariableSet , System.Int32 >> variables Variables composing the local vector xReduced. Func < System.Int32 , System.Double > weightFunction Function computing the weight from the iteration index. Returns Type Description LinearisedConstraint The new constraint. | Improve this Doc View Source AddConstraint(ILinearisedConstraintType, List<(VariableSet, Int32)>, Double) Creates a new LinearisedConstraint with a constant weight and adds it to the list. Declaration public LinearisedConstraint AddConstraint(ILinearisedConstraintType constraintType, List<(VariableSet, int)> variables, double weight = 1) Parameters Type Name Description ILinearisedConstraintType constraintType Quadratic constraint type defining the constraint locally. List < System.ValueTuple < VariableSet , System.Int32 >> variables Variables composing the local vector xReduced. System.Double weight Weight for the constraint. Returns Type Description LinearisedConstraint The new constraint. | Improve this Doc View Source AddConstraint(IQuadraticConstraintType, List<(VariableSet, Int32)>, Func<Int32, Double>) Creates a new QuadraticConstraint with a varying weight and adds it to the list. Declaration public QuadraticConstraint AddConstraint(IQuadraticConstraintType constraintType, List<(VariableSet, int)> variables, Func<int, double> weightFunction) Parameters Type Name Description IQuadraticConstraintType constraintType Quadratic constraint type defining the constraint locally. List < System.ValueTuple < VariableSet , System.Int32 >> variables Variables composing the local vector xReduced. Func < System.Int32 , System.Double > weightFunction Function computing the weight from the iteration index. Returns Type Description QuadraticConstraint The new constraint. | Improve this Doc View Source AddConstraint(IQuadraticConstraintType, List<(VariableSet, Int32)>, Double) Creates a new QuadraticConstraint with a constant weight and adds it to the list. Declaration public QuadraticConstraint AddConstraint(IQuadraticConstraintType constraintType, List<(VariableSet, int)> variables, double weight = 1) Parameters Type Name Description IQuadraticConstraintType constraintType Quadratic constraint type defining the constraint locally. List < System.ValueTuple < VariableSet , System.Int32 >> variables Variables composing the local vector xReduced. System.Double weight Weight for the constraint. Returns Type Description QuadraticConstraint The new constraint. | Improve this Doc View Source AddEnergy(IEnergyType, List<(VariableSet, Int32)>, Func<Int32, Double>) Creates a new Energy with a varying weight and adds it to the list. Declaration public Energy AddEnergy(IEnergyType energyType, List<(VariableSet, int)> variables, Func<int, double> weightFunction) Parameters Type Name Description IEnergyType energyType Energy type defining the energy locally. List < System.ValueTuple < VariableSet , System.Int32 >> variables Variables composing the local vector xReduced. Func < System.Int32 , System.Double > weightFunction Function computing the weight from the iteration index. Returns Type Description Energy | Improve this Doc View Source AddEnergy(IEnergyType, List<(VariableSet, Int32)>, Double) Creates a new Energy with a constant weight and adds it to the list. Declaration public Energy AddEnergy(IEnergyType energyType, List<(VariableSet, int)> variables, double weight = 1) Parameters Type Name Description IEnergyType energyType Energy type defining the energy locally. List < System.ValueTuple < VariableSet , System.Int32 >> variables Variables composing the local vector xReduced. System.Double weight Weight for the energy. Returns Type Description Energy The new energy. | Improve this Doc View Source AddVariableSet(Int32) Creates a new VariableSet and adds it after the other ones. Declaration public VariableSet AddVariableSet(int variableDimension) Parameters Type Name Description System.Int32 variableDimension The dimension of the variables contained in set. Returns Type Description VariableSet The newly created VariableSet . | Improve this Doc View Source AddVariableSet(Int32, Int32) Creates a new VariableSet and adds it after the other ones. Declaration public VariableSet AddVariableSet(int variableDimension, int setCapacity) Parameters Type Name Description System.Int32 variableDimension The dimension of the variables contained in set. System.Int32 setCapacity The indicative number of variables that the new set can initially store. Returns Type Description VariableSet The newly created VariableSet . | Improve this Doc View Source InitialiseX() Initialise the solver for the GuidedProjectionAlgorithm . Declaration public void InitialiseX() | Improve this Doc View Source RunIteration(Boolean) Runs one iteration. Declaration public void RunIteration(bool useAsync) Parameters Type Name Description System.Boolean useAsync Evaluates whether the iteration should use asynchronous programming or not."
  },
  "api/BRIDGES.Solvers.GuidedProjection.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.html",
    "title": "Namespace BRIDGES.Solvers.GuidedProjection | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Solvers.GuidedProjection Classes Energy Class defining an energy for the GuidedProjectionAlgorithm . GuidedProjectionAlgorithm Class defining a Guided Projection Algorithm solver. The algorithm is described in https://doi.org/10.1145/2601097.2601213 . LinearisedConstraint Class defining a linearised constraint for the GuidedProjectionAlgorithm . QuadraticConstraint Class defining a quadratic constraint for the GuidedProjectionAlgorithm . VariableSet Class defining a set of variables with the same dimension (i.e. variables with the same number of components)."
  },
  "api/BRIDGES.Solvers.GuidedProjection.Interfaces.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.Interfaces.html",
    "title": "Namespace BRIDGES.Solvers.GuidedProjection.Interfaces | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Solvers.GuidedProjection.Interfaces Interfaces IEnergyType Interface defining an energy type for the GuidedProjectionAlgorithm . ILinearisedConstraintType Interface defining a linearised constraint type for the GuidedProjectionAlgorithm . IQuadraticConstraintType Interface defining a quadratic constraint type for the GuidedProjectionAlgorithm ."
  },
  "api/BRIDGES.Solvers.GuidedProjection.Interfaces.IEnergyType.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.Interfaces.IEnergyType.html",
    "title": "Interface IEnergyType | BRIDGES Documentation",
    "keywords": "Interface IEnergyType Interface defining an energy type for the GuidedProjectionAlgorithm . Namespace : BRIDGES.Solvers.GuidedProjection.Interfaces Assembly : BRIDGES.dll Syntax public interface IEnergyType Properties | Improve this Doc View Source LocalKi Gets the local vector Ki of the energy. Declaration SparseVector LocalKi { get; } Property Value Type Description SparseVector | Improve this Doc View Source Si Gets the scalar value Si of the energy. Declaration double Si { get; } Property Value Type Description System.Double"
  },
  "api/BRIDGES.Solvers.GuidedProjection.Interfaces.ILinearisedConstraintType.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.Interfaces.ILinearisedConstraintType.html",
    "title": "Interface ILinearisedConstraintType | BRIDGES Documentation",
    "keywords": "Interface ILinearisedConstraintType Interface defining a linearised constraint type for the GuidedProjectionAlgorithm . Inherited Members IQuadraticConstraintType.LocalHi IQuadraticConstraintType.LocalBi IQuadraticConstraintType.Ci Namespace : BRIDGES.Solvers.GuidedProjection.Interfaces Assembly : BRIDGES.dll Syntax public interface ILinearisedConstraintType : IQuadraticConstraintType Methods | Improve this Doc View Source UpdateLocal(Double[]) Updates the local members (LocalHi, LocalBi) of the linearised constraint using xReduced. Declaration void UpdateLocal(double[] xReduced) Parameters Type Name Description System.Double [] xReduced Actualized components of the local vector xReduced formed from the constraint variables."
  },
  "api/BRIDGES.Solvers.GuidedProjection.Interfaces.IQuadraticConstraintType.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.Interfaces.IQuadraticConstraintType.html",
    "title": "Interface IQuadraticConstraintType | BRIDGES Documentation",
    "keywords": "Interface IQuadraticConstraintType Interface defining a quadratic constraint type for the GuidedProjectionAlgorithm . Namespace : BRIDGES.Solvers.GuidedProjection.Interfaces Assembly : BRIDGES.dll Syntax public interface IQuadraticConstraintType Properties | Improve this Doc View Source Ci Gets the scalar value Ci of the energy. Declaration double Ci { get; } Property Value Type Description System.Double | Improve this Doc View Source LocalBi Gets the local vector Bi of the energy. Declaration SparseVector LocalBi { get; } Property Value Type Description SparseVector | Improve this Doc View Source LocalHi Gets the local symmetric matrix Hi of the energy. Declaration SparseMatrix LocalHi { get; } Property Value Type Description SparseMatrix"
  },
  "api/BRIDGES.Solvers.GuidedProjection.LinearisedConstraint.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.LinearisedConstraint.html",
    "title": "Class LinearisedConstraint | BRIDGES Documentation",
    "keywords": "Class LinearisedConstraint Class defining a linearised constraint for the GuidedProjectionAlgorithm . Inheritance System.Object QuadraticConstraint LinearisedConstraint Inherited Members QuadraticConstraint.constraintType QuadraticConstraint.variables QuadraticConstraint.Weight Namespace : BRIDGES.Solvers.GuidedProjection Assembly : BRIDGES.dll Syntax public sealed class LinearisedConstraint : QuadraticConstraint"
  },
  "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraint.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraint.html",
    "title": "Class QuadraticConstraint | BRIDGES Documentation",
    "keywords": "Class QuadraticConstraint Class defining a quadratic constraint for the GuidedProjectionAlgorithm . Inheritance System.Object QuadraticConstraint LinearisedConstraint Namespace : BRIDGES.Solvers.GuidedProjection Assembly : BRIDGES.dll Syntax public class QuadraticConstraint : object Fields | Improve this Doc View Source constraintType Constraint type defining the reduced matrix LocalHi , the reduced vector LocalBi and the scalar value Ci . Declaration protected IQuadraticConstraintType constraintType Field Value Type Description IQuadraticConstraintType | Improve this Doc View Source variables Variables composing the local vector xReduced on which the constraintType is defined. Declaration protected List<(VariableSet Set, int Index)> variables Field Value Type Description List < System.ValueTuple < VariableSet , System.Int32 >> Remarks The first item corresponds to the variable set and the second to the index of the variable in the set. Properties | Improve this Doc View Source Weight Gets or sets the value of the weight for the constraint. Declaration public double Weight { get; } Property Value Type Description System.Double"
  },
  "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes.CoherentLength.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes.CoherentLength.html",
    "title": "Class CoherentLength | BRIDGES Documentation",
    "keywords": "Class CoherentLength Constraint enforcing a scalar variable l to match with the distance between two point variables, pi and pj . Inheritance System.Object CoherentLength Implements IQuadraticConstraintType Namespace : BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes Assembly : BRIDGES.dll Syntax public class CoherentLength : object, IQuadraticConstraintType Remarks The vector xReduced = [pi, pj, l]. Constructors | Improve this Doc View Source CoherentLength(Int32) Initialises a new instance of the CoherentLength class. Declaration public CoherentLength(int spaceDimension = 3) Parameters Type Name Description System.Int32 spaceDimension Dimension of the space containing the points. Properties | Improve this Doc View Source Ci Gets the scalar value Ci of the energy. Declaration public double Ci { get; } Property Value Type Description System.Double | Improve this Doc View Source LocalBi Gets the local vector Bi of the energy. Declaration public SparseVector LocalBi { get; } Property Value Type Description SparseVector | Improve this Doc View Source LocalHi Gets the local symmetric matrix Hi of the energy. Declaration public SparseMatrix LocalHi { get; } Property Value Type Description SparseMatrix Implements IQuadraticConstraintType"
  },
  "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes.html",
    "title": "Namespace BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes | BRIDGES Documentation",
    "keywords": "Namespace BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes Classes CoherentLength Constraint enforcing a scalar variable l to match with the distance between two point variables, pi and pj . LowerBound Constraint enforcing a value variable l to be higher than a lower bound σ using a dummy value variable λ . UpperBound Constraint enforcing a value variable l to be lower than an upper bound σ using a dummy value variable λ . VectorLength Constraint enforcing a vector variable v to have a given length l (computed with euclidean norm)."
  },
  "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes.LowerBound.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes.LowerBound.html",
    "title": "Class LowerBound | BRIDGES Documentation",
    "keywords": "Class LowerBound Constraint enforcing a value variable l to be higher than a lower bound σ using a dummy value variable λ . Inheritance System.Object LowerBound Implements IQuadraticConstraintType Namespace : BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes Assembly : BRIDGES.dll Syntax public class LowerBound : object, IQuadraticConstraintType Remarks The vector xReduced = [l, λ], and Ci = σ. Constructors | Improve this Doc View Source LowerBound(Double) Initialises a new instance of the LowerBound class. Declaration public LowerBound(double lowerBound) Parameters Type Name Description System.Double lowerBound Value of the lower bound of the constraint. Properties | Improve this Doc View Source Ci Gets the scalar value Ci of the energy. Declaration public double Ci { get; } Property Value Type Description System.Double | Improve this Doc View Source LocalBi Gets the local vector Bi of the energy. Declaration public SparseVector LocalBi { get; } Property Value Type Description SparseVector | Improve this Doc View Source LocalHi Gets the local symmetric matrix Hi of the energy. Declaration public SparseMatrix LocalHi { get; } Property Value Type Description SparseMatrix Implements IQuadraticConstraintType"
  },
  "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes.UpperBound.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes.UpperBound.html",
    "title": "Class UpperBound | BRIDGES Documentation",
    "keywords": "Class UpperBound Constraint enforcing a value variable l to be lower than an upper bound σ using a dummy value variable λ . Inheritance System.Object UpperBound Implements IQuadraticConstraintType Namespace : BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes Assembly : BRIDGES.dll Syntax public class UpperBound : object, IQuadraticConstraintType Remarks The vector xReduced = [l, λ], and Ci = σ. Constructors | Improve this Doc View Source UpperBound(Double) Initialises a new instance of the UpperBound class. Declaration public UpperBound(double upperBound) Parameters Type Name Description System.Double upperBound Value of the upper bound of the constraint. Properties | Improve this Doc View Source Ci Gets the scalar value Ci of the energy. Declaration public double Ci { get; } Property Value Type Description System.Double | Improve this Doc View Source LocalBi Gets the local vector Bi of the energy. Declaration public SparseVector LocalBi { get; } Property Value Type Description SparseVector | Improve this Doc View Source LocalHi Gets the local symmetric matrix Hi of the energy. Declaration public SparseMatrix LocalHi { get; } Property Value Type Description SparseMatrix Implements IQuadraticConstraintType"
  },
  "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes.VectorLength.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes.VectorLength.html",
    "title": "Class VectorLength | BRIDGES Documentation",
    "keywords": "Class VectorLength Constraint enforcing a vector variable v to have a given length l (computed with euclidean norm). Inheritance System.Object VectorLength Implements IQuadraticConstraintType Namespace : BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes Assembly : BRIDGES.dll Syntax public class VectorLength : object, IQuadraticConstraintType Remarks The vector xReduced = [v], and Ci = l 2 . Constructors | Improve this Doc View Source VectorLength(Double, Int32) Initialises a new instance of the VectorLength class. Declaration public VectorLength(double targetLength, int spaceDimension = 3) Parameters Type Name Description System.Double targetLength Target length for the vector. System.Int32 spaceDimension Dimension of the space containing the vector. Properties | Improve this Doc View Source Ci Gets the scalar value Ci of the energy. Declaration public double Ci { get; } Property Value Type Description System.Double | Improve this Doc View Source LocalBi Gets the local vector Bi of the energy. Declaration public SparseVector LocalBi { get; } Property Value Type Description SparseVector | Improve this Doc View Source LocalHi Gets the local symmetric matrix Hi of the energy. Declaration public SparseMatrix LocalHi { get; } Property Value Type Description SparseMatrix Implements IQuadraticConstraintType"
  },
  "api/BRIDGES.Solvers.GuidedProjection.VariableSet.html": {
    "href": "api/BRIDGES.Solvers.GuidedProjection.VariableSet.html",
    "title": "Class VariableSet | BRIDGES Documentation",
    "keywords": "Class VariableSet Class defining a set of variables with the same dimension (i.e. variables with the same number of components). Inheritance System.Object VariableSet Namespace : BRIDGES.Solvers.GuidedProjection Assembly : BRIDGES.dll Syntax public class VariableSet : object Properties | Improve this Doc View Source SetIndex Gets the index of the set in the GuidedProjectionAlgorithm 's list of variable sets. Declaration public int SetIndex { get; } Property Value Type Description System.Int32 | Improve this Doc View Source VariableCount Gets the number of variables in the set. Declaration public int VariableCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source VariableDimension Gets the common dimension of variables in the set. Declaration public int VariableDimension { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AddVariable(Double[]) Adds a variable to the set. Declaration public void AddVariable(params double[] components) Parameters Type Name Description System.Double [] components Components of the variables to add. | Improve this Doc View Source GetVariable(Int32) Returns the components of the variable at the given index. Declaration public double[] GetVariable(int variableIndex) Parameters Type Name Description System.Int32 variableIndex Index of the variable to get. Returns Type Description System.Double [] The components of the variable at the index."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Overview | BRIDGES Documentation",
    "keywords": "Overview BRIDGES is based several namespaces: BRIDGES.Algebra : Contains interfaces defining the mathematical algebraic structures which allow the manipulation of element in a generic way. BRIDGES.Arithmetic : Contains number type structures, as well as class representation of univariate and multivariate polynomials useful for geometric manipulations. BRIDGES.DataStructure : Contains structures used to for the representation of surfaces. BRIDGES.Geometry : Contains interfaces, classes and structures representing object in different geometric spaces. BRIDGES.LinearAlgebra : Contains implementation of basic objects for linear algebra and algorithm to solve linear problems."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Overview | BRIDGES Documentation",
    "keywords": "Overview The article section contains details on the content of the framework and tutorials on how to use it in your projects."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome on the homepage of BRIDGES. | BRIDGES Documentation",
    "keywords": "Welcome on the homepage of BRIDGES . BRIDGES is a framework developped by l'Ecole des Ponts ParisTech and its Build'in platform. The framework is intended to provide design and analysis tools in structural mechanics, physical modelling, geometry processing, machine learning and robotics. BRIDGES is cross-platform, meaning that it can be used on different OS and machines. A basic geometry kernel is implemented to make the use of the framework independent from any modelling software."
  },
  "README.html": {
    "href": "README.html",
    "title": "BRIDGES | BRIDGES Documentation",
    "keywords": "BRIDGES Tools from the Build'in platform for Geometry and Structural Design"
  }
}