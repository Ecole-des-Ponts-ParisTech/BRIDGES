# This workflow builds the NuGet package and publish it on GitHub.
name: Deploy Nuget Package

# Controls the event triggering the workflow
on:
  # Gives the possibility to trigger the workflow from another workflow.
  workflow_call:

env:
  # Path of the Project being Tested and Packaged.
  PROJECT_PATH: 'BRIDGES/BRIDGES.csproj'
  # Output directory for the NuGet Package
  PKG_OUTPUT_DIR: ${{ github.workspace }}/output
  # URL of the GitHub Package Repository
  NUGET_SRC_URL: https://nuget.pkg.github.com/Ecole-des-Ponts-ParisTech/index.json

  # Token automatically generated by GitHub for the workflow
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  build-and-pack-and-deploy:

    runs-on: ubuntu-latest

    steps:

    # Check-out the branch
    - name: Check-out Branch
      uses: actions/checkout@v3

    # Setup the .Net environment
    - name: Setup .Net
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    # Build the solution in the branch
    - name: Build Solution
      run: dotnet build --configuration Release


    # On release : Create an environment variable with the name of the branch
    - name: Get Branch Name
      if : github.event_name == 'release'
      run: echo "GITHUB_BRANCH=${{ github.event.release.target_commitish }}" >> $GITHUB_ENV

    # On release : Create an environment variable with the release version
    - name : Get Release Version
      if : github.event_name == 'release'
      run : echo "RELEASE_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
    # On release : Create an environment variable with the version number
    - name : Get Version Number
      if : github.event_name == 'release'
      run : echo "RELEASE_NUMBER=${RELEASE_VERSION:1}" >> $GITHUB_ENV


    # For Release : Build NuGet package from master branch
    - name: Create Master Release NuGet
      if: ${{ (env.GITHUB_BRANCH == 'master') && (!github.event.release.prerelease) }}
      run:
        dotnet pack ${{ env.PROJECT_PATH }} --no-build -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
        --configuration Release -p:PackageVersion=${{env.RELEASE_NUMBER}} --output ${{ env.PKG_OUTPUT_DIR }}
    # For Pre-Release : Build NuGet package in beta version from master branch
    - name: Create Master Pre-Release NuGet
      if: ${{ (env.GITHUB_BRANCH == 'master') && (github.event.release.prerelease) }}
      run:
        dotnet pack ${{ env.PROJECT_PATH }} --no-build -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
        --configuration Release -p:PackageVersion=${{env.RELEASE_NUMBER}}-beta --output ${{ env.PKG_OUTPUT_DIR }}
    # For Release : Build NuGet package in beta version from develop branch
    - name: Create PreRelease NuGet
      if: ${{ ((env.GITHUB_BRANCH == 'develop') }}
      run:
        dotnet pack ${{ env.PROJECT_PATH }} --no-build -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
        --configuration Release -p:PackageId:BRIDGES-dev -p:PackageVersion=${{env.RELEASE_NUMBER}}-beta --output ${{ env.PKG_OUTPUT_DIR }}


    # Publish the NuGet package on github
    - name: Push NuGet Package
      run: |
        dotnet nuget push ${{ env.PKG_OUTPUT_DIR }}/*.nupkg --api-key ${{ env.GITHUB_TOKEN }} --source ${{ env.NUGET_SRC_URL }}
        dotnet nuget push ${{ env.PKG_OUTPUT_DIR }}/*.snupkg --api-key ${{ env.GITHUB_TOKEN }} --source ${{ env.NUGET_SRC_URL }}
